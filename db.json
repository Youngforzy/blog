{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"themes/tkl/_config.yml","hash":"0f875a4c190d4c3da6ff590302187130d91bcca6","modified":1523372586300},{"_id":"themes/tkl/README.md","hash":"3361d02c1ad4096251c6addcd40495c806002c56","modified":1523202383041},{"_id":"source/_posts/ConcurrentHashMap在JDK1.7中的实现分析.md","hash":"c15d7426b251842e4024825f9cc1f02719c812f6","modified":1523440951863},{"_id":"themes/tkl/LICENSE","hash":"6b8f5769b47147a271f7d5a808b802dcb44fab85","modified":1523202383041},{"_id":"source/_posts/AQS共享锁的实现原理.md","hash":"e86a1235e5ef982cb0b1d0d4b7f1c31017a84e55","modified":1523440951863},{"_id":"source/_posts/HashMap 在JDK1.7中的实现原理分析.md","hash":"7a08e5b3da58908afab2dd584e7d611473033c97","modified":1523440951864},{"_id":"source/_posts/ConcurrentHashMap在JDK1.8中的实现分析.md","hash":"3b3869323d112e18706afff2acf9a9d1ac4205b1","modified":1523440951864},{"_id":"source/_posts/HashMap 在JDK1.8中的实现（与JDK1.7对比）.md","hash":"01efabdd89632db50da0e396a8476f5ed65467e2","modified":1523440951865},{"_id":"source/_posts/HashMap引发的线程安全问题.md","hash":"2fa3d3d303b9ce0ff97a92a3bb11ac3df6283f8f","modified":1523440951866},{"_id":"source/_posts/JVM之垃圾收集算法.md","hash":"633bc8729680049a8d69302f4ee08f805a917879","modified":1523440951866},{"_id":"source/_posts/JVM之垃圾收集器.md","hash":"96eb9180bbcae67f7730050dc02484c1084a21df","modified":1523440951866},{"_id":"source/_posts/JVM之对象创建过程.md","hash":"f516bf27cd25d4a942875d5cbbc631a0e59f29bc","modified":1523440951866},{"_id":"source/_posts/Java(spring)实现Mysql的定时备份与还原.md","hash":"c0df57cd788a7f9ed0743546cdededd01c36dc6e","modified":1523440951867},{"_id":"source/_posts/JS特效.md","hash":"120be6aff33d736058d010d18efe6db8020db027","modified":1507565311273},{"_id":"source/_posts/JVM之类加载机制.md","hash":"417a226f125eea6062c1e4929eb61099f63fdc7b","modified":1523440951866},{"_id":"source/_posts/Java并发之Condition的实现分析.md","hash":"b7bfa63feda5915c8209f48ec6490861f8227c86","modified":1523440951867},{"_id":"source/_posts/Java并发之Executor框架.md","hash":"54160bd46cfee3d61ad77c08fd93a1f82c37aee9","modified":1523440951867},{"_id":"source/_posts/Hexo发布博客的MarkDown文件中引入JS代码.md","hash":"8df9e903d10eb2555f61689c3c9b04ee56bb561b","modified":1507565311273},{"_id":"source/_posts/Java并发工具类之CyclicBarrier.md","hash":"e9de9f6b39192460f053481a8b4baed9f80fb649","modified":1523440951867},{"_id":"source/_posts/Java并发工具类之CountDownLatch.md","hash":"0b762399b125e53048eba4c774e442d2aa7a874d","modified":1523440951867},{"_id":"source/_posts/Java线程池的实现分析.md","hash":"349fc43157c7e2bfc10714f1007be9233c527d78","modified":1523440951867},{"_id":"source/_posts/Java并发工具类之Semaphore.md","hash":"2dfdf978f78fcf06ae3330456f3461706d8d98f1","modified":1523440951867},{"_id":"source/_posts/Lock接口的介绍及使用.md","hash":"9a33052e30c8956a58e18c82d77299b49f04f132","modified":1523440951868},{"_id":"source/_posts/Lock实现之AQS——AbstractQueuedSynchronizer.md","hash":"8ad0bebe84d6a46eaa8ddf95afb6de53537c3fae","modified":1523440951868},{"_id":"source/_posts/Mysql中查询某个数据库中所有表的字段信息.md","hash":"e34fc552c4779b4374dffc722922e52b585d4838","modified":1507565311273},{"_id":"source/_posts/Redis—Pipline.md","hash":"c83789a76f177b4e41d8fc31eefa81d0d19f668c","modified":1507565311273},{"_id":"source/_posts/ReentrantReadWriteLock可重入读写锁.md","hash":"815df96b805833af5aa8c2d6f95b9b4f235fd9ca","modified":1523440951869},{"_id":"source/_posts/ReentrantLock重入锁.md","hash":"e4c11d216973077d0a0d9ef611f25b8d0e0187bc","modified":1523440951869},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1507565311273},{"_id":"source/_posts/jersey2.md","hash":"d67d249aac1cc0c85c21a4d641b359ae3068b82d","modified":1507565311273},{"_id":"source/_posts/Thrift.md","hash":"cb0dac342afbe227879a5058586a6c498cea775f","modified":1507565311273},{"_id":"source/_posts/mysql批量更新.md","hash":"b5e6c257a42ffe5915a67eddc7c83e651414d1e7","modified":1507565311273},{"_id":"source/categories/index.md","hash":"73e42bfab03ff79be50af6bb2e8a2f75f628f287","modified":1507565311273},{"_id":"source/_posts/中缀表达式转后缀表达式（逆波兰）.md","hash":"29c1579a04fe90ebf43c8f9a31adb35769bdda7f","modified":1523440951870},{"_id":"source/_posts/our01.md","hash":"660fc4513295cb643e8ef686f2e91044c32f6bec","modified":1507565311273},{"_id":"source/_posts/深入理解synchronized.md","hash":"4fbd743730e79e6761cf742783324360d7702eb4","modified":1507974891785},{"_id":"source/album/index.md","hash":"8efcbe60965b31ae667a4679f785d57217bf12f5","modified":1507565311273},{"_id":"source/_posts/深入理解volatile关键字(1).md","hash":"8101f345f5b4864093cd577621a50b04ab156675","modified":1507794018054},{"_id":"themes/tkl/.git/FETCH_HEAD","hash":"2b9c32ea1b6ceea91ecaa5c32e741714422ec525","modified":1523202472486},{"_id":"themes/tkl/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523202382994},{"_id":"source/tags/index.md","hash":"6d3d23657bd3d99aa717943d2f70d82e0ee1aa17","modified":1507565311273},{"_id":"themes/tkl/.git/config","hash":"09ca2c38945aae3fa93bbdf02fc1858e5d2b344e","modified":1523202383025},{"_id":"themes/tkl/.git/index","hash":"e04e349ef849c8488181e3fe0736f1b5d91be29e","modified":1523202383134},{"_id":"source/wechat/index.md","hash":"1008899b9ed4c1f30817cb843c0932bd727dfc9e","modified":1507565311273},{"_id":"themes/tkl/.git/ORIG_HEAD","hash":"b0471824d06313738e72b656b7a9c27a93fc39b5","modified":1523202472611},{"_id":"themes/tkl/.git/packed-refs","hash":"6028523381f4772cabd066058ff43dbe51057462","modified":1523202382978},{"_id":"themes/tkl/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523202374888},{"_id":"themes/tkl/layout/archive.ejs","hash":"43e2dd0a6f82acba7e8dae563ff358854e63338d","modified":1523202383056},{"_id":"themes/tkl/layout/about.ejs","hash":"9a6da09178130877fa7c6852fe41c714b46b773c","modified":1523202383056},{"_id":"themes/tkl/layout/index.ejs","hash":"13fd753d2b2e82ada96902b13a3e0b6dbafcd3c5","modified":1523202383056},{"_id":"themes/tkl/layout/category.ejs","hash":"7b863018dd9b05f8a1ebabf58e96add0049d7abe","modified":1523202383056},{"_id":"themes/tkl/layout/page.ejs","hash":"e36013572b4f5e4bcd9ebdcf86d4d32854190235","modified":1523202383056},{"_id":"themes/tkl/layout/post.ejs","hash":"12b1d7c22468b220bb8c2c53f75081f9a5443e0c","modified":1523202383056},{"_id":"themes/tkl/layout/layout.ejs","hash":"75930741db6f3b25a15ef77d2f28f88dd50ceefc","modified":1523202383056},{"_id":"source/about/index.md","hash":"0ec65a8d9e5af609b19e025d22b2e0e5741f4afb","modified":1507565311273},{"_id":"themes/tkl/layout/tag.ejs","hash":"3e22a8a5281d7648d90b604f95cbdd1790008a70","modified":1523202383072},{"_id":"themes/tkl/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523202374888},{"_id":"themes/tkl/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523202374904},{"_id":"themes/tkl/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523202374904},{"_id":"themes/tkl/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523202374920},{"_id":"themes/tkl/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523202374920},{"_id":"themes/tkl/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523202374951},{"_id":"themes/tkl/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523202374920},{"_id":"source/love/index.md","hash":"974abfb6f0985d0ce8ebfa4e96995e14e1ed9384","modified":1507565311273},{"_id":"themes/tkl/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523202374967},{"_id":"themes/tkl/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523202374967},{"_id":"themes/tkl/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1523202374951},{"_id":"themes/tkl/layout/_widget/archive.ejs","hash":"88e191e3d14541299ed03b9a45be70974df51143","modified":1523202383041},{"_id":"themes/tkl/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1523202374935},{"_id":"themes/tkl/layout/_widget/tag.ejs","hash":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75","modified":1523202383041},{"_id":"themes/tkl/layout/_widget/category.ejs","hash":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26","modified":1523202383041},{"_id":"themes/tkl/layout/_widget/recent_posts.ejs","hash":"d6591c745402fbc600e682830a343f732e336e4f","modified":1523202383041},{"_id":"themes/tkl/.git/logs/HEAD","hash":"44a885d45615d3f3b957244fac45d33bce907946","modified":1523202382994},{"_id":"themes/tkl/layout/_widget/tagcloud.ejs","hash":"9028129dd2e56813197d0c38db5df8110aaeaabb","modified":1523202383041},{"_id":"themes/tkl/layout/casper/footer.ejs","hash":"e438fc07a507a61207175245b350385f01ce6859","modified":1523202383056},{"_id":"themes/tkl/layout/casper/after_all.ejs","hash":"cb8f5deeead5fe6d409183724ab331212c94f6aa","modified":1523202383056},{"_id":"themes/tkl/layout/casper/archive.ejs","hash":"d6378de697a6e3094a745d52d0021239062f2160","modified":1523202383056},{"_id":"themes/tkl/layout/casper/about.ejs","hash":"b0127ff072ce3158cc59301da9322c7dd9fd3a7d","modified":1523202383056},{"_id":"themes/tkl/layout/casper/post.ejs","hash":"3701ac937d766fa83a2d3dbdb300afb4b4fbef79","modified":1523202383056},{"_id":"themes/tkl/layout/casper/head.ejs","hash":"099621eee916fe76c2e0999b7dac4d3424738d12","modified":1523202383056},{"_id":"themes/tkl/source/css/all.styl","hash":"ca19553dee39561ef97b4ceb6d2866dad7b6cbcf","modified":1523202383072},{"_id":"themes/tkl/layout/casper/index.ejs","hash":"f8e62bbe1f830f381a90b5fe349c5f3494d34257","modified":1523202383056},{"_id":"themes/tkl/source/css/animate.css","hash":"fd699ba3667af7bbe7a2170982480cb4113fe6e7","modified":1523202383072},{"_id":"themes/tkl/layout/casper/header.ejs","hash":"04876bc095c5577d24e7253d7071a85591491b47","modified":1523202383056},{"_id":"themes/tkl/source/css/flexslider.css","hash":"ced8374af83d974da73268abf1103444207f68e4","modified":1523202383072},{"_id":"themes/tkl/source/css/animsition.min.css","hash":"062812c0c364e3d2372577add1f46da223efcabd","modified":1523202383072},{"_id":"themes/tkl/source/css/custom.css","hash":"4180dd1fcba1dd24a8ba517f293282599fe4d58e","modified":1523202383072},{"_id":"themes/tkl/source/css/iconList.css","hash":"ad7cb63acce3237e4975e168a23eb213960a4667","modified":1523202383072},{"_id":"themes/tkl/source/css/screen.css","hash":"1863cf50647ba44c821592bd8896f7aa3165b901","modified":1523202383072},{"_id":"themes/tkl/source/css/slidebars.min.css","hash":"ee3d7d32bce684d84baab0a19fdd82447339b3c7","modified":1523202383072},{"_id":"themes/tkl/source/css/ie8.css","hash":"fd202f1fa4850457c07361cd7fb3c8b6591590c5","modified":1523202383072},{"_id":"themes/tkl/source/css/syntax.styl","hash":"03f421b2307e5fd3e0c82554dc7e7b9edbdb90c4","modified":1523202383072},{"_id":"themes/tkl/source/highlightjs/arta.css","hash":"74f644ebeb5144abe227f24a523874449ccabc9d","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/ascetic.css","hash":"ce98f249212f426d91f532a5129d2c2f606a6a4a","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/brown_paper.css","hash":"8ab0a5df07fdada618c8d9dea8908183fe642b74","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/default.css","hash":"7cbcf0cd72799792d34eb26304e12c2f93f60f58","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/far.css","hash":"fd4a8b25728c7a931d334b96cc69cebe8ac9451d","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/foundation.css","hash":"de4ee2c8b24e23e87e846b333e22fadd189d5c60","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/docco.css","hash":"9c4e5ef7fcb703430d18b7bcbd54ff17b78bb1ed","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/dark.css","hash":"f02394fdbaca9f15fcccfbdda0b4da742bb82a59","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/github.css","hash":"7be89833c6b84288184e10492154843e742b7e7c","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/idea.css","hash":"2de53944c5c22116edc6eee8f925e5e783b8073d","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/googlecode.css","hash":"05b30bf441d099ae1b9f7d112ebd8cd23e146296","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/ir_black.css","hash":"4463ff416bd324833679db5c9b26006458642645","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/mono-blue.css","hash":"8579eedecfafb7a9c17b6fbd6599a915b403bce5","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/monokai.css","hash":"2e62e875d81dec0357f3bfa0ce93ddc2bfcbfe20","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/monokai_sublime.css","hash":"3cd30cc8f329731e28c688455b2c699d71ce0b90","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/magula.css","hash":"e85300b10bb020d7e016c187d3e01a3697fcb7c3","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/pojoaque.css","hash":"37514cdc33b32a7097606f55ec1cc1126dafe000","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/obsidian.css","hash":"fde4722aba42b797a5c521b8052403670d9eb0aa","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/railscasts.css","hash":"9e9cc71a9afc948dc90d79025fc0732ce109cf8e","modified":1523202383088},{"_id":"themes/tkl/source/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/rainbow.css","hash":"4fe18519c63be9f95d8ad5d1758d494390634b7d","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/school_book.css","hash":"e5cf5c0f8a35d9283d67eccce6f52138ba6789b5","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/solarized_dark.css","hash":"ba304db20da70d69a8d27d05b8fc75edf74bb40e","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/solarized_light.css","hash":"3e827b41ab1866d05ba85c48c0e3f518f6822f4f","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/sunburst.css","hash":"499a3aa2b290c22c5eb106b05bcdf2d3d5ed1229","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/tomorrow-night-blue.css","hash":"698c62ba5dcbec5a993c3588420a7b2e9708209e","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/tomorrow-night-bright.css","hash":"926b4aaeea76de8be818f6cefa4d33c82e527a9d","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/tomorrow.css","hash":"40ba59915e13ac1d188dfc32efb2385adbcb57ff","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/tomorrow-night-eighties.css","hash":"16172139f6cd846983837c9d650e616f57df15e0","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/tomorrow-night.css","hash":"52d47a69b14321ddb009582b9869e4cd389f1051","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/vs.css","hash":"525fcc362fb0108e394436cc9c2553acaa4b9478","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/zenburn.css","hash":"93c9c9e4638cd8826681651e4970df1ce48e8f50","modified":1523202383103},{"_id":"themes/tkl/source/highlightjs/xcode.css","hash":"fb9dba283e9f5eb70a23a2c0cf6033a58da7fe5d","modified":1523202383103},{"_id":"themes/tkl/source/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1523202383072},{"_id":"themes/tkl/source/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1523202383119},{"_id":"themes/tkl/source/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1523202383119},{"_id":"themes/tkl/source/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1523202383119},{"_id":"themes/tkl/source/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1523202383072},{"_id":"themes/tkl/source/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1523202383072},{"_id":"themes/tkl/source/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1523202383119},{"_id":"themes/tkl/source/js/html5shiv.min.js","hash":"c6a4cb6f94c76f9d053ef330247358ebdb2d3149","modified":1523202383119},{"_id":"themes/tkl/source/js/jquery.flexslider-min.js","hash":"290cc9dfca28bcda2db8e4445c1ab0baf2715281","modified":1523202383119},{"_id":"themes/tkl/source/js/respond.min.js","hash":"4ea901a86ea32d7168a735cf293ca0d82e63c9dd","modified":1523202383134},{"_id":"themes/tkl/source/css/bootstrap.min.css","hash":"d2333a926ae25bbd3056814f13fec0843468e49e","modified":1523202383072},{"_id":"themes/tkl/source/css/style.css","hash":"7d000ca747c544d407b430ff88f02ceda87211b2","modified":1523202383072},{"_id":"themes/tkl/source/fonts/icons.svg","hash":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c","modified":1523202383072},{"_id":"themes/tkl/.git/objects/pack/pack-ebe219dee4c6c4cf1009489b359495d6bb650a52.idx","hash":"29085a94c61263f2be4911d23198914c9a0dfef2","modified":1523202382900},{"_id":"themes/tkl/source/js/scripts.js","hash":"7220993a530684382f967f7301466393d93fc182","modified":1523202383134},{"_id":"themes/tkl/.git/refs/heads/master","hash":"b0471824d06313738e72b656b7a9c27a93fc39b5","modified":1523202382994},{"_id":"themes/tkl/layout/casper/post/comments.ejs","hash":"c40a320cd9e9e8c5a590d7c35810799ccbfc5d96","modified":1523202383056},{"_id":"themes/tkl/layout/casper/post/navigation.ejs","hash":"eea8b316d155217ea06d15e3eaf5c575b6edff9f","modified":1523202383056},{"_id":"themes/tkl/layout/casper/post/meta.ejs","hash":"bb1ad0d2c78f3882c4cf68dafb3d24ba779bf8b6","modified":1523202383056},{"_id":"themes/tkl/source/js/jquery-1.11.1.min.js","hash":"4fbe0563917d6f6289e4e1b4a0a8758e4e43bda9","modified":1523202383119},{"_id":"themes/tkl/layout/casper/post/duoshuo.ejs","hash":"ba2b1b1dd0b633ac6cc690974a1b6303ecacb09a","modified":1523202383056},{"_id":"themes/tkl/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523202382994},{"_id":"themes/tkl/.git/logs/refs/heads/master","hash":"44a885d45615d3f3b957244fac45d33bce907946","modified":1523202382994},{"_id":"themes/tkl/source/js/plugins.min.js","hash":"8f245d4dbd289e28973bbec78f1991d40563328c","modified":1523202383119},{"_id":"themes/tkl/.git/logs/refs/remotes/origin/HEAD","hash":"44a885d45615d3f3b957244fac45d33bce907946","modified":1523202382994},{"_id":"themes/tkl/source/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1523202383119},{"_id":"themes/tkl/source/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1523202383103},{"_id":"themes/tkl/source/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1523202383119},{"_id":"themes/tkl/.git/objects/pack/pack-ebe219dee4c6c4cf1009489b359495d6bb650a52.pack","hash":"71c0e2b129792df432b11606d4a81a7c0ba33713","modified":1523202382916},{"_id":"public/atom.xml","hash":"99a365b476a7e6b671fe05c2607262cbdf0465f9","modified":1523203117330},{"_id":"public/categories/index.html","hash":"6c220ba22230185e6fbd814545210f7fea0240b6","modified":1523372617391},{"_id":"public/wechat/index.html","hash":"7e1661ed0d68de57665bb10a2918dd313439fb4c","modified":1523372617392},{"_id":"public/tags/index.html","hash":"2a3bbce268ad8530b4be342522f3507f53f85e39","modified":1523372617393},{"_id":"public/album/index.html","hash":"6f2148f9e93b5b0f541e41df5274c3f7c89189b5","modified":1523372617393},{"_id":"public/about/index.html","hash":"f778610d82150b57ff5e54934bd638cca650548f","modified":1523372617393},{"_id":"public/love/index.html","hash":"dae1096be465394a5d3d75809413d02dc969e329","modified":1523372617398},{"_id":"public/2017/12/25/Java(spring)实现Mysql的定时备份与还原/index.html","hash":"bedb20c40e6b4010ef76d7758df3a3b5a079910c","modified":1523203118105},{"_id":"public/2017/12/18/中缀表达式转后缀表达式（逆波兰）/index.html","hash":"318a59d7517dc6706ac4db08cbfceeea7fc6297a","modified":1523203118105},{"_id":"public/2017/12/12/Java并发工具类之Semaphore/index.html","hash":"9a34980355e0e4841efbcfe53bbc9bd2d2ffcd9d","modified":1523203118105},{"_id":"public/2017/12/08/Java并发工具类之CyclicBarrier/index.html","hash":"eec2f05f813c786b76db0513c79bcbf34f9d13cf","modified":1523203118105},{"_id":"public/2017/12/03/Java并发工具类之CountDownLatch/index.html","hash":"58de18915c04ca28af658c98393e8104ba197a52","modified":1523203118105},{"_id":"public/2017/12/01/Java并发之Condition的实现分析/index.html","hash":"863e2b09c4b8d0c257562ba476fb37dff83ff589","modified":1523203118105},{"_id":"public/2017/11/10/ConcurrentHashMap在JDK1.8中的实现分析/index.html","hash":"0d53dcc7fbca1821e0cae18b97ba9fa26b5794bf","modified":1523203118105},{"_id":"public/2017/11/06/ConcurrentHashMap在JDK1.7中的实现分析/index.html","hash":"2ab1b81c3631d4d1d78eb56099da1176c4fd2625","modified":1523203118105},{"_id":"public/2017/11/03/HashMap引发的线程安全问题/index.html","hash":"02cf65dc80d6dc8b3c439f5b664149f10787d80a","modified":1523203118105},{"_id":"public/2017/10/30/HashMap 在JDK1.7中的实现原理分析/index.html","hash":"1ac4fd34d168b7b9d724d9cb7ff3ae3ac6c2616f","modified":1523203118105},{"_id":"public/2017/10/28/ReentrantReadWriteLock可重入读写锁/index.html","hash":"993f5bc4a07d85328c818f67a3d00659e9611964","modified":1523203118105},{"_id":"public/2017/10/26/JVM之对象创建过程/index.html","hash":"36305771b3256e8c371b7ecbe7bf6150a10daa00","modified":1523203118105},{"_id":"public/2017/10/24/JVM之类加载机制/index.html","hash":"94ebbbc9cf7b46ab09212d024da9d3f4c65cf6c6","modified":1523203118105},{"_id":"public/2017/11/18/Java线程池的实现分析/index.html","hash":"1d78f5310cc0091151c632bc43223e480912987d","modified":1523203118105},{"_id":"public/2017/11/22/Java并发之Executor框架/index.html","hash":"7f642e87136a9666cdc4e4c74f8bb3b313446f02","modified":1523203118105},{"_id":"public/2017/11/01/HashMap 在JDK1.8中的实现（与JDK1.7对比）/index.html","hash":"40ed9d9ec43ce7239fea8e0e6b1b02ac68641617","modified":1523203118105},{"_id":"public/2017/10/21/JVM之垃圾收集算法/index.html","hash":"78ec02a38c0d9d90672de9e395b8571a76c5cdd6","modified":1523203118105},{"_id":"public/2017/10/23/JVM之垃圾收集器/index.html","hash":"58c2fadec7bd2b44ebfa395175f64ebbed03e96b","modified":1523203118105},{"_id":"public/2017/08/07/JS特效/index.html","hash":"274a24bdd226fd569b2e4f1a911f6eeb40ff6f7e","modified":1523203118120},{"_id":"public/2017/08/09/Mysql中查询某个数据库中所有表的字段信息/index.html","hash":"5ea8e5b3eee877377098564af8cbc7c98e524bf6","modified":1523203118120},{"_id":"public/2017/10/10/hello-world/index.html","hash":"303b6bbce556ca8fe4cf7aa9b7cfe1e278c7def6","modified":1523203118120},{"_id":"public/2017/07/20/our01/index.html","hash":"2207291e3cd2b78fdc5346c40af8f5cdb90a6d0a","modified":1523203118120},{"_id":"public/archives/2017/08/index.html","hash":"00591280a262124e77ee31ebc03bb7ea51b4cab2","modified":1523372617394},{"_id":"public/archives/2017/07/index.html","hash":"b3ab6c97e54de7649a34e82035a6004002584bee","modified":1523372617393},{"_id":"public/categories/技术/page/4/index.html","hash":"4b3a2075c6fff02fe4ca04dde8506ace973bdf1e","modified":1523372617394},{"_id":"public/categories/芭乐/index.html","hash":"641884838b12c937fbc61d8d4462d85ce88f91fe","modified":1523372617394},{"_id":"public/tags/ConcurrentHashMap/index.html","hash":"46c3a304bc7c201feb52bdcc2c674c6afd60dc49","modified":1523372617394},{"_id":"public/tags/并发/page/2/index.html","hash":"9d95c249d8d247b3a2445f230fcacf10fc66f53a","modified":1523372617394},{"_id":"public/tags/JDK1-7/index.html","hash":"3653f62e9e8fa695e7b3a52e58104e745edf4d88","modified":1523372617395},{"_id":"public/tags/AQS/index.html","hash":"7b72ede05ad7ef8ad187b050ddd892863bfba87b","modified":1523372617394},{"_id":"public/tags/JDK1-8/index.html","hash":"ed61fa1475ceef39c4a487b6cbf96ff3032cd228","modified":1523372617394},{"_id":"public/tags/共享锁/index.html","hash":"75089e0afe261ea6ea8c157d979e6559772137ea","modified":1523372617394},{"_id":"public/tags/HashMap/index.html","hash":"0f3bf6a390395cd7d39aba7a34387a896232b9f2","modified":1523372617394},{"_id":"public/tags/线程安全/index.html","hash":"cadf4549fe6c083f41ce7faa56588cd6cb19a11a","modified":1523372617394},{"_id":"public/tags/JVM/index.html","hash":"877857bfb10f435757dcaf59e427cf7871ff79e1","modified":1523372617394},{"_id":"public/tags/垃圾收集器/index.html","hash":"73c254a94915702f4aef516800432371ed881a1c","modified":1523372617395},{"_id":"public/tags/对象创建过程/index.html","hash":"121c28d4d77543889055bdc9b84a970f8deb0923","modified":1523372617395},{"_id":"public/tags/垃圾收集算法/index.html","hash":"7b2d453e46452bbe92aee36806010e3c59a3c0a2","modified":1523372617395},{"_id":"public/tags/类加载机制/index.html","hash":"6f14f64fbb6513b4af996856b9750d0b9db97e89","modified":1523372617395},{"_id":"public/tags/Condition/index.html","hash":"4b37afb38094ee8f68e6d2661186e4f56af833ab","modified":1523372617395},{"_id":"public/tags/Executor框架/index.html","hash":"673874c9136f2bf95e8dfdf528ef28f6d1bb2936","modified":1523372617395},{"_id":"public/tags/Hexo/index.html","hash":"62a1ad9599f84384c05f52ff031b4d1b96a9f422","modified":1523372617395},{"_id":"public/tags/spring定时任务/index.html","hash":"52723eaffac7b620ffa1800d1a7e6e24a4b8c851","modified":1523372617395},{"_id":"public/tags/Mysql备份还原/index.html","hash":"91ba3f3ea3aab464f8609b2d07d4d851c1b0c87c","modified":1523372617395},{"_id":"public/tags/CyclicBarrier/index.html","hash":"c303f367392e00c7d2ab377eefc1cbb7d8cb0949","modified":1523372617396},{"_id":"public/tags/Java线程池/index.html","hash":"11843c690d0ce5401235ce5d3093abf2c45de8be","modified":1523372617396},{"_id":"public/tags/CountDownLatch/index.html","hash":"256bbbb4946c8a5c1d56492ca71178d58838b4fe","modified":1523372617396},{"_id":"public/tags/Semaphore/index.html","hash":"b1311f8c94f7020cd155690428c148ae54efa0bf","modified":1523372617396},{"_id":"public/tags/MarkDown/index.html","hash":"2c9b363ee1c9f7e462f2d10f5da73ae098ed1320","modified":1523372617395},{"_id":"public/tags/Lock/index.html","hash":"54a0005a50325b612566eedd03c6e3dc1d0d75c0","modified":1523372617396},{"_id":"public/tags/Redis/index.html","hash":"ccfae6e896c0d0f339bcee16f67ac4c10c2cabb3","modified":1523372617396},{"_id":"public/tags/Mysql/index.html","hash":"bd78b30b491cb18fc7b1d499d951af4323cf8d60","modified":1523372617396},{"_id":"public/tags/ReentrantReadWriteLock/index.html","hash":"ef823178076915442d47c8f3a3c7a97e129121c0","modified":1523372617396},{"_id":"public/tags/数据库/index.html","hash":"b08c0c0c6ef9d84a7ae05838448b4265d286e554","modified":1523372617397},{"_id":"public/tags/可重入读写锁/index.html","hash":"96f4c045c4d6e0e9ea01f8558c6a17df18e4aa7d","modified":1523372617396},{"_id":"public/tags/ReentrantLock/index.html","hash":"74ee11edf18c28ccfef82669f5fe540de0dcbb24","modified":1523372617396},{"_id":"public/tags/重入锁/index.html","hash":"7ce8d7b6c97f7601bc26368a075cb93e790bf0aa","modified":1523372617397},{"_id":"public/tags/Java/index.html","hash":"dbdd7ea024d70d2e2d2708165f462dc41edb3a66","modified":1523372617397},{"_id":"public/tags/Jersey/index.html","hash":"55bbd145fcb8c611397f51ba94316eb0262ae20e","modified":1523372617397},{"_id":"public/tags/Pipeline/index.html","hash":"7ac076429ec06fb1aac3f884a45593b5303873fc","modified":1523372617397},{"_id":"public/tags/Thrift/index.html","hash":"1224a4794e4ed9eaacf07d1bc99968a61ec264e0","modified":1523372617397},{"_id":"public/tags/RPC/index.html","hash":"5180c1bf3450453d89802f257efccbcabd062b29","modified":1523372617397},{"_id":"public/tags/算法/index.html","hash":"b43476e25036f4211378b4893da8d8033745c629","modified":1523372617397},{"_id":"public/tags/批量，缓存/index.html","hash":"b0cbdc609835d6cfc74d80d65c857e572b0705e1","modified":1523372617397},{"_id":"public/tags/Mybatis/index.html","hash":"9c08a607ce246ddd983621c87cfbde7eee84185a","modified":1523372617397},{"_id":"public/tags/逆波兰表达式/index.html","hash":"b4f3ccb4334086f7fe7d9de07807f2e78287cbae","modified":1523372617397},{"_id":"public/tags/Soul/index.html","hash":"346ac107ce8d0c5fa6a08387dd6d1b2182417ca4","modified":1523372617397},{"_id":"public/tags/synchronized/index.html","hash":"a523a3f31a0a132a159e0bace65c688446581a1f","modified":1523372617398},{"_id":"public/tags/volatile/index.html","hash":"b6dd01fec1827090c111fe3c5b8ff37971dbd290","modified":1523372617398},{"_id":"public/2017/10/18/Lock实现之AQS——AbstractQueuedSynchronizer/index.html","hash":"9dc8f97a93277dd88dae77f7a8786205125bb431","modified":1523203118120},{"_id":"public/2017/10/20/ReentrantLock重入锁/index.html","hash":"67eefef0c667429c3efe3d811612825a9410477d","modified":1523203118120},{"_id":"public/2017/10/17/Lock接口的介绍及使用/index.html","hash":"8ceac1248992799a42afb8c0a1dc0b4b5cdd1dc0","modified":1523203118120},{"_id":"public/2017/10/19/AQS共享锁的实现原理/index.html","hash":"fb120ceb768251be2d7527ec9cb009ca8aca5ad4","modified":1523203118120},{"_id":"public/2017/10/14/深入理解synchronized/index.html","hash":"4d786ccb3ed1a1e218c4a20a8cf7bcbf7069bf12","modified":1523203118120},{"_id":"public/2017/10/12/深入理解volatile关键字(1)/index.html","hash":"333f3b84775883364c52eb04b170a44cf98ab23e","modified":1523203118120},{"_id":"public/2017/08/07/Hexo发布博客的MarkDown文件中引入JS代码/index.html","hash":"eee039536c5bc15c12a0d991e41d3228776645de","modified":1523203118120},{"_id":"public/2017/07/18/Thrift/index.html","hash":"e71ea65f9dfcc2349de4fb28e37e012f3ca1777d","modified":1523203118120},{"_id":"public/2017/07/28/Redis—Pipline/index.html","hash":"1835dde204fc1591f9ad72dd0a36799a658607c1","modified":1523203118120},{"_id":"public/archives/index.html","hash":"7ec51dcff6fee3a4265f4d5667be05d74353a743","modified":1523372617398},{"_id":"public/2017/07/12/mysql批量更新/index.html","hash":"e95dc2bc29645f3c85c9524c796a9336264525b6","modified":1523203118120},{"_id":"public/archives/2017/index.html","hash":"a56c58a9a76dd56c578da5f28f56f3c8b4829923","modified":1523372617398},{"_id":"public/2017/07/10/jersey2/index.html","hash":"ab06e14c9a34c7585cc9a8a0f9e2cde3b73951e2","modified":1523203118120},{"_id":"public/categories/技术/index.html","hash":"54561d05ac7ee2f13c96e8098d7238598ff0e036","modified":1523372617398},{"_id":"public/archives/2017/11/index.html","hash":"a6f772ff857517c87f2fe0b5315c06f6fc8bf8b2","modified":1523372617398},{"_id":"public/categories/技术/page/2/index.html","hash":"33dc336529c6789ede1c0f57d606979eee6e92ac","modified":1523372617398},{"_id":"public/archives/2017/10/index.html","hash":"b1ffecaa1f1d62f99b3a02f9c47e5287e636975b","modified":1523372617398},{"_id":"public/index.html","hash":"ceb6a454b1e48f0523627153e23d10bdb3316400","modified":1523372617399},{"_id":"public/page/2/index.html","hash":"b74d1e3bb436fa2bd54b6387ef46db16aaa4390c","modified":1523372617398},{"_id":"public/categories/技术/page/3/index.html","hash":"2c5c2ea40c87356ba8af8b26eac663daa97f5a77","modified":1523372617398},{"_id":"public/archives/2017/12/index.html","hash":"96eb3dbf95ea416d15f64d23f07d8ac9241b4e8b","modified":1523372617398},{"_id":"public/page/3/index.html","hash":"be4b9cfdccb704086e62eea138ccd62a80961ec5","modified":1523372617401},{"_id":"public/page/4/index.html","hash":"55ff61a67a511b9d5f6f48df8a59f3f112734a24","modified":1523372617399},{"_id":"public/tags/并发/index.html","hash":"487e5ff867a2b9e3a7ca17c495ba58fcda46fa25","modified":1523372617401},{"_id":"public/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1523203118136},{"_id":"public/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1523203118136},{"_id":"public/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1523203118136},{"_id":"public/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1523203118136},{"_id":"public/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1523203118136},{"_id":"public/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1523203118136},{"_id":"public/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1523203118136},{"_id":"public/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1523203118136},{"_id":"public/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1523203118136},{"_id":"public/fonts/icons.svg","hash":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c","modified":1523203119979},{"_id":"public/css/animate.css","hash":"fca75b84887199a0ed8e0f056ff30f5a1302f324","modified":1523203119995},{"_id":"public/css/flexslider.css","hash":"faebc8c54ca41e3c9936edaffbabbebd512c6d5a","modified":1523203119995},{"_id":"public/css/screen.css","hash":"a13c2c6fe420f76083df2da6d7b2d765dd8b467e","modified":1523203119995},{"_id":"public/css/custom.css","hash":"02e701a0dddde40f940df04f48aa3b0e27fd9f5b","modified":1523203119995},{"_id":"public/css/ie8.css","hash":"cfdfe07ecc9f3afa5bab47155b49f0924f62d2c2","modified":1523203119995},{"_id":"public/css/slidebars.min.css","hash":"a802c15d9bf06005b463901be8325d8ce38b5b04","modified":1523203119995},{"_id":"public/css/iconList.css","hash":"f78ffffb4be40a6b0eb6ee109c958ccd062d1ae5","modified":1523203119995},{"_id":"public/css/syntax.css","hash":"d5923a6251a113ac02916bcd1119356bd780d7ef","modified":1523203120026},{"_id":"public/highlightjs/arta.css","hash":"08766ac9d70bde457fea9c553140029f57ace65a","modified":1523203120026},{"_id":"public/highlightjs/ascetic.css","hash":"ef259aecdc8f1367dcf890d6467369300c4c0d07","modified":1523203120026},{"_id":"public/highlightjs/default.css","hash":"108ad8410aa3004eafc452ae60771a2ae24d7988","modified":1523203120026},{"_id":"public/highlightjs/brown_paper.css","hash":"2a987d30dd142a5c316ace70e919e3312707ebbd","modified":1523203120026},{"_id":"public/highlightjs/far.css","hash":"8178ac70abe577ae8345f1f6291bf7d489ad384d","modified":1523203120026},{"_id":"public/highlightjs/foundation.css","hash":"308c2e0458fc117b323f7d9ce1644f7b4e52d99e","modified":1523203120026},{"_id":"public/highlightjs/docco.css","hash":"70199b44d688d0a22851bd5481260f24160a38ee","modified":1523203120026},{"_id":"public/highlightjs/idea.css","hash":"fb77c293850c454c1f0c72628c0b301537765ad2","modified":1523203120026},{"_id":"public/highlightjs/dark.css","hash":"2c2b4eb2562d812d95a26da0ffae51371b383713","modified":1523203120026},{"_id":"public/highlightjs/github.css","hash":"53f47e65e6e0e6068baf5c4b638b04d2f4e0b0bc","modified":1523203120026},{"_id":"public/highlightjs/monokai.css","hash":"a0edb8327c191516a04d456db8aae9044055a5cf","modified":1523203120026},{"_id":"public/highlightjs/ir_black.css","hash":"2da52e8562b412039b5816e1a3a2f59e7dff0c27","modified":1523203120026},{"_id":"public/highlightjs/googlecode.css","hash":"731e74bcdfd1b68aae5b5805540f727c31309ba2","modified":1523203120026},{"_id":"public/highlightjs/mono-blue.css","hash":"c143e9d8c62dc71ca39bc0b6c127464ed2396e4f","modified":1523203120026},{"_id":"public/highlightjs/magula.css","hash":"9c53982a77259331c1dc3b24ef744dd76b3fe643","modified":1523203120026},{"_id":"public/highlightjs/pojoaque.css","hash":"c9b048dc71c5b45d5cb3daac8f332a7e5d13b20f","modified":1523203120026},{"_id":"public/highlightjs/obsidian.css","hash":"d6c264e1973beb9f20001b9a4013e9983923b34e","modified":1523203120026},{"_id":"public/highlightjs/monokai_sublime.css","hash":"6b4716416b1bba643d3a7926221ce6d83a139141","modified":1523203120026},{"_id":"public/highlightjs/rainbow.css","hash":"b0e18f0f7fa08d5ad11956e2d9cc5e2ffdd514f3","modified":1523203120026},{"_id":"public/highlightjs/railscasts.css","hash":"aeb6ecd79552b9611d447fe56de5266954ea055c","modified":1523203120026},{"_id":"public/highlightjs/school_book.css","hash":"f257d41cdca2609fa4c664df9cc14b48e2bcb09f","modified":1523203120026},{"_id":"public/highlightjs/solarized_dark.css","hash":"007f9f1e7addf7e2040734cd1f733d041432c335","modified":1523203120026},{"_id":"public/highlightjs/sunburst.css","hash":"e72bc116795505c1fcae35bc69045043fc34a243","modified":1523203120026},{"_id":"public/highlightjs/solarized_light.css","hash":"a85878fd70ecd03c71944df1acbbf320bac7979f","modified":1523203120026},{"_id":"public/highlightjs/tomorrow-night-blue.css","hash":"e2bed22abcdf3f2b8ca3a1a73624751d3edc4e64","modified":1523203120026},{"_id":"public/highlightjs/tomorrow-night-bright.css","hash":"afdb004743a8d2b52d38c7a1fce32d631a0f3ded","modified":1523203120026},{"_id":"public/highlightjs/vs.css","hash":"13e2f7ec2e197d79f4fc36768ea4a0663d41e1c0","modified":1523203120026},{"_id":"public/highlightjs/tomorrow.css","hash":"a184e23b28b6a6401ecfc35e0a94de0bada589e4","modified":1523203120026},{"_id":"public/highlightjs/tomorrow-night-eighties.css","hash":"9603bc778de2dabd0ce1e7ee272a047338a8b99c","modified":1523203120026},{"_id":"public/highlightjs/tomorrow-night.css","hash":"48cd18ce93daa491d89eb63e5fe3ab640ff56d74","modified":1523203120026},{"_id":"public/highlightjs/zenburn.css","hash":"73dafd21563f5fc3bb74856d4abf97c447a27772","modified":1523203120026},{"_id":"public/highlightjs/xcode.css","hash":"78cb5758ce4085aa51edb6c5beb64d8f4511edd7","modified":1523203120026},{"_id":"public/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1523203120026},{"_id":"public/js/html5shiv.min.js","hash":"bb51a5f6c394989bb06e4171179354c6d05ec8f8","modified":1523203120026},{"_id":"public/js/respond.min.js","hash":"b5aba40d65b0d6f85859db47f757ea971a0efd30","modified":1523203120026},{"_id":"public/js/scripts.js","hash":"4e4ebd697d00d3d0fcea7cbf78f5a7312e2f22ed","modified":1523203120026},{"_id":"public/css/all.css","hash":"3f9f6cfa3ab23ed20f2a504ffb79f3fff47cba84","modified":1523203120026},{"_id":"public/css/animsition.min.css","hash":"59033074f6594a0d87c759e2b8cf9baa3a62ed6a","modified":1523203120026},{"_id":"public/js/jquery.flexslider-min.js","hash":"51b3a7d882f438d53dc69ca5289e92254160c09a","modified":1523203120026},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1523203120026},{"_id":"public/css/style.css","hash":"0188f622ed604b095b3481eafa4d2f3842935f7c","modified":1523203120026},{"_id":"public/js/plugins.min.js","hash":"5d2edd4ecc4b27af81a3255ca8a253d23fc518e1","modified":1523203120026},{"_id":"public/js/jquery-1.11.1.min.js","hash":"d6c1f41972de07b09bfa63d2e50f9ab41ec372bd","modified":1523203120026},{"_id":"public/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1523203121099},{"_id":"public/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1523203121189},{"_id":"public/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1523203121189},{"_id":"source/about.md","hash":"0ec65a8d9e5af609b19e025d22b2e0e5741f4afb","modified":1507565311273},{"_id":"public/about.html","hash":"f778610d82150b57ff5e54934bd638cca650548f","modified":1523372617393},{"_id":"themes/tkl/source/img/us.jpg","hash":"f5d46e438e6cbfbf7301b4d68e120473f8d8f11f","modified":1523372555747},{"_id":"public/img/us.jpg","hash":"f5d46e438e6cbfbf7301b4d68e120473f8d8f11f","modified":1523372617412}],"Category":[{"name":"技术","_id":"cjfqzt23t000250tc9bw2ubnr"},{"name":"芭乐","_id":"cjfqzt27l004n50tc1wsjzy3b"}],"Data":[],"Page":[{"title":"categories","date":"2017-07-10T08:56:56.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-10 16:56:56\ntype: \"categories\"\n---\n","updated":"2017-10-09T16:08:31.273Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfqzt278004b50tcniwfqzn9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"album","date":"2017-07-12T08:54:44.000Z","_content":"轨迹。","source":"album/index.md","raw":"---\ntitle: album\ndate: 2017-07-12 16:54:44\n---\n轨迹。","updated":"2017-10-09T16:08:31.273Z","path":"album/index.html","comments":1,"layout":"page","_id":"cjfqzt27a004d50tc2nns77nx","content":"<p>轨迹。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>轨迹。</p>\n"},{"title":"tags","date":"2017-07-10T08:49:30.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-10 16:49:30\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-10-09T16:08:31.273Z","path":"tags/index.html","layout":"page","_id":"cjfqzt27g004g50tcr85aaa6z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"wechat","date":"2017-07-10T11:20:47.000Z","_content":"          欢迎交流\n\n  ![Wechat](http://osuskkx7k.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170710192647.jpg)","source":"wechat/index.md","raw":"---\ntitle: wechat\ndate: 2017-07-10 19:20:47\n---\n          欢迎交流\n\n  ![Wechat](http://osuskkx7k.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170710192647.jpg)","updated":"2017-10-09T16:08:31.273Z","path":"wechat/index.html","comments":1,"layout":"page","_id":"cjfqzt27i004j50tcbvljmps5","content":"<pre><code>欢迎交流\n</code></pre><p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170710192647.jpg\" alt=\"Wechat\"></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>欢迎交流\n</code></pre><p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170710192647.jpg\" alt=\"Wechat\"></p>\n"},{"title":"","date":"2017-07-10T08:58:37.000Z","_content":"## 关于我    \n\n\n  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……\n\n  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。\n\n  \n  ![be yourself](http://osuskkx7k.bkt.clouddn.com/1.jpg)\n**鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及**\n**对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里**  \n  ***\n  ---\nFrom SHU\nQQ：352804515\nEmail：zy_lebron@163.com\n*不负勇往*。","source":"about/index.md","raw":"---\ntitle: \ndate: 2017-07-10 16:58:37\n---\n## 关于我    \n\n\n  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……\n\n  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。\n\n  \n  ![be yourself](http://osuskkx7k.bkt.clouddn.com/1.jpg)\n**鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及**\n**对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里**  \n  ***\n  ---\nFrom SHU\nQQ：352804515\nEmail：zy_lebron@163.com\n*不负勇往*。","updated":"2017-10-09T16:08:31.273Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfqzt281005a50tcq9yu8dmn","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……</p>\n<p>  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。</p>\n<p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/1.jpg\" alt=\"be yourself\"><br><strong>鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及</strong><br><strong>对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里</strong>  </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"  *\"></a>  <em>*</em></h2><p>From SHU<br>QQ：352804515<br>Email：zy_lebron@163.com<br><em>不负勇往</em>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……</p>\n<p>  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。</p>\n<p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/1.jpg\" alt=\"be yourself\"><br><strong>鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及</strong><br><strong>对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里</strong>  </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"  *\"></a>  <em>*</em></h2><p>From SHU<br>QQ：352804515<br>Email：zy_lebron@163.com<br><em>不负勇往</em>。</p>\n"},{"title":"love","date":"2017-07-10T12:15:25.000Z","password":951219,"_content":"一路上有你。\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E8%B7%9D%E7%A6%BB.jpg?imageView2/1/w/300/h/530)\n\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"http://api.map.baidu.com/api?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n<script type=\"text/javascript\">\n(function(){ window.BMap_loadScriptTime = (new Date).getTime(); document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv&services=&t=20170803155555\"><\\/script>');})();\n</script>\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","source":"love/index.md","raw":"---\ntitle: love\ndate: 2017-07-10 20:15:25\npassword: 951219\n---\n一路上有你。\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E8%B7%9D%E7%A6%BB.jpg?imageView2/1/w/300/h/530)\n\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"http://api.map.baidu.com/api?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n<script type=\"text/javascript\">\n(function(){ window.BMap_loadScriptTime = (new Date).getTime(); document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv&services=&t=20170803155555\"><\\/script>');})();\n</script>\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","updated":"2017-10-09T16:08:31.273Z","path":"love/index.html","comments":1,"layout":"page","_id":"cjfqzt281005b50tcflc114g7","content":"<p>一路上有你。<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E8%B7%9D%E7%A6%BB.jpg?imageView2/1/w/300/h/530\" alt=\"WithYou\"></p>\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"http://api.map.baidu.com/api?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n<script type=\"text/javascript\">\n(function(){ window.BMap_loadScriptTime = (new Date).getTime(); document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv&services=&t=20170803155555\"><\\/script>');})();\n</script>\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","site":{"data":{}},"excerpt":"","more":"<p>一路上有你。<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E8%B7%9D%E7%A6%BB.jpg?imageView2/1/w/300/h/530\" alt=\"WithYou\"></p>\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"http://api.map.baidu.com/api?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n<script type=\"text/javascript\">\n(function(){ window.BMap_loadScriptTime = (new Date).getTime(); document.write('<script type=\"text/javascript\" src=\"http://api.map.baidu.com/getscript?v=2.0&ak=voU9oDIBfkERO87O6RRVZgWLAt8zt4xv&services=&t=20170803155555\"><\\/script>');})();\n</script>\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n"},{"title":"","date":"2017-07-10T08:58:37.000Z","_content":"## 关于我    \n\n\n  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……\n\n  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。\n\n  \n  ![be yourself](http://osuskkx7k.bkt.clouddn.com/1.jpg)\n**鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及**\n**对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里**  \n  ***\n  ---\nFrom SHU\nQQ：352804515\nEmail：zy_lebron@163.com\n*不负勇往*。","source":"about.md","raw":"---\ntitle: \ndate: 2017-07-10 16:58:37\n---\n## 关于我    \n\n\n  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……\n\n  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。\n\n  \n  ![be yourself](http://osuskkx7k.bkt.clouddn.com/1.jpg)\n**鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及**\n**对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里**  \n  ***\n  ---\nFrom SHU\nQQ：352804515\nEmail：zy_lebron@163.com\n*不负勇往*。","updated":"2017-10-09T16:08:31.273Z","path":"about.html","comments":1,"layout":"page","_id":"cjftq9yh90000l4tctjgrg4oz","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……</p>\n<p>  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。</p>\n<p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/1.jpg\" alt=\"be yourself\"><br><strong>鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及</strong><br><strong>对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里</strong>  </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"  *\"></a>  <em>*</em></h2><p>From SHU<br>QQ：352804515<br>Email：zy_lebron@163.com<br><em>不负勇往</em>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>  &ensp;&ensp;&ensp;&ensp; 可能，可能我还算不上是一个菜鸟，但我会变成菜鸟，变成小鸟，变成雏鹰，变成……</p>\n<p>  &ensp;&ensp;&ensp;&ensp; 因为我知道，天空，才是我的归宿。</p>\n<p>  <img src=\"http://osuskkx7k.bkt.clouddn.com/1.jpg\" alt=\"be yourself\"><br><strong>鸿爪踏雪泥  &ensp;&ensp;&ensp; &ensp;还是来得及</strong><br><strong>对重遇的人说   &ensp;&ensp;&ensp;原来你也在这里</strong>  </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"  *\"></a>  <em>*</em></h2><p>From SHU<br>QQ：352804515<br>Email：zy_lebron@163.com<br><em>不负勇往</em>。</p>\n"}],"Post":[{"title":"ConcurrentHashMap在JDK1.7中的实现分析","date":"2017-11-06T09:48:18.000Z","_content":"### 一、ConcurrentHashMap的介绍\nConcurrentHashMap是线程安全且高效的HashMap，可以在多线程的环境下使用。  \n**ConcurrentHashMap允许多个线程并发访问，其关键在于使用了锁分段技术。**   \n锁分段：首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个数据段的时候，其他数据段也能被其他线程访问。\n\n### 二、ConcurrentHashMap的实现原理\n**ConcurrentHashMap的结构图**  \n\nConcurrentHashMap在JDK1.8之前的实现原理是“**数组+数组+链表**”。（可能描述不妥）\n![image](http://osuskkx7k.bkt.clouddn.com/concurrentHashmap.PNG)\n\n  \n第一个数组是Segment[ ]，每一个Segment类似于HashMap；  \n第二个数组是HashEntry[ ]，每个元素可能是一个链表；  \n链表是HashEntry形成的链表，HashEntry是一个节点。\n\n---\n\n#### HashEntry类\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n        ....\n        }\n```\nHashEntry类相当于HashMap中的Entry类（节点类），储存了key和value，并拥有指向下一个元素的引用next。  \n注：**value采用volatile修饰，保证了线程之间的可见性**。\n#### Segment类\n```\n static final class Segment<K,V> extends ReentrantLock implements Serializable {\n \n         transient volatile HashEntry<K,V>[] table;\n         transient int count;\n         transient int modCount;\n         transient int threshold;\n         final float loadFactor; \n         ....\n         }\n```\n每个Segment都拥有一个HashEntry[]数组，还有threshold和loadFactor分别表示极限容量和负载因子，count表示元素个数，modCount表示修改的记录。如此看来，**每个Segment就好比是一个缩小版的HashMap**，从上面ConcurrentHashMap结构图也可以看出来。\n\n**Segment继承自ReentrantLock重入锁，因此它支持一个线程重进入同一个Segment，访问其中的数据。**\n\n---\n下面介绍一下ConcurrentHashMap主要的几个方法的实现:put()方法、get()方法、size()方法\n#### put()方法\n\n```\npublic V put(K key, V value) {\n        Segment<K,V> s;\n        if (value == null)\n            throw new NullPointerException();\n        int hash = hash(key);\n        int j = (hash >>> segmentShift) & segmentMask;\n        if ((s = (Segment<K,V>)UNSAFE.getObject\n             (segments, (j << SSHIFT) + SBASE)) == null) \n            // 扩容 \n            s = ensureSegment(j);\n        return s.put(key, hash, value, false);\n    }\n```\n首先定位到相应的Segment。\n如果需要扩容则进入ensureSegment(j)方法，**注意ConcurrentHashMap不会对整个容器扩容，而只对当前的Segment进行扩容。**  扩容为原来的2倍。  \n如果不需要扩容，调用Segment中的put()方法：\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n            HashEntry<K,V> node = tryLock() ? null :\n                scanAndLockForPut(key, hash, value);\n            V oldValue;\n            try {\n                HashEntry<K,V>[] tab = table;\n                int index = (tab.length - 1) & hash;\n                //取出头节点\n                HashEntry<K,V> first = entryAt(tab, index);\n                //遍历链表\n                for (HashEntry<K,V> e = first;;) {\n                    if (e != null) {\n                        K k;\n                        //key已存在，替换value\n                        if ((k = e.key) == key ||\n                            (e.hash == hash && key.equals(k))) {\n                            oldValue = e.value;\n                            if (!onlyIfAbsent) {\n                                e.value = value;\n                                ++modCount;\n                            }\n                            break;\n                        }\n                        e = e.next;\n                    }\n                    else {\n                        //scanAndLockForPut()方法中已经返回了node，设置为first节点\n                        if (node != null)\n                            node.setNext(first);\n                        else\n                            //新建HashEntry节点作为头节点first\n                            node = new HashEntry<K,V>(hash, key, value, first);\n                        int c = count + 1;\n                        //判断是否扩容\n                        if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                            rehash(node);\n                        else\n                            setEntryAt(tab, index, node);\n                        ++modCount; //记录修改次数\n                        count = c;  //修改count值\n                        oldValue = null;\n                        break;\n                    }\n                }\n            } finally {\n                unlock();\n            }\n            return oldValue;\n        }\n\n```\n过程分析：  \n\n1. 首先调用tryLock()方法尝试获取锁，如果获取失败，则进入scanAndLockForPut()方法，该方法实际上是先自旋一定的次数等待其他线程释放锁。若自旋过程中，其他线程释放了锁，导致本线程直接获得了锁，就避免了本线程进入等待锁的场景，提高了效率。若自旋一定次数后，仍未获取锁，则调用lock方法进入等待锁的场景。（这是JDK1.7的实现，如果是1.6则没有自旋，直接获取锁）\n2. 获取锁成功，找到对应的链表作相应的操作。具体见代码注释。\n\n#### get()方法\nget()方法不需要锁。**因为value字段是volatile修饰，保证了线程之间的可见性，可以被多线程同时读，但只能被单线程写。一句话，get操作只需要读共享变量value，所以不用加锁。**\n\n```\npublic V get(Object key) {\n        Segment<K,V> s; // manually integrate access methods to reduce overhead\n        HashEntry<K,V>[] tab;\n        int h = hash(key); //第一次散列\n        //第二次散列\n        long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n        if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n            (tab = s.table) != null) {\n            //第三次散列（for循环中）\n            //遍历链表\n            for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                     (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n                 e != null; e = e.next) {\n                K k;\n                if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                    return e.value;\n            }\n        }\n        return null;\n    }\n\n```\n（get()方法中用到了许多UNSAFE类的方法，这是在JDK1.6中没有的，主要是利用Native方法来快速的定位元素。）  \n\nget()的过程经过了三次散列：  \n\n**第一次：对key进行散列得到h  \n第二次：对h进行散列定位到哪个Segment  \n第三次：对h进行散列定位到哪个HashEntry** \n\n定位到HashEntry之后就对该链表遍历，查找key对应的value，若没有找到则返回null。  \n\n#### size()方法\n**size()方法需要跨Segment操作，因为要统计每个Segment中的count值。而count值是volatile变量，一般来说将所有的count变量相加就可以得到整个ConcurrentHashMap的大小。** 但可能在累加前使用的count发生了变化，那么结果就不正确。那么该如何统计呢？\n1. 第一种方法，将所有Segment的put、remove、clean方法都锁住，然后统计count值。做法可行，但是低效。\n2. **第二种方法，先尝试连续2次不通过锁住Segment的方式计算各个count值的和：**\n-  若没有发生变化，则作为size的大小。\n-  若发生变化说明有线程在操作元素，则锁住Segment统计所有的count值。\n\n\n**如何判断容器大小没有发生变化？**   \n\n**modCount变量。这个变量记录了每个Segment中put、remove、clean等操作的次数，因此在连续两次统计count的值时，比较modCount是否变化，就可得知容器大小是否变化。**","source":"_posts/ConcurrentHashMap在JDK1.7中的实现分析.md","raw":"---\ntitle: ConcurrentHashMap在JDK1.7中的实现分析\ndate: 2017-11-6 17:48:18\ntags: [ConcurrentHashMap,JDK1.7]\ncategories: 技术\n---\n### 一、ConcurrentHashMap的介绍\nConcurrentHashMap是线程安全且高效的HashMap，可以在多线程的环境下使用。  \n**ConcurrentHashMap允许多个线程并发访问，其关键在于使用了锁分段技术。**   \n锁分段：首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个数据段的时候，其他数据段也能被其他线程访问。\n\n### 二、ConcurrentHashMap的实现原理\n**ConcurrentHashMap的结构图**  \n\nConcurrentHashMap在JDK1.8之前的实现原理是“**数组+数组+链表**”。（可能描述不妥）\n![image](http://osuskkx7k.bkt.clouddn.com/concurrentHashmap.PNG)\n\n  \n第一个数组是Segment[ ]，每一个Segment类似于HashMap；  \n第二个数组是HashEntry[ ]，每个元素可能是一个链表；  \n链表是HashEntry形成的链表，HashEntry是一个节点。\n\n---\n\n#### HashEntry类\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n        ....\n        }\n```\nHashEntry类相当于HashMap中的Entry类（节点类），储存了key和value，并拥有指向下一个元素的引用next。  \n注：**value采用volatile修饰，保证了线程之间的可见性**。\n#### Segment类\n```\n static final class Segment<K,V> extends ReentrantLock implements Serializable {\n \n         transient volatile HashEntry<K,V>[] table;\n         transient int count;\n         transient int modCount;\n         transient int threshold;\n         final float loadFactor; \n         ....\n         }\n```\n每个Segment都拥有一个HashEntry[]数组，还有threshold和loadFactor分别表示极限容量和负载因子，count表示元素个数，modCount表示修改的记录。如此看来，**每个Segment就好比是一个缩小版的HashMap**，从上面ConcurrentHashMap结构图也可以看出来。\n\n**Segment继承自ReentrantLock重入锁，因此它支持一个线程重进入同一个Segment，访问其中的数据。**\n\n---\n下面介绍一下ConcurrentHashMap主要的几个方法的实现:put()方法、get()方法、size()方法\n#### put()方法\n\n```\npublic V put(K key, V value) {\n        Segment<K,V> s;\n        if (value == null)\n            throw new NullPointerException();\n        int hash = hash(key);\n        int j = (hash >>> segmentShift) & segmentMask;\n        if ((s = (Segment<K,V>)UNSAFE.getObject\n             (segments, (j << SSHIFT) + SBASE)) == null) \n            // 扩容 \n            s = ensureSegment(j);\n        return s.put(key, hash, value, false);\n    }\n```\n首先定位到相应的Segment。\n如果需要扩容则进入ensureSegment(j)方法，**注意ConcurrentHashMap不会对整个容器扩容，而只对当前的Segment进行扩容。**  扩容为原来的2倍。  \n如果不需要扩容，调用Segment中的put()方法：\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n            HashEntry<K,V> node = tryLock() ? null :\n                scanAndLockForPut(key, hash, value);\n            V oldValue;\n            try {\n                HashEntry<K,V>[] tab = table;\n                int index = (tab.length - 1) & hash;\n                //取出头节点\n                HashEntry<K,V> first = entryAt(tab, index);\n                //遍历链表\n                for (HashEntry<K,V> e = first;;) {\n                    if (e != null) {\n                        K k;\n                        //key已存在，替换value\n                        if ((k = e.key) == key ||\n                            (e.hash == hash && key.equals(k))) {\n                            oldValue = e.value;\n                            if (!onlyIfAbsent) {\n                                e.value = value;\n                                ++modCount;\n                            }\n                            break;\n                        }\n                        e = e.next;\n                    }\n                    else {\n                        //scanAndLockForPut()方法中已经返回了node，设置为first节点\n                        if (node != null)\n                            node.setNext(first);\n                        else\n                            //新建HashEntry节点作为头节点first\n                            node = new HashEntry<K,V>(hash, key, value, first);\n                        int c = count + 1;\n                        //判断是否扩容\n                        if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                            rehash(node);\n                        else\n                            setEntryAt(tab, index, node);\n                        ++modCount; //记录修改次数\n                        count = c;  //修改count值\n                        oldValue = null;\n                        break;\n                    }\n                }\n            } finally {\n                unlock();\n            }\n            return oldValue;\n        }\n\n```\n过程分析：  \n\n1. 首先调用tryLock()方法尝试获取锁，如果获取失败，则进入scanAndLockForPut()方法，该方法实际上是先自旋一定的次数等待其他线程释放锁。若自旋过程中，其他线程释放了锁，导致本线程直接获得了锁，就避免了本线程进入等待锁的场景，提高了效率。若自旋一定次数后，仍未获取锁，则调用lock方法进入等待锁的场景。（这是JDK1.7的实现，如果是1.6则没有自旋，直接获取锁）\n2. 获取锁成功，找到对应的链表作相应的操作。具体见代码注释。\n\n#### get()方法\nget()方法不需要锁。**因为value字段是volatile修饰，保证了线程之间的可见性，可以被多线程同时读，但只能被单线程写。一句话，get操作只需要读共享变量value，所以不用加锁。**\n\n```\npublic V get(Object key) {\n        Segment<K,V> s; // manually integrate access methods to reduce overhead\n        HashEntry<K,V>[] tab;\n        int h = hash(key); //第一次散列\n        //第二次散列\n        long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n        if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n            (tab = s.table) != null) {\n            //第三次散列（for循环中）\n            //遍历链表\n            for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                     (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n                 e != null; e = e.next) {\n                K k;\n                if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                    return e.value;\n            }\n        }\n        return null;\n    }\n\n```\n（get()方法中用到了许多UNSAFE类的方法，这是在JDK1.6中没有的，主要是利用Native方法来快速的定位元素。）  \n\nget()的过程经过了三次散列：  \n\n**第一次：对key进行散列得到h  \n第二次：对h进行散列定位到哪个Segment  \n第三次：对h进行散列定位到哪个HashEntry** \n\n定位到HashEntry之后就对该链表遍历，查找key对应的value，若没有找到则返回null。  \n\n#### size()方法\n**size()方法需要跨Segment操作，因为要统计每个Segment中的count值。而count值是volatile变量，一般来说将所有的count变量相加就可以得到整个ConcurrentHashMap的大小。** 但可能在累加前使用的count发生了变化，那么结果就不正确。那么该如何统计呢？\n1. 第一种方法，将所有Segment的put、remove、clean方法都锁住，然后统计count值。做法可行，但是低效。\n2. **第二种方法，先尝试连续2次不通过锁住Segment的方式计算各个count值的和：**\n-  若没有发生变化，则作为size的大小。\n-  若发生变化说明有线程在操作元素，则锁住Segment统计所有的count值。\n\n\n**如何判断容器大小没有发生变化？**   \n\n**modCount变量。这个变量记录了每个Segment中put、remove、clean等操作的次数，因此在连续两次统计count的值时，比较modCount是否变化，就可得知容器大小是否变化。**","slug":"ConcurrentHashMap在JDK1.7中的实现分析","published":1,"updated":"2018-04-11T10:02:31.863Z","_id":"cjfqzt23e000050tckw7s8lee","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、ConcurrentHashMap的介绍\"><a href=\"#一、ConcurrentHashMap的介绍\" class=\"headerlink\" title=\"一、ConcurrentHashMap的介绍\"></a>一、ConcurrentHashMap的介绍</h3><p>ConcurrentHashMap是线程安全且高效的HashMap，可以在多线程的环境下使用。<br><strong>ConcurrentHashMap允许多个线程并发访问，其关键在于使用了锁分段技术。</strong><br>锁分段：首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个数据段的时候，其他数据段也能被其他线程访问。</p>\n<h3 id=\"二、ConcurrentHashMap的实现原理\"><a href=\"#二、ConcurrentHashMap的实现原理\" class=\"headerlink\" title=\"二、ConcurrentHashMap的实现原理\"></a>二、ConcurrentHashMap的实现原理</h3><p><strong>ConcurrentHashMap的结构图</strong>  </p>\n<p>ConcurrentHashMap在JDK1.8之前的实现原理是“<strong>数组+数组+链表</strong>”。（可能描述不妥）<br><img src=\"http://osuskkx7k.bkt.clouddn.com/concurrentHashmap.PNG\" alt=\"image\"></p>\n<p>第一个数组是Segment[ ]，每一个Segment类似于HashMap；<br>第二个数组是HashEntry[ ]，每个元素可能是一个链表；<br>链表是HashEntry形成的链表，HashEntry是一个节点。</p>\n<hr>\n<h4 id=\"HashEntry类\"><a href=\"#HashEntry类\" class=\"headerlink\" title=\"HashEntry类\"></a>HashEntry类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div><div class=\"line\">        ....</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>HashEntry类相当于HashMap中的Entry类（节点类），储存了key和value，并拥有指向下一个元素的引用next。<br>注：<strong>value采用volatile修饰，保证了线程之间的可见性</strong>。</p>\n<h4 id=\"Segment类\"><a href=\"#Segment类\" class=\"headerlink\" title=\"Segment类\"></a>Segment类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</div><div class=\"line\"></div><div class=\"line\">        transient volatile HashEntry&lt;K,V&gt;[] table;</div><div class=\"line\">        transient int count;</div><div class=\"line\">        transient int modCount;</div><div class=\"line\">        transient int threshold;</div><div class=\"line\">        final float loadFactor; </div><div class=\"line\">        ....</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>每个Segment都拥有一个HashEntry[]数组，还有threshold和loadFactor分别表示极限容量和负载因子，count表示元素个数，modCount表示修改的记录。如此看来，<strong>每个Segment就好比是一个缩小版的HashMap</strong>，从上面ConcurrentHashMap结构图也可以看出来。</p>\n<p><strong>Segment继承自ReentrantLock重入锁，因此它支持一个线程重进入同一个Segment，访问其中的数据。</strong></p>\n<hr>\n<p>下面介绍一下ConcurrentHashMap主要的几个方法的实现:put()方法、get()方法、size()方法</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put()方法\"></a>put()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; s;</div><div class=\"line\">        if (value == null)</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        int hash = hash(key);</div><div class=\"line\">        int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">        if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject</div><div class=\"line\">             (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">            // 扩容 </div><div class=\"line\">            s = ensureSegment(j);</div><div class=\"line\">        return s.put(key, hash, value, false);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>首先定位到相应的Segment。<br>如果需要扩容则进入ensureSegment(j)方法，<strong>注意ConcurrentHashMap不会对整个容器扩容，而只对当前的Segment进行扩容。</strong>  扩容为原来的2倍。<br>如果不需要扩容，调用Segment中的put()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">            HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">                scanAndLockForPut(key, hash, value);</div><div class=\"line\">            V oldValue;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">                int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">                //取出头节点</div><div class=\"line\">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class=\"line\">                //遍历链表</div><div class=\"line\">                for (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class=\"line\">                    if (e != null) &#123;</div><div class=\"line\">                        K k;</div><div class=\"line\">                        //key已存在，替换value</div><div class=\"line\">                        if ((k = e.key) == key ||</div><div class=\"line\">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                            oldValue = e.value;</div><div class=\"line\">                            if (!onlyIfAbsent) &#123;</div><div class=\"line\">                                e.value = value;</div><div class=\"line\">                                ++modCount;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        e = e.next;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else &#123;</div><div class=\"line\">                        //scanAndLockForPut()方法中已经返回了node，设置为first节点</div><div class=\"line\">                        if (node != null)</div><div class=\"line\">                            node.setNext(first);</div><div class=\"line\">                        else</div><div class=\"line\">                            //新建HashEntry节点作为头节点first</div><div class=\"line\">                            node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                        int c = count + 1;</div><div class=\"line\">                        //判断是否扩容</div><div class=\"line\">                        if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                            rehash(node);</div><div class=\"line\">                        else</div><div class=\"line\">                            setEntryAt(tab, index, node);</div><div class=\"line\">                        ++modCount; //记录修改次数</div><div class=\"line\">                        count = c;  //修改count值</div><div class=\"line\">                        oldValue = null;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>过程分析：  </p>\n<ol>\n<li>首先调用tryLock()方法尝试获取锁，如果获取失败，则进入scanAndLockForPut()方法，该方法实际上是先自旋一定的次数等待其他线程释放锁。若自旋过程中，其他线程释放了锁，导致本线程直接获得了锁，就避免了本线程进入等待锁的场景，提高了效率。若自旋一定次数后，仍未获取锁，则调用lock方法进入等待锁的场景。（这是JDK1.7的实现，如果是1.6则没有自旋，直接获取锁）</li>\n<li>获取锁成功，找到对应的链表作相应的操作。具体见代码注释。</li>\n</ol>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><p>get()方法不需要锁。<strong>因为value字段是volatile修饰，保证了线程之间的可见性，可以被多线程同时读，但只能被单线程写。一句话，get操作只需要读共享变量value，所以不用加锁。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">        int h = hash(key); //第一次散列</div><div class=\"line\">        //第二次散列</div><div class=\"line\">        long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">        if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;</div><div class=\"line\">            (tab = s.table) != null) &#123;</div><div class=\"line\">            //第三次散列（for循环中）</div><div class=\"line\">            //遍历链表</div><div class=\"line\">            for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                     (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">                 e != null; e = e.next) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                    return e.value;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>（get()方法中用到了许多UNSAFE类的方法，这是在JDK1.6中没有的，主要是利用Native方法来快速的定位元素。）  </p>\n<p>get()的过程经过了三次散列：  </p>\n<p><strong>第一次：对key进行散列得到h<br>第二次：对h进行散列定位到哪个Segment<br>第三次：对h进行散列定位到哪个HashEntry</strong> </p>\n<p>定位到HashEntry之后就对该链表遍历，查找key对应的value，若没有找到则返回null。  </p>\n<h4 id=\"size-方法\"><a href=\"#size-方法\" class=\"headerlink\" title=\"size()方法\"></a>size()方法</h4><p><strong>size()方法需要跨Segment操作，因为要统计每个Segment中的count值。而count值是volatile变量，一般来说将所有的count变量相加就可以得到整个ConcurrentHashMap的大小。</strong> 但可能在累加前使用的count发生了变化，那么结果就不正确。那么该如何统计呢？</p>\n<ol>\n<li>第一种方法，将所有Segment的put、remove、clean方法都锁住，然后统计count值。做法可行，但是低效。</li>\n<li><strong>第二种方法，先尝试连续2次不通过锁住Segment的方式计算各个count值的和：</strong></li>\n</ol>\n<ul>\n<li>若没有发生变化，则作为size的大小。</li>\n<li>若发生变化说明有线程在操作元素，则锁住Segment统计所有的count值。</li>\n</ul>\n<p><strong>如何判断容器大小没有发生变化？</strong>   </p>\n<p><strong>modCount变量。这个变量记录了每个Segment中put、remove、clean等操作的次数，因此在连续两次统计count的值时，比较modCount是否变化，就可得知容器大小是否变化。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、ConcurrentHashMap的介绍\"><a href=\"#一、ConcurrentHashMap的介绍\" class=\"headerlink\" title=\"一、ConcurrentHashMap的介绍\"></a>一、ConcurrentHashMap的介绍</h3><p>ConcurrentHashMap是线程安全且高效的HashMap，可以在多线程的环境下使用。<br><strong>ConcurrentHashMap允许多个线程并发访问，其关键在于使用了锁分段技术。</strong><br>锁分段：首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个数据段的时候，其他数据段也能被其他线程访问。</p>\n<h3 id=\"二、ConcurrentHashMap的实现原理\"><a href=\"#二、ConcurrentHashMap的实现原理\" class=\"headerlink\" title=\"二、ConcurrentHashMap的实现原理\"></a>二、ConcurrentHashMap的实现原理</h3><p><strong>ConcurrentHashMap的结构图</strong>  </p>\n<p>ConcurrentHashMap在JDK1.8之前的实现原理是“<strong>数组+数组+链表</strong>”。（可能描述不妥）<br><img src=\"http://osuskkx7k.bkt.clouddn.com/concurrentHashmap.PNG\" alt=\"image\"></p>\n<p>第一个数组是Segment[ ]，每一个Segment类似于HashMap；<br>第二个数组是HashEntry[ ]，每个元素可能是一个链表；<br>链表是HashEntry形成的链表，HashEntry是一个节点。</p>\n<hr>\n<h4 id=\"HashEntry类\"><a href=\"#HashEntry类\" class=\"headerlink\" title=\"HashEntry类\"></a>HashEntry类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div><div class=\"line\">        ....</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>HashEntry类相当于HashMap中的Entry类（节点类），储存了key和value，并拥有指向下一个元素的引用next。<br>注：<strong>value采用volatile修饰，保证了线程之间的可见性</strong>。</p>\n<h4 id=\"Segment类\"><a href=\"#Segment类\" class=\"headerlink\" title=\"Segment类\"></a>Segment类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</div><div class=\"line\"></div><div class=\"line\">        transient volatile HashEntry&lt;K,V&gt;[] table;</div><div class=\"line\">        transient int count;</div><div class=\"line\">        transient int modCount;</div><div class=\"line\">        transient int threshold;</div><div class=\"line\">        final float loadFactor; </div><div class=\"line\">        ....</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>每个Segment都拥有一个HashEntry[]数组，还有threshold和loadFactor分别表示极限容量和负载因子，count表示元素个数，modCount表示修改的记录。如此看来，<strong>每个Segment就好比是一个缩小版的HashMap</strong>，从上面ConcurrentHashMap结构图也可以看出来。</p>\n<p><strong>Segment继承自ReentrantLock重入锁，因此它支持一个线程重进入同一个Segment，访问其中的数据。</strong></p>\n<hr>\n<p>下面介绍一下ConcurrentHashMap主要的几个方法的实现:put()方法、get()方法、size()方法</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put()方法\"></a>put()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; s;</div><div class=\"line\">        if (value == null)</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        int hash = hash(key);</div><div class=\"line\">        int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">        if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject</div><div class=\"line\">             (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">            // 扩容 </div><div class=\"line\">            s = ensureSegment(j);</div><div class=\"line\">        return s.put(key, hash, value, false);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>首先定位到相应的Segment。<br>如果需要扩容则进入ensureSegment(j)方法，<strong>注意ConcurrentHashMap不会对整个容器扩容，而只对当前的Segment进行扩容。</strong>  扩容为原来的2倍。<br>如果不需要扩容，调用Segment中的put()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">            HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">                scanAndLockForPut(key, hash, value);</div><div class=\"line\">            V oldValue;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">                int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">                //取出头节点</div><div class=\"line\">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class=\"line\">                //遍历链表</div><div class=\"line\">                for (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class=\"line\">                    if (e != null) &#123;</div><div class=\"line\">                        K k;</div><div class=\"line\">                        //key已存在，替换value</div><div class=\"line\">                        if ((k = e.key) == key ||</div><div class=\"line\">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                            oldValue = e.value;</div><div class=\"line\">                            if (!onlyIfAbsent) &#123;</div><div class=\"line\">                                e.value = value;</div><div class=\"line\">                                ++modCount;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        e = e.next;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else &#123;</div><div class=\"line\">                        //scanAndLockForPut()方法中已经返回了node，设置为first节点</div><div class=\"line\">                        if (node != null)</div><div class=\"line\">                            node.setNext(first);</div><div class=\"line\">                        else</div><div class=\"line\">                            //新建HashEntry节点作为头节点first</div><div class=\"line\">                            node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                        int c = count + 1;</div><div class=\"line\">                        //判断是否扩容</div><div class=\"line\">                        if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                            rehash(node);</div><div class=\"line\">                        else</div><div class=\"line\">                            setEntryAt(tab, index, node);</div><div class=\"line\">                        ++modCount; //记录修改次数</div><div class=\"line\">                        count = c;  //修改count值</div><div class=\"line\">                        oldValue = null;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>过程分析：  </p>\n<ol>\n<li>首先调用tryLock()方法尝试获取锁，如果获取失败，则进入scanAndLockForPut()方法，该方法实际上是先自旋一定的次数等待其他线程释放锁。若自旋过程中，其他线程释放了锁，导致本线程直接获得了锁，就避免了本线程进入等待锁的场景，提高了效率。若自旋一定次数后，仍未获取锁，则调用lock方法进入等待锁的场景。（这是JDK1.7的实现，如果是1.6则没有自旋，直接获取锁）</li>\n<li>获取锁成功，找到对应的链表作相应的操作。具体见代码注释。</li>\n</ol>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><p>get()方法不需要锁。<strong>因为value字段是volatile修饰，保证了线程之间的可见性，可以被多线程同时读，但只能被单线程写。一句话，get操作只需要读共享变量value，所以不用加锁。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">        int h = hash(key); //第一次散列</div><div class=\"line\">        //第二次散列</div><div class=\"line\">        long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">        if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;</div><div class=\"line\">            (tab = s.table) != null) &#123;</div><div class=\"line\">            //第三次散列（for循环中）</div><div class=\"line\">            //遍历链表</div><div class=\"line\">            for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                     (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">                 e != null; e = e.next) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                    return e.value;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>（get()方法中用到了许多UNSAFE类的方法，这是在JDK1.6中没有的，主要是利用Native方法来快速的定位元素。）  </p>\n<p>get()的过程经过了三次散列：  </p>\n<p><strong>第一次：对key进行散列得到h<br>第二次：对h进行散列定位到哪个Segment<br>第三次：对h进行散列定位到哪个HashEntry</strong> </p>\n<p>定位到HashEntry之后就对该链表遍历，查找key对应的value，若没有找到则返回null。  </p>\n<h4 id=\"size-方法\"><a href=\"#size-方法\" class=\"headerlink\" title=\"size()方法\"></a>size()方法</h4><p><strong>size()方法需要跨Segment操作，因为要统计每个Segment中的count值。而count值是volatile变量，一般来说将所有的count变量相加就可以得到整个ConcurrentHashMap的大小。</strong> 但可能在累加前使用的count发生了变化，那么结果就不正确。那么该如何统计呢？</p>\n<ol>\n<li>第一种方法，将所有Segment的put、remove、clean方法都锁住，然后统计count值。做法可行，但是低效。</li>\n<li><strong>第二种方法，先尝试连续2次不通过锁住Segment的方式计算各个count值的和：</strong></li>\n</ol>\n<ul>\n<li>若没有发生变化，则作为size的大小。</li>\n<li>若发生变化说明有线程在操作元素，则锁住Segment统计所有的count值。</li>\n</ul>\n<p><strong>如何判断容器大小没有发生变化？</strong>   </p>\n<p><strong>modCount变量。这个变量记录了每个Segment中put、remove、clean等操作的次数，因此在连续两次统计count的值时，比较modCount是否变化，就可得知容器大小是否变化。</strong></p>\n"},{"title":"AQS共享锁的实现原理","date":"2017-10-19T11:48:18.000Z","_content":"### 一、AQS共享锁的实现原理\n\n前面的文章Lock的实现中分析了AQS独占锁的实现原理，那么接下来就分析下AQS是如何实现共享锁的。\n\n#### 共享锁的介绍\n**共享锁：同一时刻有多个线程能够获取到同步状态。**\n\n那么它是如何做到让多个线程获取到同步状态呢？  \n来看一下获取共享锁的过程：\n1.  线程调用AQS的acquireShared()申请获取锁（可有多个线程获取到，根据重写的tryAcquireShared()方法决定），如果成功则进入临界区。\n2.  如果失败，创建一个共享型的节点进入FIFO等待队列，阻塞然后等待唤醒。\n3.  等待队列中的线程被唤醒重新尝试获取锁，**获取成功后根据state变量值决定是否继续唤醒后续节点（如果state值为0，表示没有可用的锁，不唤醒后继节点；如果state的值>0，表示有可用的锁，唤醒后继节点）**，获取失败则继续等待，直到成功。\n\n释放共享锁的过程：\n1. 线程调用releaseShared()进行锁资源释放，如果释放成功则唤醒队列中等待的节点（如果有）。\n\n#### 共享式获取锁\n\n线程调用acquireShared()方法获取锁：\n```\npublic final void acquireShared(int arg) {\n        if (tryAcquireShared(arg) < 0)\n            doAcquireShared(arg); //获取失败进入该方法\n    }\n```\n分析如下：\n- 当tryAcquireShared(arg)返回值>=0时（可以在重写该方法时自定义锁的数量），表示获取锁成功，不会进入doAcquireShared。\n- 当tryAcquireShared(arg)返回值<0时,进入doAcquireShared(arg)方法，可以猜想这里应该是构造节点放入等待队列，看如下代码：\n\n```\nprivate void doAcquireShared(int arg) {\n        final Node node = addWaiter(Node.SHARED);  //构造等待队列，和独占锁类似\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {       //自旋\n                final Node p = node.predecessor(); //获取前驱节点\n                if (p == head) {\n                    int r = tryAcquireShared(arg); //再次尝试获取\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        if (interrupted)\n                            selfInterrupt();\n                        failed = false;\n                        return;\n                    }\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n可以看到，当前驱节点是头节点head时，线程尝试获取锁，此时注意返回值r，有以下三种可能：\n\n- r<0，表示获取锁失败，继续自旋直到r>=0；\n- r=0，表示获取锁成功，但刚好是最后一把锁，不会唤醒后继节点，在setHeadAndPropagate(node, r)方法中可以体现出来，后面会分析到；\n- r>0，表示获取锁成功，而且还有锁资源，会唤醒后继节点，同样在setHeadAndPropagate(node, r)方法中可以体现。  \n\n那么就来看一下setHeadAndPropagate(node, r)这个方法：\n\n```\nprivate void setHeadAndPropagate(Node node, int propagate) {\n        Node h = head; // 记录原来的头节点\n        setHead(node);  // 将当前节点设置为头节点\n        if (propagate > 0 || h == null || h.waitStatus < 0 ||\n        (h = head) == null || h.waitStatus < 0) {\n            Node s = node.next;\n            if (s == null || s.isShared())\n                doReleaseShared();\n        }\n    }\n```\n注意这里propagate的值就是上一个方法中的r，首先将当前节点设置为头节点，然后if中的判断表示以下两种情况需要执行唤醒操作：\n\n1.  根据r的值判断，r>0时，表示可以唤醒后继节点，执行doReleaseShared()方法；而当r=0时，不会直接执行doReleaseShared()方法，而是进入第二种情况继续判断；\n2.  头节点后面的节点需要被唤醒（waitStatus<0），不论是老的头结点还是新的头结点\n\n接下来看看doReleaseShared()这个方法：\n\n```\nprivate void doReleaseShared() {\n        for (;;) { //自旋\n            Node h = head;\n            if (h != null && h != tail) {\n                int ws = h.waitStatus;\n                if (ws == Node.SIGNAL) { //表示后继节点需要被唤醒\n                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                        continue;            // loop to recheck cases\n                    unparkSuccessor(h); //唤醒\n                }\n                else if (ws == 0 &&\n                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                    continue;    //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去\n            }\n            if (h == head)                   // loop if head changed\n                break;\n        }\n    }\n```\n这里有两个入口可以进入该方法，一个是直接释放锁releaseShared()一个是上述setHeadAndPropagate()方法，因此在释放锁的过程中需要使用CAS操作保证线程安全。\n1. 进入第一个if语句，表示后继节点需要被唤醒，采用CAS循环操作直到成功；\n2. 进入else if语句，表示暂时不需要唤醒，将状态传递；\n3. 最后判断头节点是否变化，没有变化则退出循环；如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试\n\n以上就是获取共享锁的大致过程。\n\n\n#### 共享式释放锁\n\n调用releaseShared()方法主动释放锁：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n可以看到，当重写的tryReleaseShared(arg)方法返回true,成功释放锁资源，进入doReleaseShared()唤醒等待的线程，这个方法上面已经分析过，这里不再赘述。\n\n\n\n### 二、AQS共享锁与独占锁的对比\n共享锁的实现稍比独占锁复杂，但大同小异。二者对比如下：\n- **独占锁：**  \n1. 独占锁是只有头节点获取锁，其余节点的线程继续等待，等待锁被释放后，才会唤醒下一个节点的线程；\n\n2. 同步状态state值在0和1之间切换，保证同一时间只能有一个线程是处于活动的，其他线程都被阻塞，参考ReentranLock。\n3. 独占锁是一种悲观锁。 \n- **共享锁：**  \n1. 共享锁是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒AQS队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。\n2. 同步状态state值在整数区间内（自定义实现），如果state值<0则阻塞，否则不阻塞。参考ReadWriteLock、Semphore、CountDownLautch等。\n3. 共享锁是一种乐观锁，允许多个线程同时访问共享资源。","source":"_posts/AQS共享锁的实现原理.md","raw":"---\ntitle: AQS共享锁的实现原理\ndate: 2017-10-19 19:48:18\ntags: [并发,AQS,共享锁]\ncategories: 技术\n---\n### 一、AQS共享锁的实现原理\n\n前面的文章Lock的实现中分析了AQS独占锁的实现原理，那么接下来就分析下AQS是如何实现共享锁的。\n\n#### 共享锁的介绍\n**共享锁：同一时刻有多个线程能够获取到同步状态。**\n\n那么它是如何做到让多个线程获取到同步状态呢？  \n来看一下获取共享锁的过程：\n1.  线程调用AQS的acquireShared()申请获取锁（可有多个线程获取到，根据重写的tryAcquireShared()方法决定），如果成功则进入临界区。\n2.  如果失败，创建一个共享型的节点进入FIFO等待队列，阻塞然后等待唤醒。\n3.  等待队列中的线程被唤醒重新尝试获取锁，**获取成功后根据state变量值决定是否继续唤醒后续节点（如果state值为0，表示没有可用的锁，不唤醒后继节点；如果state的值>0，表示有可用的锁，唤醒后继节点）**，获取失败则继续等待，直到成功。\n\n释放共享锁的过程：\n1. 线程调用releaseShared()进行锁资源释放，如果释放成功则唤醒队列中等待的节点（如果有）。\n\n#### 共享式获取锁\n\n线程调用acquireShared()方法获取锁：\n```\npublic final void acquireShared(int arg) {\n        if (tryAcquireShared(arg) < 0)\n            doAcquireShared(arg); //获取失败进入该方法\n    }\n```\n分析如下：\n- 当tryAcquireShared(arg)返回值>=0时（可以在重写该方法时自定义锁的数量），表示获取锁成功，不会进入doAcquireShared。\n- 当tryAcquireShared(arg)返回值<0时,进入doAcquireShared(arg)方法，可以猜想这里应该是构造节点放入等待队列，看如下代码：\n\n```\nprivate void doAcquireShared(int arg) {\n        final Node node = addWaiter(Node.SHARED);  //构造等待队列，和独占锁类似\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {       //自旋\n                final Node p = node.predecessor(); //获取前驱节点\n                if (p == head) {\n                    int r = tryAcquireShared(arg); //再次尝试获取\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        if (interrupted)\n                            selfInterrupt();\n                        failed = false;\n                        return;\n                    }\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n可以看到，当前驱节点是头节点head时，线程尝试获取锁，此时注意返回值r，有以下三种可能：\n\n- r<0，表示获取锁失败，继续自旋直到r>=0；\n- r=0，表示获取锁成功，但刚好是最后一把锁，不会唤醒后继节点，在setHeadAndPropagate(node, r)方法中可以体现出来，后面会分析到；\n- r>0，表示获取锁成功，而且还有锁资源，会唤醒后继节点，同样在setHeadAndPropagate(node, r)方法中可以体现。  \n\n那么就来看一下setHeadAndPropagate(node, r)这个方法：\n\n```\nprivate void setHeadAndPropagate(Node node, int propagate) {\n        Node h = head; // 记录原来的头节点\n        setHead(node);  // 将当前节点设置为头节点\n        if (propagate > 0 || h == null || h.waitStatus < 0 ||\n        (h = head) == null || h.waitStatus < 0) {\n            Node s = node.next;\n            if (s == null || s.isShared())\n                doReleaseShared();\n        }\n    }\n```\n注意这里propagate的值就是上一个方法中的r，首先将当前节点设置为头节点，然后if中的判断表示以下两种情况需要执行唤醒操作：\n\n1.  根据r的值判断，r>0时，表示可以唤醒后继节点，执行doReleaseShared()方法；而当r=0时，不会直接执行doReleaseShared()方法，而是进入第二种情况继续判断；\n2.  头节点后面的节点需要被唤醒（waitStatus<0），不论是老的头结点还是新的头结点\n\n接下来看看doReleaseShared()这个方法：\n\n```\nprivate void doReleaseShared() {\n        for (;;) { //自旋\n            Node h = head;\n            if (h != null && h != tail) {\n                int ws = h.waitStatus;\n                if (ws == Node.SIGNAL) { //表示后继节点需要被唤醒\n                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                        continue;            // loop to recheck cases\n                    unparkSuccessor(h); //唤醒\n                }\n                else if (ws == 0 &&\n                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                    continue;    //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去\n            }\n            if (h == head)                   // loop if head changed\n                break;\n        }\n    }\n```\n这里有两个入口可以进入该方法，一个是直接释放锁releaseShared()一个是上述setHeadAndPropagate()方法，因此在释放锁的过程中需要使用CAS操作保证线程安全。\n1. 进入第一个if语句，表示后继节点需要被唤醒，采用CAS循环操作直到成功；\n2. 进入else if语句，表示暂时不需要唤醒，将状态传递；\n3. 最后判断头节点是否变化，没有变化则退出循环；如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试\n\n以上就是获取共享锁的大致过程。\n\n\n#### 共享式释放锁\n\n调用releaseShared()方法主动释放锁：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n可以看到，当重写的tryReleaseShared(arg)方法返回true,成功释放锁资源，进入doReleaseShared()唤醒等待的线程，这个方法上面已经分析过，这里不再赘述。\n\n\n\n### 二、AQS共享锁与独占锁的对比\n共享锁的实现稍比独占锁复杂，但大同小异。二者对比如下：\n- **独占锁：**  \n1. 独占锁是只有头节点获取锁，其余节点的线程继续等待，等待锁被释放后，才会唤醒下一个节点的线程；\n\n2. 同步状态state值在0和1之间切换，保证同一时间只能有一个线程是处于活动的，其他线程都被阻塞，参考ReentranLock。\n3. 独占锁是一种悲观锁。 \n- **共享锁：**  \n1. 共享锁是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒AQS队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。\n2. 同步状态state值在整数区间内（自定义实现），如果state值<0则阻塞，否则不阻塞。参考ReadWriteLock、Semphore、CountDownLautch等。\n3. 共享锁是一种乐观锁，允许多个线程同时访问共享资源。","slug":"AQS共享锁的实现原理","published":1,"updated":"2018-04-11T10:02:31.863Z","_id":"cjfqzt23e000150tc6mkn4l4b","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、AQS共享锁的实现原理\"><a href=\"#一、AQS共享锁的实现原理\" class=\"headerlink\" title=\"一、AQS共享锁的实现原理\"></a>一、AQS共享锁的实现原理</h3><p>前面的文章Lock的实现中分析了AQS独占锁的实现原理，那么接下来就分析下AQS是如何实现共享锁的。</p>\n<h4 id=\"共享锁的介绍\"><a href=\"#共享锁的介绍\" class=\"headerlink\" title=\"共享锁的介绍\"></a>共享锁的介绍</h4><p><strong>共享锁：同一时刻有多个线程能够获取到同步状态。</strong></p>\n<p>那么它是如何做到让多个线程获取到同步状态呢？<br>来看一下获取共享锁的过程：</p>\n<ol>\n<li>线程调用AQS的acquireShared()申请获取锁（可有多个线程获取到，根据重写的tryAcquireShared()方法决定），如果成功则进入临界区。</li>\n<li>如果失败，创建一个共享型的节点进入FIFO等待队列，阻塞然后等待唤醒。</li>\n<li>等待队列中的线程被唤醒重新尝试获取锁，<strong>获取成功后根据state变量值决定是否继续唤醒后续节点（如果state值为0，表示没有可用的锁，不唤醒后继节点；如果state的值&gt;0，表示有可用的锁，唤醒后继节点）</strong>，获取失败则继续等待，直到成功。</li>\n</ol>\n<p>释放共享锁的过程：</p>\n<ol>\n<li>线程调用releaseShared()进行锁资源释放，如果释放成功则唤醒队列中等待的节点（如果有）。</li>\n</ol>\n<h4 id=\"共享式获取锁\"><a href=\"#共享式获取锁\" class=\"headerlink\" title=\"共享式获取锁\"></a>共享式获取锁</h4><p>线程调用acquireShared()方法获取锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireShared(int arg) &#123;</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireShared(arg); //获取失败进入该方法</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>分析如下：</p>\n<ul>\n<li>当tryAcquireShared(arg)返回值&gt;=0时（可以在重写该方法时自定义锁的数量），表示获取锁成功，不会进入doAcquireShared。</li>\n<li>当tryAcquireShared(arg)返回值&lt;0时,进入doAcquireShared(arg)方法，可以猜想这里应该是构造节点放入等待队列，看如下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireShared(int arg) &#123;</div><div class=\"line\">        final Node node = addWaiter(Node.SHARED);  //构造等待队列，和独占锁类似</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            boolean interrupted = false;</div><div class=\"line\">            for (;;) &#123;       //自旋</div><div class=\"line\">                final Node p = node.predecessor(); //获取前驱节点</div><div class=\"line\">                if (p == head) &#123;</div><div class=\"line\">                    int r = tryAcquireShared(arg); //再次尝试获取</div><div class=\"line\">                    if (r &gt;= 0) &#123;</div><div class=\"line\">                        setHeadAndPropagate(node, r);</div><div class=\"line\">                        p.next = null; // help GC</div><div class=\"line\">                        if (interrupted)</div><div class=\"line\">                            selfInterrupt();</div><div class=\"line\">                        failed = false;</div><div class=\"line\">                        return;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    interrupted = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，当前驱节点是头节点head时，线程尝试获取锁，此时注意返回值r，有以下三种可能：</p>\n<ul>\n<li>r<0，表示获取锁失败，继续自旋直到r>=0；</0，表示获取锁失败，继续自旋直到r></li>\n<li>r=0，表示获取锁成功，但刚好是最后一把锁，不会唤醒后继节点，在setHeadAndPropagate(node, r)方法中可以体现出来，后面会分析到；</li>\n<li>r&gt;0，表示获取锁成功，而且还有锁资源，会唤醒后继节点，同样在setHeadAndPropagate(node, r)方法中可以体现。  </li>\n</ul>\n<p>那么就来看一下setHeadAndPropagate(node, r)这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setHeadAndPropagate(Node node, int propagate) &#123;</div><div class=\"line\">        Node h = head; // 记录原来的头节点</div><div class=\"line\">        setHead(node);  // 将当前节点设置为头节点</div><div class=\"line\">        if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||</div><div class=\"line\">        (h = head) == null || h.waitStatus &lt; 0) &#123;</div><div class=\"line\">            Node s = node.next;</div><div class=\"line\">            if (s == null || s.isShared())</div><div class=\"line\">                doReleaseShared();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>注意这里propagate的值就是上一个方法中的r，首先将当前节点设置为头节点，然后if中的判断表示以下两种情况需要执行唤醒操作：</p>\n<ol>\n<li>根据r的值判断，r&gt;0时，表示可以唤醒后继节点，执行doReleaseShared()方法；而当r=0时，不会直接执行doReleaseShared()方法，而是进入第二种情况继续判断；</li>\n<li>头节点后面的节点需要被唤醒（waitStatus&lt;0），不论是老的头结点还是新的头结点</li>\n</ol>\n<p>接下来看看doReleaseShared()这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doReleaseShared() &#123;</div><div class=\"line\">        for (;;) &#123; //自旋</div><div class=\"line\">            Node h = head;</div><div class=\"line\">            if (h != null &amp;&amp; h != tail) &#123;</div><div class=\"line\">                int ws = h.waitStatus;</div><div class=\"line\">                if (ws == Node.SIGNAL) &#123; //表示后继节点需要被唤醒</div><div class=\"line\">                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</div><div class=\"line\">                        continue;            // loop to recheck cases</div><div class=\"line\">                    unparkSuccessor(h); //唤醒</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (ws == 0 &amp;&amp;</div><div class=\"line\">                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</div><div class=\"line\">                    continue;    //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (h == head)                   // loop if head changed</div><div class=\"line\">                break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里有两个入口可以进入该方法，一个是直接释放锁releaseShared()一个是上述setHeadAndPropagate()方法，因此在释放锁的过程中需要使用CAS操作保证线程安全。</p>\n<ol>\n<li>进入第一个if语句，表示后继节点需要被唤醒，采用CAS循环操作直到成功；</li>\n<li>进入else if语句，表示暂时不需要唤醒，将状态传递；</li>\n<li>最后判断头节点是否变化，没有变化则退出循环；如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试</li>\n</ol>\n<p>以上就是获取共享锁的大致过程。</p>\n<h4 id=\"共享式释放锁\"><a href=\"#共享式释放锁\" class=\"headerlink\" title=\"共享式释放锁\"></a>共享式释放锁</h4><p>调用releaseShared()方法主动释放锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，当重写的tryReleaseShared(arg)方法返回true,成功释放锁资源，进入doReleaseShared()唤醒等待的线程，这个方法上面已经分析过，这里不再赘述。</p>\n<h3 id=\"二、AQS共享锁与独占锁的对比\"><a href=\"#二、AQS共享锁与独占锁的对比\" class=\"headerlink\" title=\"二、AQS共享锁与独占锁的对比\"></a>二、AQS共享锁与独占锁的对比</h3><p>共享锁的实现稍比独占锁复杂，但大同小异。二者对比如下：</p>\n<ul>\n<li><strong>独占锁：</strong>  </li>\n</ul>\n<ol>\n<li><p>独占锁是只有头节点获取锁，其余节点的线程继续等待，等待锁被释放后，才会唤醒下一个节点的线程；</p>\n</li>\n<li><p>同步状态state值在0和1之间切换，保证同一时间只能有一个线程是处于活动的，其他线程都被阻塞，参考ReentranLock。</p>\n</li>\n<li>独占锁是一种悲观锁。 </li>\n</ol>\n<ul>\n<li><strong>共享锁：</strong>  </li>\n</ul>\n<ol>\n<li>共享锁是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒AQS队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。</li>\n<li>同步状态state值在整数区间内（自定义实现），如果state值&lt;0则阻塞，否则不阻塞。参考ReadWriteLock、Semphore、CountDownLautch等。</li>\n<li>共享锁是一种乐观锁，允许多个线程同时访问共享资源。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、AQS共享锁的实现原理\"><a href=\"#一、AQS共享锁的实现原理\" class=\"headerlink\" title=\"一、AQS共享锁的实现原理\"></a>一、AQS共享锁的实现原理</h3><p>前面的文章Lock的实现中分析了AQS独占锁的实现原理，那么接下来就分析下AQS是如何实现共享锁的。</p>\n<h4 id=\"共享锁的介绍\"><a href=\"#共享锁的介绍\" class=\"headerlink\" title=\"共享锁的介绍\"></a>共享锁的介绍</h4><p><strong>共享锁：同一时刻有多个线程能够获取到同步状态。</strong></p>\n<p>那么它是如何做到让多个线程获取到同步状态呢？<br>来看一下获取共享锁的过程：</p>\n<ol>\n<li>线程调用AQS的acquireShared()申请获取锁（可有多个线程获取到，根据重写的tryAcquireShared()方法决定），如果成功则进入临界区。</li>\n<li>如果失败，创建一个共享型的节点进入FIFO等待队列，阻塞然后等待唤醒。</li>\n<li>等待队列中的线程被唤醒重新尝试获取锁，<strong>获取成功后根据state变量值决定是否继续唤醒后续节点（如果state值为0，表示没有可用的锁，不唤醒后继节点；如果state的值&gt;0，表示有可用的锁，唤醒后继节点）</strong>，获取失败则继续等待，直到成功。</li>\n</ol>\n<p>释放共享锁的过程：</p>\n<ol>\n<li>线程调用releaseShared()进行锁资源释放，如果释放成功则唤醒队列中等待的节点（如果有）。</li>\n</ol>\n<h4 id=\"共享式获取锁\"><a href=\"#共享式获取锁\" class=\"headerlink\" title=\"共享式获取锁\"></a>共享式获取锁</h4><p>线程调用acquireShared()方法获取锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireShared(int arg) &#123;</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireShared(arg); //获取失败进入该方法</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>分析如下：</p>\n<ul>\n<li>当tryAcquireShared(arg)返回值&gt;=0时（可以在重写该方法时自定义锁的数量），表示获取锁成功，不会进入doAcquireShared。</li>\n<li>当tryAcquireShared(arg)返回值&lt;0时,进入doAcquireShared(arg)方法，可以猜想这里应该是构造节点放入等待队列，看如下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireShared(int arg) &#123;</div><div class=\"line\">        final Node node = addWaiter(Node.SHARED);  //构造等待队列，和独占锁类似</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            boolean interrupted = false;</div><div class=\"line\">            for (;;) &#123;       //自旋</div><div class=\"line\">                final Node p = node.predecessor(); //获取前驱节点</div><div class=\"line\">                if (p == head) &#123;</div><div class=\"line\">                    int r = tryAcquireShared(arg); //再次尝试获取</div><div class=\"line\">                    if (r &gt;= 0) &#123;</div><div class=\"line\">                        setHeadAndPropagate(node, r);</div><div class=\"line\">                        p.next = null; // help GC</div><div class=\"line\">                        if (interrupted)</div><div class=\"line\">                            selfInterrupt();</div><div class=\"line\">                        failed = false;</div><div class=\"line\">                        return;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    interrupted = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，当前驱节点是头节点head时，线程尝试获取锁，此时注意返回值r，有以下三种可能：</p>\n<ul>\n<li>r<0，表示获取锁失败，继续自旋直到r>=0；</0，表示获取锁失败，继续自旋直到r></li>\n<li>r=0，表示获取锁成功，但刚好是最后一把锁，不会唤醒后继节点，在setHeadAndPropagate(node, r)方法中可以体现出来，后面会分析到；</li>\n<li>r&gt;0，表示获取锁成功，而且还有锁资源，会唤醒后继节点，同样在setHeadAndPropagate(node, r)方法中可以体现。  </li>\n</ul>\n<p>那么就来看一下setHeadAndPropagate(node, r)这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setHeadAndPropagate(Node node, int propagate) &#123;</div><div class=\"line\">        Node h = head; // 记录原来的头节点</div><div class=\"line\">        setHead(node);  // 将当前节点设置为头节点</div><div class=\"line\">        if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||</div><div class=\"line\">        (h = head) == null || h.waitStatus &lt; 0) &#123;</div><div class=\"line\">            Node s = node.next;</div><div class=\"line\">            if (s == null || s.isShared())</div><div class=\"line\">                doReleaseShared();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>注意这里propagate的值就是上一个方法中的r，首先将当前节点设置为头节点，然后if中的判断表示以下两种情况需要执行唤醒操作：</p>\n<ol>\n<li>根据r的值判断，r&gt;0时，表示可以唤醒后继节点，执行doReleaseShared()方法；而当r=0时，不会直接执行doReleaseShared()方法，而是进入第二种情况继续判断；</li>\n<li>头节点后面的节点需要被唤醒（waitStatus&lt;0），不论是老的头结点还是新的头结点</li>\n</ol>\n<p>接下来看看doReleaseShared()这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doReleaseShared() &#123;</div><div class=\"line\">        for (;;) &#123; //自旋</div><div class=\"line\">            Node h = head;</div><div class=\"line\">            if (h != null &amp;&amp; h != tail) &#123;</div><div class=\"line\">                int ws = h.waitStatus;</div><div class=\"line\">                if (ws == Node.SIGNAL) &#123; //表示后继节点需要被唤醒</div><div class=\"line\">                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</div><div class=\"line\">                        continue;            // loop to recheck cases</div><div class=\"line\">                    unparkSuccessor(h); //唤醒</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (ws == 0 &amp;&amp;</div><div class=\"line\">                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</div><div class=\"line\">                    continue;    //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (h == head)                   // loop if head changed</div><div class=\"line\">                break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里有两个入口可以进入该方法，一个是直接释放锁releaseShared()一个是上述setHeadAndPropagate()方法，因此在释放锁的过程中需要使用CAS操作保证线程安全。</p>\n<ol>\n<li>进入第一个if语句，表示后继节点需要被唤醒，采用CAS循环操作直到成功；</li>\n<li>进入else if语句，表示暂时不需要唤醒，将状态传递；</li>\n<li>最后判断头节点是否变化，没有变化则退出循环；如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试</li>\n</ol>\n<p>以上就是获取共享锁的大致过程。</p>\n<h4 id=\"共享式释放锁\"><a href=\"#共享式释放锁\" class=\"headerlink\" title=\"共享式释放锁\"></a>共享式释放锁</h4><p>调用releaseShared()方法主动释放锁：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，当重写的tryReleaseShared(arg)方法返回true,成功释放锁资源，进入doReleaseShared()唤醒等待的线程，这个方法上面已经分析过，这里不再赘述。</p>\n<h3 id=\"二、AQS共享锁与独占锁的对比\"><a href=\"#二、AQS共享锁与独占锁的对比\" class=\"headerlink\" title=\"二、AQS共享锁与独占锁的对比\"></a>二、AQS共享锁与独占锁的对比</h3><p>共享锁的实现稍比独占锁复杂，但大同小异。二者对比如下：</p>\n<ul>\n<li><strong>独占锁：</strong>  </li>\n</ul>\n<ol>\n<li><p>独占锁是只有头节点获取锁，其余节点的线程继续等待，等待锁被释放后，才会唤醒下一个节点的线程；</p>\n</li>\n<li><p>同步状态state值在0和1之间切换，保证同一时间只能有一个线程是处于活动的，其他线程都被阻塞，参考ReentranLock。</p>\n</li>\n<li>独占锁是一种悲观锁。 </li>\n</ol>\n<ul>\n<li><strong>共享锁：</strong>  </li>\n</ul>\n<ol>\n<li>共享锁是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒AQS队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。</li>\n<li>同步状态state值在整数区间内（自定义实现），如果state值&lt;0则阻塞，否则不阻塞。参考ReadWriteLock、Semphore、CountDownLautch等。</li>\n<li>共享锁是一种乐观锁，允许多个线程同时访问共享资源。</li>\n</ol>\n"},{"title":"HashMap 在JDK1.7中的实现原理分析","date":"2017-10-30T10:48:18.000Z","_content":"### 一、HashMap的介绍\nHashMap是存储键值对（key，value）的一种数据结构。  \n每一个元素都是一个key-value。  \nHashMap最多只允许一个key为null，允许多个key的value值为null。  \nHashMap是非线程安全的，只适用于单线程环境。  \nHashMap实现了Serializable、Cloneable接口，因此它支持序列化和克隆。\n\n\n### 二、HashMap的实现原理\n\n\n从**底层结构、put和get方法、hash数组索引、扩容机制**等几个方面来分析HashMap的实现原理：\n#### 1.底层结构\nHashMap的底层结构是由**数组+链表**构成的。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/hash2.PNG)\n\n\n数组（紫色）：hash数组（桶），数组元素是每个链表的头节点  \n链表（绿色）：解决hash冲突，不同的key映射到了数组的同一索引处，则形成链表。\n\n**构成链表的节点类Node：** （jdk 1.7 中的源码）\n```\nstatic class Entry<K,V> implements Map.Entry<K,V> {\n        final K key;\n        V value;\n        Entry<K,V> next;\n        int hash;\n        ....\n}\n```\n可以看到，key和value都储存于节点之中，next表示下一个节点。\n\n#### 2.put、get方法\n**put()方法：**\n\n```\npublic V put(K key, V value) {  \n    // 若key为null，则将该键值对添加到table[0]中。  \n    if (key == null)  \n        return putForNullKey(value);  \n    // 若key不为null，则计算该key的hash值，然后将其添加到该哈希值对应的数组索引处的链表中。\n    int hash = hash(key.hashCode());  \n    int i = indexFor(hash, table.length);  \n    //遍历该数组索引位置处的链表\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {  \n        Object k;  \n        // 若该key对应的键值对已经存在，则用新的value替换旧的value，退出  \n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {  \n            V oldValue = e.value;  \n            e.value = value;  \n            e.recordAccess(this);  \n            return oldValue;  \n        }  \n    }  \n    modCount++;\n    // 若数组索引位置处table[i]没有链表，即没有元素\n    // 则将key-value添加到数组索引table[i]处，成为头节点\n    addEntry(hash, key, value, i);  \n    return null;  \n}\n```\nput()方法大概过程如下：\n1. **如果添加的key值为null，那么将该键值对添加到数组索引为0的链表中，不一定是链表的首节点。**\n2. **如果添加的key不为null，则根据key计算数组索引的位置**：  \n- **数组索引处存在链表**，则遍历该链表，如果发现key已经存在，那么将新的value值替换旧的value值\n- **数组索引处不存在链表**，将该key-value添加到此处，成为头节点\n\n**addEntry()方法如下：**\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {  \n    // bucketIndex是数组位置索引，保存“bucketIndex”位置的值到“e”中  \n    Entry<K,V> e = table[bucketIndex];  \n    // 设置“bucketIndex”位置的元素为“新Entry”，设置“e”为“新Entry的下一个节点”  \n    table[bucketIndex] = new Entry<K,V>(hash, key, value, e);  \n    // size超过阈值，则调整HashMap的大小  \n    if (size++ >= threshold)  \n        resize(2 * table.length);  \n}\n```\n**将新的节点（假设为节点n）添加到数组索引位置处，将原来的节点e作为n的next节点，即下一个节点。**\n\n由此可知：**每一次添加的新节点总是作为头节点。**\n\n---\n\n**get()方法：**\n\n```\npublic V get(Object key) {  \n    if (key == null)  \n        return getForNullKey();  \n    // 获取key的hash值  \n    int hash = hash(key.hashCode());  \n    // 在“该hash值对应的链表”上查找“键值等于key”的元素  \n    for (Entry<K,V> e = table[indexFor(hash, table.length)];  \n         e != null;  \n         e = e.next) {  \n        Object k;  \n        //判断key是否相同\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k)))  \n            return e.value;  \n    }\n    //没找到则返回null\n    return null;  \n}  \n \n// 获取“key为null”的元素的值  \n// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！  \nprivate V getForNullKey() {  \n    for (Entry<K,V> e = table[0]; e != null; e = e.next) {  \n        if (e.key == null)  \n            return e.value;  \n    }  \n    return null;  \n}\n```\nget()方法的大概过程：\n1. 如果key为null，那么在数组索引table[0]处的链表中遍历查找key为null的value\n2. 如果key不为null，根据key找到数组索引位置处的链表，遍历查找key的value，找到返回value，若没找到则返回null\n\n\n\n#### 3.hash数组索引位置\n\n前面多次提到了数组索引位置，那么这个位置该如何确定呢？  \n两步：\n1. 确定key的hash值\n2. 根据hash计算索引\n\n```\nstatic int hash(int h) {\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n    \nstatic int indexFor(int h, int length) {\n        return h & (length-1);\n    }\n```\n第一步：采用位操作计算hash值，这么做的**目的是为了下一步的索引值分布均匀，减少碰撞，提高效率。**  \n第二步：根据hash值计算索引的值，把hash值和数组长度-1做一个\"与\"操作，保留的值作为索引。\n\n**为什么是length-1？**  \n**这也是HashMap的数组长度要取2的整次幂的原因之一。  因为length为2的整数次幂时，（length-1）正好相当于一个“低位掩码”****。“与”操作的结果就可以保留低位作为数组索引。**  \n例如：length = 16和某个hash值进行 & 操作\n\n\n```\n某个hash           10110110 11100010 01000101\nlength-1=15    &   00000000 00000000 00001111\n           ---------------------------------\n                   00000000 00000000 00000101   //只保留末四位，索引值=5\n```\n**另一个原因**：HashMap的数组长度length为2的整次幂时，length-1为奇数（偶数-1），此时进行 & 操作时可保证最后一位可能是 0 或 1 ，保证了数组索引的均匀性；而如果length-1为偶数，那么 & 操作时最后一位只能是 0，也就是数组索引只能是偶数索引位置，这样就浪费了一半的空间，所以length为2的整次幂。  \n**综上，数组长度取2的整次幂，是为了减少hash碰撞的概率，使元素散列更加均匀。**\n#### 4.扩容机制\n\n先看一个例子，创建一个HashMap，初始容量默认为16，负载因子默认为0.75，那么什么时候它会扩容呢？\n来看以下公式：\n```\n实际容量 = 初始容量 × 负载因子\n```\n计算可知，16×0.75=12，也就是当实际容量超过12时，这个HashMap就会扩容。\n  \n**初始容量**  \n\n当构造一个hashmap时，初始容量设为不小于指定容量的2的次方的一个数（new HashMap(5)， 指定容量为5，那么实际初始容量为8，2^3=8>5），且最大值不能超过2的30次方。  \n\n**负载因子**  \n\n**负载因子是哈希数组在其容量自动增加之前可以达到多满的一种尺度。（时间与空间的折衷）** 当哈希数组中的条目数超出了加载因子与初始容量的乘积时，则要对该哈希数组进行扩容操作（即resize）。  \n**特点：**\n\n- **负载因子越小，容易扩容，浪费空间，但查找效率高**\n- **负载因子越大，不易扩容，对空间的利用更加充分，查找效率低（链表拉长）**\n\n**扩容过程**  \n\n HashMap在扩容时，**新数组的容量将是原来的2倍**，由于容量发生变化，原有的每个元素需要重新计算数组索引Index，再存放到新数组中去，这就是所谓的rehash。\n\n扩容代码：\n```\nvoid resize(int newCapacity) {  \n    Entry[] oldTable = table;  \n    int oldCapacity = oldTable.length;  \n    if (oldCapacity == MAXIMUM_CAPACITY) {  \n        threshold = Integer.MAX_VALUE;  \n        return;  \n    }  \n    // 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中\n    // 然后，将“新HashMap”赋值给“旧HashMap”。  \n    Entry[] newTable = new Entry[newCapacity];  \n    transfer(newTable);  \n    table = newTable;  \n    threshold = (int)(newCapacity * loadFactor);  \n}\n```\n调用transfer()方法\n```\nvoid transfer(Entry[] newTable) {  \n    Entry[] src = table;  \n    int newCapacity = newTable.length;  \n    for (int j = 0; j < src.length; j++) {  \n        Entry<K,V> e = src[j];  \n        if (e != null) {  \n            src[j] = null;  \n            do {  \n                Entry<K,V> next = e.next;  \n                int i = indexFor(e.hash, newCapacity);  \n                e.next = newTable[i];  \n                newTable[i] = e;  \n                e = next;  \n            } while (e != null);  \n        }  \n    }  \n}\n```\n第一步for循环遍历每一个数组元素（桶）；  \n第二步遍历每一个数组元素中的链表，将链表中的节点存入新数组指定的位置构成链表，注意此时新链表顺序反转。（原链表的头节点将变成新链表的尾节点）\n**注：原链表中的节点可能存到不同的新链表中，因为rehash重新计算了索引位置。**\n\n由此可知，**扩容操作是一个耗时耗性能的操作，因为它需要重新计算元素的位置，并进行复制操作。因此，在使用时提前预估HashMap的大小有助于提高性能。**\n\nHashMap未初始容量和初始容量的对比：\n\n```\nlong start1 = System.currentTimeMillis();\n\t\tHashMap map = new HashMap<>(); //未初始容量\n\t\tfor(int i=0;i<20000;i++){\n\t\t\tmap.put(i, \"I am zy\");\n\t\t}\n\t\tlong end1 = System.currentTimeMillis();\n\t\tSystem.out.println(\"不初始化时耗时：\"+(end1-start1)+ \"ms\");\n\t\t\n\t\tlong start2 = System.currentTimeMillis();\n\t\tHashMap map2 = new HashMap<>(32768); //初始容量\n\t\tfor(int i=0;i<20000;i++){\n\t\t\tmap2.put(i, \"I am zy\");\n\t\t}\n\t\tlong end2 = System.currentTimeMillis();\n\t\tSystem.out.println(\"初始化时耗时：\"+(end2-start2)+ \"ms\");\n```\n```\n不初始化时耗时：5ms\n初始化时耗时：1ms\n```\n可见初始化容量有助于提高性能，对于数据量大则越明显。\n\n","source":"_posts/HashMap 在JDK1.7中的实现原理分析.md","raw":"---\ntitle: HashMap 在JDK1.7中的实现原理分析\ndate: 2017-10-30 18:48:18\ntags: [HashMap,JDK1.7]\ncategories: 技术\n---\n### 一、HashMap的介绍\nHashMap是存储键值对（key，value）的一种数据结构。  \n每一个元素都是一个key-value。  \nHashMap最多只允许一个key为null，允许多个key的value值为null。  \nHashMap是非线程安全的，只适用于单线程环境。  \nHashMap实现了Serializable、Cloneable接口，因此它支持序列化和克隆。\n\n\n### 二、HashMap的实现原理\n\n\n从**底层结构、put和get方法、hash数组索引、扩容机制**等几个方面来分析HashMap的实现原理：\n#### 1.底层结构\nHashMap的底层结构是由**数组+链表**构成的。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/hash2.PNG)\n\n\n数组（紫色）：hash数组（桶），数组元素是每个链表的头节点  \n链表（绿色）：解决hash冲突，不同的key映射到了数组的同一索引处，则形成链表。\n\n**构成链表的节点类Node：** （jdk 1.7 中的源码）\n```\nstatic class Entry<K,V> implements Map.Entry<K,V> {\n        final K key;\n        V value;\n        Entry<K,V> next;\n        int hash;\n        ....\n}\n```\n可以看到，key和value都储存于节点之中，next表示下一个节点。\n\n#### 2.put、get方法\n**put()方法：**\n\n```\npublic V put(K key, V value) {  \n    // 若key为null，则将该键值对添加到table[0]中。  \n    if (key == null)  \n        return putForNullKey(value);  \n    // 若key不为null，则计算该key的hash值，然后将其添加到该哈希值对应的数组索引处的链表中。\n    int hash = hash(key.hashCode());  \n    int i = indexFor(hash, table.length);  \n    //遍历该数组索引位置处的链表\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {  \n        Object k;  \n        // 若该key对应的键值对已经存在，则用新的value替换旧的value，退出  \n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {  \n            V oldValue = e.value;  \n            e.value = value;  \n            e.recordAccess(this);  \n            return oldValue;  \n        }  \n    }  \n    modCount++;\n    // 若数组索引位置处table[i]没有链表，即没有元素\n    // 则将key-value添加到数组索引table[i]处，成为头节点\n    addEntry(hash, key, value, i);  \n    return null;  \n}\n```\nput()方法大概过程如下：\n1. **如果添加的key值为null，那么将该键值对添加到数组索引为0的链表中，不一定是链表的首节点。**\n2. **如果添加的key不为null，则根据key计算数组索引的位置**：  \n- **数组索引处存在链表**，则遍历该链表，如果发现key已经存在，那么将新的value值替换旧的value值\n- **数组索引处不存在链表**，将该key-value添加到此处，成为头节点\n\n**addEntry()方法如下：**\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {  \n    // bucketIndex是数组位置索引，保存“bucketIndex”位置的值到“e”中  \n    Entry<K,V> e = table[bucketIndex];  \n    // 设置“bucketIndex”位置的元素为“新Entry”，设置“e”为“新Entry的下一个节点”  \n    table[bucketIndex] = new Entry<K,V>(hash, key, value, e);  \n    // size超过阈值，则调整HashMap的大小  \n    if (size++ >= threshold)  \n        resize(2 * table.length);  \n}\n```\n**将新的节点（假设为节点n）添加到数组索引位置处，将原来的节点e作为n的next节点，即下一个节点。**\n\n由此可知：**每一次添加的新节点总是作为头节点。**\n\n---\n\n**get()方法：**\n\n```\npublic V get(Object key) {  \n    if (key == null)  \n        return getForNullKey();  \n    // 获取key的hash值  \n    int hash = hash(key.hashCode());  \n    // 在“该hash值对应的链表”上查找“键值等于key”的元素  \n    for (Entry<K,V> e = table[indexFor(hash, table.length)];  \n         e != null;  \n         e = e.next) {  \n        Object k;  \n        //判断key是否相同\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k)))  \n            return e.value;  \n    }\n    //没找到则返回null\n    return null;  \n}  \n \n// 获取“key为null”的元素的值  \n// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！  \nprivate V getForNullKey() {  \n    for (Entry<K,V> e = table[0]; e != null; e = e.next) {  \n        if (e.key == null)  \n            return e.value;  \n    }  \n    return null;  \n}\n```\nget()方法的大概过程：\n1. 如果key为null，那么在数组索引table[0]处的链表中遍历查找key为null的value\n2. 如果key不为null，根据key找到数组索引位置处的链表，遍历查找key的value，找到返回value，若没找到则返回null\n\n\n\n#### 3.hash数组索引位置\n\n前面多次提到了数组索引位置，那么这个位置该如何确定呢？  \n两步：\n1. 确定key的hash值\n2. 根据hash计算索引\n\n```\nstatic int hash(int h) {\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n    \nstatic int indexFor(int h, int length) {\n        return h & (length-1);\n    }\n```\n第一步：采用位操作计算hash值，这么做的**目的是为了下一步的索引值分布均匀，减少碰撞，提高效率。**  \n第二步：根据hash值计算索引的值，把hash值和数组长度-1做一个\"与\"操作，保留的值作为索引。\n\n**为什么是length-1？**  \n**这也是HashMap的数组长度要取2的整次幂的原因之一。  因为length为2的整数次幂时，（length-1）正好相当于一个“低位掩码”****。“与”操作的结果就可以保留低位作为数组索引。**  \n例如：length = 16和某个hash值进行 & 操作\n\n\n```\n某个hash           10110110 11100010 01000101\nlength-1=15    &   00000000 00000000 00001111\n           ---------------------------------\n                   00000000 00000000 00000101   //只保留末四位，索引值=5\n```\n**另一个原因**：HashMap的数组长度length为2的整次幂时，length-1为奇数（偶数-1），此时进行 & 操作时可保证最后一位可能是 0 或 1 ，保证了数组索引的均匀性；而如果length-1为偶数，那么 & 操作时最后一位只能是 0，也就是数组索引只能是偶数索引位置，这样就浪费了一半的空间，所以length为2的整次幂。  \n**综上，数组长度取2的整次幂，是为了减少hash碰撞的概率，使元素散列更加均匀。**\n#### 4.扩容机制\n\n先看一个例子，创建一个HashMap，初始容量默认为16，负载因子默认为0.75，那么什么时候它会扩容呢？\n来看以下公式：\n```\n实际容量 = 初始容量 × 负载因子\n```\n计算可知，16×0.75=12，也就是当实际容量超过12时，这个HashMap就会扩容。\n  \n**初始容量**  \n\n当构造一个hashmap时，初始容量设为不小于指定容量的2的次方的一个数（new HashMap(5)， 指定容量为5，那么实际初始容量为8，2^3=8>5），且最大值不能超过2的30次方。  \n\n**负载因子**  \n\n**负载因子是哈希数组在其容量自动增加之前可以达到多满的一种尺度。（时间与空间的折衷）** 当哈希数组中的条目数超出了加载因子与初始容量的乘积时，则要对该哈希数组进行扩容操作（即resize）。  \n**特点：**\n\n- **负载因子越小，容易扩容，浪费空间，但查找效率高**\n- **负载因子越大，不易扩容，对空间的利用更加充分，查找效率低（链表拉长）**\n\n**扩容过程**  \n\n HashMap在扩容时，**新数组的容量将是原来的2倍**，由于容量发生变化，原有的每个元素需要重新计算数组索引Index，再存放到新数组中去，这就是所谓的rehash。\n\n扩容代码：\n```\nvoid resize(int newCapacity) {  \n    Entry[] oldTable = table;  \n    int oldCapacity = oldTable.length;  \n    if (oldCapacity == MAXIMUM_CAPACITY) {  \n        threshold = Integer.MAX_VALUE;  \n        return;  \n    }  \n    // 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中\n    // 然后，将“新HashMap”赋值给“旧HashMap”。  \n    Entry[] newTable = new Entry[newCapacity];  \n    transfer(newTable);  \n    table = newTable;  \n    threshold = (int)(newCapacity * loadFactor);  \n}\n```\n调用transfer()方法\n```\nvoid transfer(Entry[] newTable) {  \n    Entry[] src = table;  \n    int newCapacity = newTable.length;  \n    for (int j = 0; j < src.length; j++) {  \n        Entry<K,V> e = src[j];  \n        if (e != null) {  \n            src[j] = null;  \n            do {  \n                Entry<K,V> next = e.next;  \n                int i = indexFor(e.hash, newCapacity);  \n                e.next = newTable[i];  \n                newTable[i] = e;  \n                e = next;  \n            } while (e != null);  \n        }  \n    }  \n}\n```\n第一步for循环遍历每一个数组元素（桶）；  \n第二步遍历每一个数组元素中的链表，将链表中的节点存入新数组指定的位置构成链表，注意此时新链表顺序反转。（原链表的头节点将变成新链表的尾节点）\n**注：原链表中的节点可能存到不同的新链表中，因为rehash重新计算了索引位置。**\n\n由此可知，**扩容操作是一个耗时耗性能的操作，因为它需要重新计算元素的位置，并进行复制操作。因此，在使用时提前预估HashMap的大小有助于提高性能。**\n\nHashMap未初始容量和初始容量的对比：\n\n```\nlong start1 = System.currentTimeMillis();\n\t\tHashMap map = new HashMap<>(); //未初始容量\n\t\tfor(int i=0;i<20000;i++){\n\t\t\tmap.put(i, \"I am zy\");\n\t\t}\n\t\tlong end1 = System.currentTimeMillis();\n\t\tSystem.out.println(\"不初始化时耗时：\"+(end1-start1)+ \"ms\");\n\t\t\n\t\tlong start2 = System.currentTimeMillis();\n\t\tHashMap map2 = new HashMap<>(32768); //初始容量\n\t\tfor(int i=0;i<20000;i++){\n\t\t\tmap2.put(i, \"I am zy\");\n\t\t}\n\t\tlong end2 = System.currentTimeMillis();\n\t\tSystem.out.println(\"初始化时耗时：\"+(end2-start2)+ \"ms\");\n```\n```\n不初始化时耗时：5ms\n初始化时耗时：1ms\n```\n可见初始化容量有助于提高性能，对于数据量大则越明显。\n\n","slug":"HashMap 在JDK1.7中的实现原理分析","published":1,"updated":"2018-04-11T10:02:31.864Z","_id":"cjfqzt23t000450tcxcz5gqvz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、HashMap的介绍\"><a href=\"#一、HashMap的介绍\" class=\"headerlink\" title=\"一、HashMap的介绍\"></a>一、HashMap的介绍</h3><p>HashMap是存储键值对（key，value）的一种数据结构。<br>每一个元素都是一个key-value。<br>HashMap最多只允许一个key为null，允许多个key的value值为null。<br>HashMap是非线程安全的，只适用于单线程环境。<br>HashMap实现了Serializable、Cloneable接口，因此它支持序列化和克隆。</p>\n<h3 id=\"二、HashMap的实现原理\"><a href=\"#二、HashMap的实现原理\" class=\"headerlink\" title=\"二、HashMap的实现原理\"></a>二、HashMap的实现原理</h3><p>从<strong>底层结构、put和get方法、hash数组索引、扩容机制</strong>等几个方面来分析HashMap的实现原理：</p>\n<h4 id=\"1-底层结构\"><a href=\"#1-底层结构\" class=\"headerlink\" title=\"1.底层结构\"></a>1.底层结构</h4><p>HashMap的底层结构是由<strong>数组+链表</strong>构成的。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/hash2.PNG\" alt=\"image\"></p>\n<p>数组（紫色）：hash数组（桶），数组元素是每个链表的头节点<br>链表（绿色）：解决hash冲突，不同的key映射到了数组的同一索引处，则形成链表。</p>\n<p><strong>构成链表的节点类Node：</strong> （jdk 1.7 中的源码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class=\"line\">        final K key;</div><div class=\"line\">        V value;</div><div class=\"line\">        Entry&lt;K,V&gt; next;</div><div class=\"line\">        int hash;</div><div class=\"line\">        ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，key和value都储存于节点之中，next表示下一个节点。</p>\n<h4 id=\"2-put、get方法\"><a href=\"#2-put、get方法\" class=\"headerlink\" title=\"2.put、get方法\"></a>2.put、get方法</h4><p><strong>put()方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;  </div><div class=\"line\">    // 若key为null，则将该键值对添加到table[0]中。  </div><div class=\"line\">    if (key == null)  </div><div class=\"line\">        return putForNullKey(value);  </div><div class=\"line\">    // 若key不为null，则计算该key的hash值，然后将其添加到该哈希值对应的数组索引处的链表中。</div><div class=\"line\">    int hash = hash(key.hashCode());  </div><div class=\"line\">    int i = indexFor(hash, table.length);  </div><div class=\"line\">    //遍历该数组索引位置处的链表</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </div><div class=\"line\">        Object k;  </div><div class=\"line\">        // 若该key对应的键值对已经存在，则用新的value替换旧的value，退出  </div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </div><div class=\"line\">            V oldValue = e.value;  </div><div class=\"line\">            e.value = value;  </div><div class=\"line\">            e.recordAccess(this);  </div><div class=\"line\">            return oldValue;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    modCount++;</div><div class=\"line\">    // 若数组索引位置处table[i]没有链表，即没有元素</div><div class=\"line\">    // 则将key-value添加到数组索引table[i]处，成为头节点</div><div class=\"line\">    addEntry(hash, key, value, i);  </div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>put()方法大概过程如下：</p>\n<ol>\n<li><strong>如果添加的key值为null，那么将该键值对添加到数组索引为0的链表中，不一定是链表的首节点。</strong></li>\n<li><strong>如果添加的key不为null，则根据key计算数组索引的位置</strong>：  </li>\n</ol>\n<ul>\n<li><strong>数组索引处存在链表</strong>，则遍历该链表，如果发现key已经存在，那么将新的value值替换旧的value值</li>\n<li><strong>数组索引处不存在链表</strong>，将该key-value添加到此处，成为头节点</li>\n</ul>\n<p><strong>addEntry()方法如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;  </div><div class=\"line\">    // bucketIndex是数组位置索引，保存“bucketIndex”位置的值到“e”中  </div><div class=\"line\">    Entry&lt;K,V&gt; e = table[bucketIndex];  </div><div class=\"line\">    // 设置“bucketIndex”位置的元素为“新Entry”，设置“e”为“新Entry的下一个节点”  </div><div class=\"line\">    table[bucketIndex] = new Entry&lt;K,V&gt;(hash, key, value, e);  </div><div class=\"line\">    // size超过阈值，则调整HashMap的大小  </div><div class=\"line\">    if (size++ &gt;= threshold)  </div><div class=\"line\">        resize(2 * table.length);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>将新的节点（假设为节点n）添加到数组索引位置处，将原来的节点e作为n的next节点，即下一个节点。</strong></p>\n<p>由此可知：<strong>每一次添加的新节点总是作为头节点。</strong></p>\n<hr>\n<p><strong>get()方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;  </div><div class=\"line\">    if (key == null)  </div><div class=\"line\">        return getForNullKey();  </div><div class=\"line\">    // 获取key的hash值  </div><div class=\"line\">    int hash = hash(key.hashCode());  </div><div class=\"line\">    // 在“该hash值对应的链表”上查找“键值等于key”的元素  </div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];  </div><div class=\"line\">         e != null;  </div><div class=\"line\">         e = e.next) &#123;  </div><div class=\"line\">        Object k;  </div><div class=\"line\">        //判断key是否相同</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))  </div><div class=\"line\">            return e.value;  </div><div class=\"line\">    &#125;</div><div class=\"line\">    //没找到则返回null</div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">// 获取“key为null”的元素的值  </div><div class=\"line\">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！  </div><div class=\"line\">private V getForNullKey() &#123;  </div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123;  </div><div class=\"line\">        if (e.key == null)  </div><div class=\"line\">            return e.value;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get()方法的大概过程：</p>\n<ol>\n<li>如果key为null，那么在数组索引table[0]处的链表中遍历查找key为null的value</li>\n<li>如果key不为null，根据key找到数组索引位置处的链表，遍历查找key的value，找到返回value，若没找到则返回null</li>\n</ol>\n<h4 id=\"3-hash数组索引位置\"><a href=\"#3-hash数组索引位置\" class=\"headerlink\" title=\"3.hash数组索引位置\"></a>3.hash数组索引位置</h4><p>前面多次提到了数组索引位置，那么这个位置该如何确定呢？<br>两步：</p>\n<ol>\n<li>确定key的hash值</li>\n<li>根据hash计算索引</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">static int hash(int h) &#123;</div><div class=\"line\">        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</div><div class=\"line\">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">static int indexFor(int h, int length) &#123;</div><div class=\"line\">        return h &amp; (length-1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第一步：采用位操作计算hash值，这么做的<strong>目的是为了下一步的索引值分布均匀，减少碰撞，提高效率。</strong><br>第二步：根据hash值计算索引的值，把hash值和数组长度-1做一个”与”操作，保留的值作为索引。</p>\n<p><strong>为什么是length-1？</strong><br><strong>这也是HashMap的数组长度要取2的整次幂的原因之一。  因为length为2的整数次幂时，（length-1）正好相当于一个“低位掩码”**</strong>。“与”操作的结果就可以保留低位作为数组索引。**<br>例如：length = 16和某个hash值进行 &amp; 操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">某个hash           10110110 11100010 01000101</div><div class=\"line\">length-1=15    &amp;   00000000 00000000 00001111</div><div class=\"line\">           ---------------------------------</div><div class=\"line\">                   00000000 00000000 00000101   //只保留末四位，索引值=5</div></pre></td></tr></table></figure>\n<p><strong>另一个原因</strong>：HashMap的数组长度length为2的整次幂时，length-1为奇数（偶数-1），此时进行 &amp; 操作时可保证最后一位可能是 0 或 1 ，保证了数组索引的均匀性；而如果length-1为偶数，那么 &amp; 操作时最后一位只能是 0，也就是数组索引只能是偶数索引位置，这样就浪费了一半的空间，所以length为2的整次幂。<br><strong>综上，数组长度取2的整次幂，是为了减少hash碰撞的概率，使元素散列更加均匀。</strong></p>\n<h4 id=\"4-扩容机制\"><a href=\"#4-扩容机制\" class=\"headerlink\" title=\"4.扩容机制\"></a>4.扩容机制</h4><p>先看一个例子，创建一个HashMap，初始容量默认为16，负载因子默认为0.75，那么什么时候它会扩容呢？<br>来看以下公式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实际容量 = 初始容量 × 负载因子</div></pre></td></tr></table></figure></p>\n<p>计算可知，16×0.75=12，也就是当实际容量超过12时，这个HashMap就会扩容。</p>\n<p><strong>初始容量</strong>  </p>\n<p>当构造一个hashmap时，初始容量设为不小于指定容量的2的次方的一个数（new HashMap(5)， 指定容量为5，那么实际初始容量为8，2^3=8&gt;5），且最大值不能超过2的30次方。  </p>\n<p><strong>负载因子</strong>  </p>\n<p><strong>负载因子是哈希数组在其容量自动增加之前可以达到多满的一种尺度。（时间与空间的折衷）</strong> 当哈希数组中的条目数超出了加载因子与初始容量的乘积时，则要对该哈希数组进行扩容操作（即resize）。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>负载因子越小，容易扩容，浪费空间，但查找效率高</strong></li>\n<li><strong>负载因子越大，不易扩容，对空间的利用更加充分，查找效率低（链表拉长）</strong></li>\n</ul>\n<p><strong>扩容过程</strong>  </p>\n<p> HashMap在扩容时，<strong>新数组的容量将是原来的2倍</strong>，由于容量发生变化，原有的每个元素需要重新计算数组索引Index，再存放到新数组中去，这就是所谓的rehash。</p>\n<p>扩容代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void resize(int newCapacity) &#123;  </div><div class=\"line\">    Entry[] oldTable = table;  </div><div class=\"line\">    int oldCapacity = oldTable.length;  </div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;  </div><div class=\"line\">        threshold = Integer.MAX_VALUE;  </div><div class=\"line\">        return;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    // 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中</div><div class=\"line\">    // 然后，将“新HashMap”赋值给“旧HashMap”。  </div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];  </div><div class=\"line\">    transfer(newTable);  </div><div class=\"line\">    table = newTable;  </div><div class=\"line\">    threshold = (int)(newCapacity * loadFactor);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用transfer()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable) &#123;  </div><div class=\"line\">    Entry[] src = table;  </div><div class=\"line\">    int newCapacity = newTable.length;  </div><div class=\"line\">    for (int j = 0; j &lt; src.length; j++) &#123;  </div><div class=\"line\">        Entry&lt;K,V&gt; e = src[j];  </div><div class=\"line\">        if (e != null) &#123;  </div><div class=\"line\">            src[j] = null;  </div><div class=\"line\">            do &#123;  </div><div class=\"line\">                Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">                int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">                e.next = newTable[i];  </div><div class=\"line\">                newTable[i] = e;  </div><div class=\"line\">                e = next;  </div><div class=\"line\">            &#125; while (e != null);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第一步for循环遍历每一个数组元素（桶）；<br>第二步遍历每一个数组元素中的链表，将链表中的节点存入新数组指定的位置构成链表，注意此时新链表顺序反转。（原链表的头节点将变成新链表的尾节点）<br><strong>注：原链表中的节点可能存到不同的新链表中，因为rehash重新计算了索引位置。</strong></p>\n<p>由此可知，<strong>扩容操作是一个耗时耗性能的操作，因为它需要重新计算元素的位置，并进行复制操作。因此，在使用时提前预估HashMap的大小有助于提高性能。</strong></p>\n<p>HashMap未初始容量和初始容量的对比：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">long start1 = System.currentTimeMillis();</div><div class=\"line\">\t\tHashMap map = new HashMap&lt;&gt;(); //未初始容量</div><div class=\"line\">\t\tfor(int i=0;i&lt;20000;i++)&#123;</div><div class=\"line\">\t\t\tmap.put(i, &quot;I am zy&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlong end1 = System.currentTimeMillis();</div><div class=\"line\">\t\tSystem.out.println(&quot;不初始化时耗时：&quot;+(end1-start1)+ &quot;ms&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlong start2 = System.currentTimeMillis();</div><div class=\"line\">\t\tHashMap map2 = new HashMap&lt;&gt;(32768); //初始容量</div><div class=\"line\">\t\tfor(int i=0;i&lt;20000;i++)&#123;</div><div class=\"line\">\t\t\tmap2.put(i, &quot;I am zy&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlong end2 = System.currentTimeMillis();</div><div class=\"line\">\t\tSystem.out.println(&quot;初始化时耗时：&quot;+(end2-start2)+ &quot;ms&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">不初始化时耗时：5ms</div><div class=\"line\">初始化时耗时：1ms</div></pre></td></tr></table></figure>\n<p>可见初始化容量有助于提高性能，对于数据量大则越明显。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、HashMap的介绍\"><a href=\"#一、HashMap的介绍\" class=\"headerlink\" title=\"一、HashMap的介绍\"></a>一、HashMap的介绍</h3><p>HashMap是存储键值对（key，value）的一种数据结构。<br>每一个元素都是一个key-value。<br>HashMap最多只允许一个key为null，允许多个key的value值为null。<br>HashMap是非线程安全的，只适用于单线程环境。<br>HashMap实现了Serializable、Cloneable接口，因此它支持序列化和克隆。</p>\n<h3 id=\"二、HashMap的实现原理\"><a href=\"#二、HashMap的实现原理\" class=\"headerlink\" title=\"二、HashMap的实现原理\"></a>二、HashMap的实现原理</h3><p>从<strong>底层结构、put和get方法、hash数组索引、扩容机制</strong>等几个方面来分析HashMap的实现原理：</p>\n<h4 id=\"1-底层结构\"><a href=\"#1-底层结构\" class=\"headerlink\" title=\"1.底层结构\"></a>1.底层结构</h4><p>HashMap的底层结构是由<strong>数组+链表</strong>构成的。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/hash2.PNG\" alt=\"image\"></p>\n<p>数组（紫色）：hash数组（桶），数组元素是每个链表的头节点<br>链表（绿色）：解决hash冲突，不同的key映射到了数组的同一索引处，则形成链表。</p>\n<p><strong>构成链表的节点类Node：</strong> （jdk 1.7 中的源码）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class=\"line\">        final K key;</div><div class=\"line\">        V value;</div><div class=\"line\">        Entry&lt;K,V&gt; next;</div><div class=\"line\">        int hash;</div><div class=\"line\">        ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，key和value都储存于节点之中，next表示下一个节点。</p>\n<h4 id=\"2-put、get方法\"><a href=\"#2-put、get方法\" class=\"headerlink\" title=\"2.put、get方法\"></a>2.put、get方法</h4><p><strong>put()方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;  </div><div class=\"line\">    // 若key为null，则将该键值对添加到table[0]中。  </div><div class=\"line\">    if (key == null)  </div><div class=\"line\">        return putForNullKey(value);  </div><div class=\"line\">    // 若key不为null，则计算该key的hash值，然后将其添加到该哈希值对应的数组索引处的链表中。</div><div class=\"line\">    int hash = hash(key.hashCode());  </div><div class=\"line\">    int i = indexFor(hash, table.length);  </div><div class=\"line\">    //遍历该数组索引位置处的链表</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;  </div><div class=\"line\">        Object k;  </div><div class=\"line\">        // 若该key对应的键值对已经存在，则用新的value替换旧的value，退出  </div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </div><div class=\"line\">            V oldValue = e.value;  </div><div class=\"line\">            e.value = value;  </div><div class=\"line\">            e.recordAccess(this);  </div><div class=\"line\">            return oldValue;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    modCount++;</div><div class=\"line\">    // 若数组索引位置处table[i]没有链表，即没有元素</div><div class=\"line\">    // 则将key-value添加到数组索引table[i]处，成为头节点</div><div class=\"line\">    addEntry(hash, key, value, i);  </div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>put()方法大概过程如下：</p>\n<ol>\n<li><strong>如果添加的key值为null，那么将该键值对添加到数组索引为0的链表中，不一定是链表的首节点。</strong></li>\n<li><strong>如果添加的key不为null，则根据key计算数组索引的位置</strong>：  </li>\n</ol>\n<ul>\n<li><strong>数组索引处存在链表</strong>，则遍历该链表，如果发现key已经存在，那么将新的value值替换旧的value值</li>\n<li><strong>数组索引处不存在链表</strong>，将该key-value添加到此处，成为头节点</li>\n</ul>\n<p><strong>addEntry()方法如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;  </div><div class=\"line\">    // bucketIndex是数组位置索引，保存“bucketIndex”位置的值到“e”中  </div><div class=\"line\">    Entry&lt;K,V&gt; e = table[bucketIndex];  </div><div class=\"line\">    // 设置“bucketIndex”位置的元素为“新Entry”，设置“e”为“新Entry的下一个节点”  </div><div class=\"line\">    table[bucketIndex] = new Entry&lt;K,V&gt;(hash, key, value, e);  </div><div class=\"line\">    // size超过阈值，则调整HashMap的大小  </div><div class=\"line\">    if (size++ &gt;= threshold)  </div><div class=\"line\">        resize(2 * table.length);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>将新的节点（假设为节点n）添加到数组索引位置处，将原来的节点e作为n的next节点，即下一个节点。</strong></p>\n<p>由此可知：<strong>每一次添加的新节点总是作为头节点。</strong></p>\n<hr>\n<p><strong>get()方法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;  </div><div class=\"line\">    if (key == null)  </div><div class=\"line\">        return getForNullKey();  </div><div class=\"line\">    // 获取key的hash值  </div><div class=\"line\">    int hash = hash(key.hashCode());  </div><div class=\"line\">    // 在“该hash值对应的链表”上查找“键值等于key”的元素  </div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];  </div><div class=\"line\">         e != null;  </div><div class=\"line\">         e = e.next) &#123;  </div><div class=\"line\">        Object k;  </div><div class=\"line\">        //判断key是否相同</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))  </div><div class=\"line\">            return e.value;  </div><div class=\"line\">    &#125;</div><div class=\"line\">    //没找到则返回null</div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;  </div><div class=\"line\"> </div><div class=\"line\">// 获取“key为null”的元素的值  </div><div class=\"line\">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！  </div><div class=\"line\">private V getForNullKey() &#123;  </div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123;  </div><div class=\"line\">        if (e.key == null)  </div><div class=\"line\">            return e.value;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return null;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get()方法的大概过程：</p>\n<ol>\n<li>如果key为null，那么在数组索引table[0]处的链表中遍历查找key为null的value</li>\n<li>如果key不为null，根据key找到数组索引位置处的链表，遍历查找key的value，找到返回value，若没找到则返回null</li>\n</ol>\n<h4 id=\"3-hash数组索引位置\"><a href=\"#3-hash数组索引位置\" class=\"headerlink\" title=\"3.hash数组索引位置\"></a>3.hash数组索引位置</h4><p>前面多次提到了数组索引位置，那么这个位置该如何确定呢？<br>两步：</p>\n<ol>\n<li>确定key的hash值</li>\n<li>根据hash计算索引</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">static int hash(int h) &#123;</div><div class=\"line\">        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</div><div class=\"line\">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">static int indexFor(int h, int length) &#123;</div><div class=\"line\">        return h &amp; (length-1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第一步：采用位操作计算hash值，这么做的<strong>目的是为了下一步的索引值分布均匀，减少碰撞，提高效率。</strong><br>第二步：根据hash值计算索引的值，把hash值和数组长度-1做一个”与”操作，保留的值作为索引。</p>\n<p><strong>为什么是length-1？</strong><br><strong>这也是HashMap的数组长度要取2的整次幂的原因之一。  因为length为2的整数次幂时，（length-1）正好相当于一个“低位掩码”**</strong>。“与”操作的结果就可以保留低位作为数组索引。**<br>例如：length = 16和某个hash值进行 &amp; 操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">某个hash           10110110 11100010 01000101</div><div class=\"line\">length-1=15    &amp;   00000000 00000000 00001111</div><div class=\"line\">           ---------------------------------</div><div class=\"line\">                   00000000 00000000 00000101   //只保留末四位，索引值=5</div></pre></td></tr></table></figure>\n<p><strong>另一个原因</strong>：HashMap的数组长度length为2的整次幂时，length-1为奇数（偶数-1），此时进行 &amp; 操作时可保证最后一位可能是 0 或 1 ，保证了数组索引的均匀性；而如果length-1为偶数，那么 &amp; 操作时最后一位只能是 0，也就是数组索引只能是偶数索引位置，这样就浪费了一半的空间，所以length为2的整次幂。<br><strong>综上，数组长度取2的整次幂，是为了减少hash碰撞的概率，使元素散列更加均匀。</strong></p>\n<h4 id=\"4-扩容机制\"><a href=\"#4-扩容机制\" class=\"headerlink\" title=\"4.扩容机制\"></a>4.扩容机制</h4><p>先看一个例子，创建一个HashMap，初始容量默认为16，负载因子默认为0.75，那么什么时候它会扩容呢？<br>来看以下公式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">实际容量 = 初始容量 × 负载因子</div></pre></td></tr></table></figure></p>\n<p>计算可知，16×0.75=12，也就是当实际容量超过12时，这个HashMap就会扩容。</p>\n<p><strong>初始容量</strong>  </p>\n<p>当构造一个hashmap时，初始容量设为不小于指定容量的2的次方的一个数（new HashMap(5)， 指定容量为5，那么实际初始容量为8，2^3=8&gt;5），且最大值不能超过2的30次方。  </p>\n<p><strong>负载因子</strong>  </p>\n<p><strong>负载因子是哈希数组在其容量自动增加之前可以达到多满的一种尺度。（时间与空间的折衷）</strong> 当哈希数组中的条目数超出了加载因子与初始容量的乘积时，则要对该哈希数组进行扩容操作（即resize）。<br><strong>特点：</strong></p>\n<ul>\n<li><strong>负载因子越小，容易扩容，浪费空间，但查找效率高</strong></li>\n<li><strong>负载因子越大，不易扩容，对空间的利用更加充分，查找效率低（链表拉长）</strong></li>\n</ul>\n<p><strong>扩容过程</strong>  </p>\n<p> HashMap在扩容时，<strong>新数组的容量将是原来的2倍</strong>，由于容量发生变化，原有的每个元素需要重新计算数组索引Index，再存放到新数组中去，这就是所谓的rehash。</p>\n<p>扩容代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void resize(int newCapacity) &#123;  </div><div class=\"line\">    Entry[] oldTable = table;  </div><div class=\"line\">    int oldCapacity = oldTable.length;  </div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;  </div><div class=\"line\">        threshold = Integer.MAX_VALUE;  </div><div class=\"line\">        return;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    // 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中</div><div class=\"line\">    // 然后，将“新HashMap”赋值给“旧HashMap”。  </div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];  </div><div class=\"line\">    transfer(newTable);  </div><div class=\"line\">    table = newTable;  </div><div class=\"line\">    threshold = (int)(newCapacity * loadFactor);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用transfer()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable) &#123;  </div><div class=\"line\">    Entry[] src = table;  </div><div class=\"line\">    int newCapacity = newTable.length;  </div><div class=\"line\">    for (int j = 0; j &lt; src.length; j++) &#123;  </div><div class=\"line\">        Entry&lt;K,V&gt; e = src[j];  </div><div class=\"line\">        if (e != null) &#123;  </div><div class=\"line\">            src[j] = null;  </div><div class=\"line\">            do &#123;  </div><div class=\"line\">                Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">                int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">                e.next = newTable[i];  </div><div class=\"line\">                newTable[i] = e;  </div><div class=\"line\">                e = next;  </div><div class=\"line\">            &#125; while (e != null);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第一步for循环遍历每一个数组元素（桶）；<br>第二步遍历每一个数组元素中的链表，将链表中的节点存入新数组指定的位置构成链表，注意此时新链表顺序反转。（原链表的头节点将变成新链表的尾节点）<br><strong>注：原链表中的节点可能存到不同的新链表中，因为rehash重新计算了索引位置。</strong></p>\n<p>由此可知，<strong>扩容操作是一个耗时耗性能的操作，因为它需要重新计算元素的位置，并进行复制操作。因此，在使用时提前预估HashMap的大小有助于提高性能。</strong></p>\n<p>HashMap未初始容量和初始容量的对比：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">long start1 = System.currentTimeMillis();</div><div class=\"line\">\t\tHashMap map = new HashMap&lt;&gt;(); //未初始容量</div><div class=\"line\">\t\tfor(int i=0;i&lt;20000;i++)&#123;</div><div class=\"line\">\t\t\tmap.put(i, &quot;I am zy&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlong end1 = System.currentTimeMillis();</div><div class=\"line\">\t\tSystem.out.println(&quot;不初始化时耗时：&quot;+(end1-start1)+ &quot;ms&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlong start2 = System.currentTimeMillis();</div><div class=\"line\">\t\tHashMap map2 = new HashMap&lt;&gt;(32768); //初始容量</div><div class=\"line\">\t\tfor(int i=0;i&lt;20000;i++)&#123;</div><div class=\"line\">\t\t\tmap2.put(i, &quot;I am zy&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tlong end2 = System.currentTimeMillis();</div><div class=\"line\">\t\tSystem.out.println(&quot;初始化时耗时：&quot;+(end2-start2)+ &quot;ms&quot;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">不初始化时耗时：5ms</div><div class=\"line\">初始化时耗时：1ms</div></pre></td></tr></table></figure>\n<p>可见初始化容量有助于提高性能，对于数据量大则越明显。</p>\n"},{"title":"ConcurrentHashMap在JDK1.8中的实现分析","date":"2017-11-10T08:42:18.000Z","_content":"### 一、ConcurrentHashMap的介绍\n**ConcurrentHashMap在JDK8中进行了巨大改动，它舍弃了锁分段的技术，大量引入了CAS操作，以此来实现并发操作。**   \n\n回忆JDK1.7中的ConcurrentHashmap，当hash碰撞频繁时，链表长度会拉长，而链表的增改删查操作都会消耗很长的时间，影响性能，因此和JDK1.8中的HashMap一样，当链表过长时，将其结构转化为红黑树，由此提高性能。\n### 二、ConcurrentHashMap的实现原理\n\n**ConcurrentHashMap的结构图**\n\nConcurrentHashMap在JDK1.8的实现原理是“**数组+链表+红黑树**”。（与HashMap在1.8中的实现思想一致，但是**红黑树的节点不同**，HashMap是Node节点，ConcurrentHashMap是TreeBin对象）\n\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG)\n\n\n---\n\n下面介绍一下ConcurrentHashMap主要方法put()和get()的实现。\n#### put()方法\n\n\n```\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n---第一部分\n        if (key == null || value == null) throw new NullPointerException();\n        //计算hash值\n        int hash = spread(key.hashCode());\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            //如果tab为null，则初始化\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            //判断数组索引位置的元素是否为null\n            else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n                //CAS操作设置该数组索引位置为新节点Node\n                if (casTabAt(tab, i, null,\n                             new Node<K,V>(hash, key, value, null)))\n                    break;                   // no lock when adding to empty bin\n            }\n            //f节点是MOVED节点，表示有其他线程在扩容，帮助一起扩容\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n                \n---第二部分-----\n            else {\n                V oldVal = null;\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        //表示是链表，还未转化成红黑树\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f;; ++binCount) {\n                                K ek;\n                                //如果key已存在，则替换value\n                                if (e.hash == hash &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    oldVal = e.val;\n                                    if (!onlyIfAbsent)\n                                        e.val = value;\n                                    break;\n                                }\n                                Node<K,V> pred = e;\n                                //将新的节点插入尾部\n                                if ((e = e.next) == null) {\n                                    pred.next = new Node<K,V>(hash, key,\n                                                              value, null);\n                                    break;\n                                }\n                            }\n                        }\n                        //节点f是TreeBin对象，表示链表转为了红黑树\n                        else if (f instanceof TreeBin) {\n                            Node<K,V> p;\n                            binCount = 2;\n                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                           value)) != null) {\n                                oldVal = p.val;\n                                if (!onlyIfAbsent)\n                                    p.val = value;\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    //如果大于8，转化为红黑树\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    if (oldVal != null)\n                        return oldVal;\n                    break;\n                }\n            }\n        }\n        addCount(1L, binCount);\n        return null;\n    }\n```\n由于整个put()方法较长，分成两部分来分析。  \n**第一部分：**\n1. 遍历数组tab，如果为null，初始化数组；\n2. **调用tabAt()方法查找数组索引i处的节点f，如果f为null，说明该位置还没有节点，调用casTabAt()利用CAS操作插入新的节点**\n- **CAS成功**：break跳出，直到最后的addCount(1L, binCount)方法，判断插入这一个节点后是否需要扩容; \n- **CAS失败**：说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点；  \ntabAt()和casTabAt()方法源码如下：\n```\n private static final sun.misc.Unsafe U;\n \nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n    }\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n    }\n```\n可以看到，都是**调用Unsafe类的方法（原子性），Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。**\n3. **若前面的情况都不满足，判断f节点是否为MOVED节点，是则表示有其他线程在扩容，帮助一起扩容**；否则进入第二部分。  \n\n**第二部分：**  \n\n第二部分表示把新的节点Node插入链表或红黑树，可以看到使用了synchronized关键字实现同步。**但是注意，只在节点f上进行同步，表示只能有一个线程访问该节点。** 节点插入之前，再次利用 tabAt(tab, i) == f 判断头节点是否还是f，防止被其它线程修改。\n1. 如果f.hash >= 0，说明f是链表结构的头结点，遍历链表，如果key已存在，则修改value，否则在链表尾部插入节点。\n2. 如果f是TreeBin类型节点，说明链表变成红黑树，则在树结构上遍历元素，更新或增加节点。\n3. 最后判断链表中的节点数binCount >= 8，则转化为红黑树。\n\n---\n\n#### get()方法\n\n```\npublic V get(Object key) {\n        Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;\n        //获取key的hash值\n        int h = spread(key.hashCode());\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (e = tabAt(tab, (n - 1) & h)) != null) {\n            if ((eh = e.hash) == h) {\n                if ((ek = e.key) == key || (ek != null && key.equals(ek)))\n                    return e.val;\n            }\n            else if (eh < 0)\n                return (p = e.find(h, key)) != null ? p.val : null;\n            //遍历    \n            while ((e = e.next) != null) {\n                if (e.hash == h &&\n                    ((ek = e.key) == key || (ek != null && key.equals(ek))))\n                    return e.val;\n            }\n        }\n        return null;\n    }\n```\n1. 如果table为null或者遍历之后没找到对应的value，返回null；\n2. 根据key的hash值找到table中指定的Node节点，遍历链表或红黑树找到对应的value值。\n#### 总结\n\n最后总结一下**ConcurrentHashMap从JDK1.7（1.6）到JDK1.8的变化**：\n1. **底层结构改变**，从“**数组+数组+链表**”到“**数组+链表+红黑树**”\n2. **锁方式改变，取消了Segment重入锁，变成CAS+Synchronized实现锁**\n3. **锁粒度变小**，**由Segment数组变成table的元素**。\n4. JDK1.8中size()实现更简单","source":"_posts/ConcurrentHashMap在JDK1.8中的实现分析.md","raw":"---\ntitle: ConcurrentHashMap在JDK1.8中的实现分析\ndate: 2017-11-10 16:42:18\ntags: [ConcurrentHashMap,JDK1.8]\ncategories: 技术\n---\n### 一、ConcurrentHashMap的介绍\n**ConcurrentHashMap在JDK8中进行了巨大改动，它舍弃了锁分段的技术，大量引入了CAS操作，以此来实现并发操作。**   \n\n回忆JDK1.7中的ConcurrentHashmap，当hash碰撞频繁时，链表长度会拉长，而链表的增改删查操作都会消耗很长的时间，影响性能，因此和JDK1.8中的HashMap一样，当链表过长时，将其结构转化为红黑树，由此提高性能。\n### 二、ConcurrentHashMap的实现原理\n\n**ConcurrentHashMap的结构图**\n\nConcurrentHashMap在JDK1.8的实现原理是“**数组+链表+红黑树**”。（与HashMap在1.8中的实现思想一致，但是**红黑树的节点不同**，HashMap是Node节点，ConcurrentHashMap是TreeBin对象）\n\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG)\n\n\n---\n\n下面介绍一下ConcurrentHashMap主要方法put()和get()的实现。\n#### put()方法\n\n\n```\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n---第一部分\n        if (key == null || value == null) throw new NullPointerException();\n        //计算hash值\n        int hash = spread(key.hashCode());\n        int binCount = 0;\n        for (Node<K,V>[] tab = table;;) {\n            Node<K,V> f; int n, i, fh;\n            //如果tab为null，则初始化\n            if (tab == null || (n = tab.length) == 0)\n                tab = initTable();\n            //判断数组索引位置的元素是否为null\n            else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n                //CAS操作设置该数组索引位置为新节点Node\n                if (casTabAt(tab, i, null,\n                             new Node<K,V>(hash, key, value, null)))\n                    break;                   // no lock when adding to empty bin\n            }\n            //f节点是MOVED节点，表示有其他线程在扩容，帮助一起扩容\n            else if ((fh = f.hash) == MOVED)\n                tab = helpTransfer(tab, f);\n                \n---第二部分-----\n            else {\n                V oldVal = null;\n                synchronized (f) {\n                    if (tabAt(tab, i) == f) {\n                        //表示是链表，还未转化成红黑树\n                        if (fh >= 0) {\n                            binCount = 1;\n                            for (Node<K,V> e = f;; ++binCount) {\n                                K ek;\n                                //如果key已存在，则替换value\n                                if (e.hash == hash &&\n                                    ((ek = e.key) == key ||\n                                     (ek != null && key.equals(ek)))) {\n                                    oldVal = e.val;\n                                    if (!onlyIfAbsent)\n                                        e.val = value;\n                                    break;\n                                }\n                                Node<K,V> pred = e;\n                                //将新的节点插入尾部\n                                if ((e = e.next) == null) {\n                                    pred.next = new Node<K,V>(hash, key,\n                                                              value, null);\n                                    break;\n                                }\n                            }\n                        }\n                        //节点f是TreeBin对象，表示链表转为了红黑树\n                        else if (f instanceof TreeBin) {\n                            Node<K,V> p;\n                            binCount = 2;\n                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                           value)) != null) {\n                                oldVal = p.val;\n                                if (!onlyIfAbsent)\n                                    p.val = value;\n                            }\n                        }\n                    }\n                }\n                if (binCount != 0) {\n                    //如果大于8，转化为红黑树\n                    if (binCount >= TREEIFY_THRESHOLD)\n                        treeifyBin(tab, i);\n                    if (oldVal != null)\n                        return oldVal;\n                    break;\n                }\n            }\n        }\n        addCount(1L, binCount);\n        return null;\n    }\n```\n由于整个put()方法较长，分成两部分来分析。  \n**第一部分：**\n1. 遍历数组tab，如果为null，初始化数组；\n2. **调用tabAt()方法查找数组索引i处的节点f，如果f为null，说明该位置还没有节点，调用casTabAt()利用CAS操作插入新的节点**\n- **CAS成功**：break跳出，直到最后的addCount(1L, binCount)方法，判断插入这一个节点后是否需要扩容; \n- **CAS失败**：说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点；  \ntabAt()和casTabAt()方法源码如下：\n```\n private static final sun.misc.Unsafe U;\n \nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n        return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n    }\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                        Node<K,V> c, Node<K,V> v) {\n        return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n    }\n```\n可以看到，都是**调用Unsafe类的方法（原子性），Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。**\n3. **若前面的情况都不满足，判断f节点是否为MOVED节点，是则表示有其他线程在扩容，帮助一起扩容**；否则进入第二部分。  \n\n**第二部分：**  \n\n第二部分表示把新的节点Node插入链表或红黑树，可以看到使用了synchronized关键字实现同步。**但是注意，只在节点f上进行同步，表示只能有一个线程访问该节点。** 节点插入之前，再次利用 tabAt(tab, i) == f 判断头节点是否还是f，防止被其它线程修改。\n1. 如果f.hash >= 0，说明f是链表结构的头结点，遍历链表，如果key已存在，则修改value，否则在链表尾部插入节点。\n2. 如果f是TreeBin类型节点，说明链表变成红黑树，则在树结构上遍历元素，更新或增加节点。\n3. 最后判断链表中的节点数binCount >= 8，则转化为红黑树。\n\n---\n\n#### get()方法\n\n```\npublic V get(Object key) {\n        Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;\n        //获取key的hash值\n        int h = spread(key.hashCode());\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (e = tabAt(tab, (n - 1) & h)) != null) {\n            if ((eh = e.hash) == h) {\n                if ((ek = e.key) == key || (ek != null && key.equals(ek)))\n                    return e.val;\n            }\n            else if (eh < 0)\n                return (p = e.find(h, key)) != null ? p.val : null;\n            //遍历    \n            while ((e = e.next) != null) {\n                if (e.hash == h &&\n                    ((ek = e.key) == key || (ek != null && key.equals(ek))))\n                    return e.val;\n            }\n        }\n        return null;\n    }\n```\n1. 如果table为null或者遍历之后没找到对应的value，返回null；\n2. 根据key的hash值找到table中指定的Node节点，遍历链表或红黑树找到对应的value值。\n#### 总结\n\n最后总结一下**ConcurrentHashMap从JDK1.7（1.6）到JDK1.8的变化**：\n1. **底层结构改变**，从“**数组+数组+链表**”到“**数组+链表+红黑树**”\n2. **锁方式改变，取消了Segment重入锁，变成CAS+Synchronized实现锁**\n3. **锁粒度变小**，**由Segment数组变成table的元素**。\n4. JDK1.8中size()实现更简单","slug":"ConcurrentHashMap在JDK1.8中的实现分析","published":1,"updated":"2018-04-11T10:02:31.864Z","_id":"cjfqzt23t000550tccnnpz72e","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、ConcurrentHashMap的介绍\"><a href=\"#一、ConcurrentHashMap的介绍\" class=\"headerlink\" title=\"一、ConcurrentHashMap的介绍\"></a>一、ConcurrentHashMap的介绍</h3><p><strong>ConcurrentHashMap在JDK8中进行了巨大改动，它舍弃了锁分段的技术，大量引入了CAS操作，以此来实现并发操作。</strong>   </p>\n<p>回忆JDK1.7中的ConcurrentHashmap，当hash碰撞频繁时，链表长度会拉长，而链表的增改删查操作都会消耗很长的时间，影响性能，因此和JDK1.8中的HashMap一样，当链表过长时，将其结构转化为红黑树，由此提高性能。</p>\n<h3 id=\"二、ConcurrentHashMap的实现原理\"><a href=\"#二、ConcurrentHashMap的实现原理\" class=\"headerlink\" title=\"二、ConcurrentHashMap的实现原理\"></a>二、ConcurrentHashMap的实现原理</h3><p><strong>ConcurrentHashMap的结构图</strong></p>\n<p>ConcurrentHashMap在JDK1.8的实现原理是“<strong>数组+链表+红黑树</strong>”。（与HashMap在1.8中的实现思想一致，但是<strong>红黑树的节点不同</strong>，HashMap是Node节点，ConcurrentHashMap是TreeBin对象）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG\" alt=\"image\"></p>\n<hr>\n<p>下面介绍一下ConcurrentHashMap主要方法put()和get()的实现。</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put()方法\"></a>put()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">---第一部分</div><div class=\"line\">        if (key == null || value == null) throw new NullPointerException();</div><div class=\"line\">        //计算hash值</div><div class=\"line\">        int hash = spread(key.hashCode());</div><div class=\"line\">        int binCount = 0;</div><div class=\"line\">        for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class=\"line\">            Node&lt;K,V&gt; f; int n, i, fh;</div><div class=\"line\">            //如果tab为null，则初始化</div><div class=\"line\">            if (tab == null || (n = tab.length) == 0)</div><div class=\"line\">                tab = initTable();</div><div class=\"line\">            //判断数组索引位置的元素是否为null</div><div class=\"line\">            else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</div><div class=\"line\">                //CAS操作设置该数组索引位置为新节点Node</div><div class=\"line\">                if (casTabAt(tab, i, null,</div><div class=\"line\">                             new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class=\"line\">                    break;                   // no lock when adding to empty bin</div><div class=\"line\">            &#125;</div><div class=\"line\">            //f节点是MOVED节点，表示有其他线程在扩容，帮助一起扩容</div><div class=\"line\">            else if ((fh = f.hash) == MOVED)</div><div class=\"line\">                tab = helpTransfer(tab, f);</div><div class=\"line\">                </div><div class=\"line\">---第二部分-----</div><div class=\"line\">            else &#123;</div><div class=\"line\">                V oldVal = null;</div><div class=\"line\">                synchronized (f) &#123;</div><div class=\"line\">                    if (tabAt(tab, i) == f) &#123;</div><div class=\"line\">                        //表示是链表，还未转化成红黑树</div><div class=\"line\">                        if (fh &gt;= 0) &#123;</div><div class=\"line\">                            binCount = 1;</div><div class=\"line\">                            for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class=\"line\">                                K ek;</div><div class=\"line\">                                //如果key已存在，则替换value</div><div class=\"line\">                                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                                    ((ek = e.key) == key ||</div><div class=\"line\">                                     (ek != null &amp;&amp; key.equals(ek)))) &#123;</div><div class=\"line\">                                    oldVal = e.val;</div><div class=\"line\">                                    if (!onlyIfAbsent)</div><div class=\"line\">                                        e.val = value;</div><div class=\"line\">                                    break;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                                Node&lt;K,V&gt; pred = e;</div><div class=\"line\">                                //将新的节点插入尾部</div><div class=\"line\">                                if ((e = e.next) == null) &#123;</div><div class=\"line\">                                    pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class=\"line\">                                                              value, null);</div><div class=\"line\">                                    break;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //节点f是TreeBin对象，表示链表转为了红黑树</div><div class=\"line\">                        else if (f instanceof TreeBin) &#123;</div><div class=\"line\">                            Node&lt;K,V&gt; p;</div><div class=\"line\">                            binCount = 2;</div><div class=\"line\">                            if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class=\"line\">                                                           value)) != null) &#123;</div><div class=\"line\">                                oldVal = p.val;</div><div class=\"line\">                                if (!onlyIfAbsent)</div><div class=\"line\">                                    p.val = value;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (binCount != 0) &#123;</div><div class=\"line\">                    //如果大于8，转化为红黑树</div><div class=\"line\">                    if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class=\"line\">                        treeifyBin(tab, i);</div><div class=\"line\">                    if (oldVal != null)</div><div class=\"line\">                        return oldVal;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        addCount(1L, binCount);</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>由于整个put()方法较长，分成两部分来分析。<br><strong>第一部分：</strong></p>\n<ol>\n<li>遍历数组tab，如果为null，初始化数组；</li>\n<li><strong>调用tabAt()方法查找数组索引i处的节点f，如果f为null，说明该位置还没有节点，调用casTabAt()利用CAS操作插入新的节点</strong></li>\n</ol>\n<ul>\n<li><strong>CAS成功</strong>：break跳出，直到最后的addCount(1L, binCount)方法，判断插入这一个节点后是否需要扩容; </li>\n<li><strong>CAS失败</strong>：说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点；<br>tabAt()和casTabAt()方法源码如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private static final sun.misc.Unsafe U;</div><div class=\"line\"> </div><div class=\"line\">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;</div><div class=\"line\">        return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);</div><div class=\"line\">    &#125;</div><div class=\"line\">static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i,</div><div class=\"line\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;</div><div class=\"line\">        return U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以看到，都是<strong>调用Unsafe类的方法（原子性），Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。</strong></p>\n<ol>\n<li><strong>若前面的情况都不满足，判断f节点是否为MOVED节点，是则表示有其他线程在扩容，帮助一起扩容</strong>；否则进入第二部分。  </li>\n</ol>\n<p><strong>第二部分：</strong>  </p>\n<p>第二部分表示把新的节点Node插入链表或红黑树，可以看到使用了synchronized关键字实现同步。<strong>但是注意，只在节点f上进行同步，表示只能有一个线程访问该节点。</strong> 节点插入之前，再次利用 tabAt(tab, i) == f 判断头节点是否还是f，防止被其它线程修改。</p>\n<ol>\n<li>如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果key已存在，则修改value，否则在链表尾部插入节点。</li>\n<li>如果f是TreeBin类型节点，说明链表变成红黑树，则在树结构上遍历元素，更新或增加节点。</li>\n<li>最后判断链表中的节点数binCount &gt;= 8，则转化为红黑树。</li>\n</ol>\n<hr>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class=\"line\">        //获取key的hash值</div><div class=\"line\">        int h = spread(key.hashCode());</div><div class=\"line\">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">            (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class=\"line\">            if ((eh = e.hash) == h) &#123;</div><div class=\"line\">                if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class=\"line\">                    return e.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (eh &lt; 0)</div><div class=\"line\">                return (p = e.find(h, key)) != null ? p.val : null;</div><div class=\"line\">            //遍历    </div><div class=\"line\">            while ((e = e.next) != null) &#123;</div><div class=\"line\">                if (e.hash == h &amp;&amp;</div><div class=\"line\">                    ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class=\"line\">                    return e.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>如果table为null或者遍历之后没找到对应的value，返回null；</li>\n<li>根据key的hash值找到table中指定的Node节点，遍历链表或红黑树找到对应的value值。<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4></li>\n</ol>\n<p>最后总结一下<strong>ConcurrentHashMap从JDK1.7（1.6）到JDK1.8的变化</strong>：</p>\n<ol>\n<li><strong>底层结构改变</strong>，从“<strong>数组+数组+链表</strong>”到“<strong>数组+链表+红黑树</strong>”</li>\n<li><strong>锁方式改变，取消了Segment重入锁，变成CAS+Synchronized实现锁</strong></li>\n<li><strong>锁粒度变小</strong>，<strong>由Segment数组变成table的元素</strong>。</li>\n<li>JDK1.8中size()实现更简单</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、ConcurrentHashMap的介绍\"><a href=\"#一、ConcurrentHashMap的介绍\" class=\"headerlink\" title=\"一、ConcurrentHashMap的介绍\"></a>一、ConcurrentHashMap的介绍</h3><p><strong>ConcurrentHashMap在JDK8中进行了巨大改动，它舍弃了锁分段的技术，大量引入了CAS操作，以此来实现并发操作。</strong>   </p>\n<p>回忆JDK1.7中的ConcurrentHashmap，当hash碰撞频繁时，链表长度会拉长，而链表的增改删查操作都会消耗很长的时间，影响性能，因此和JDK1.8中的HashMap一样，当链表过长时，将其结构转化为红黑树，由此提高性能。</p>\n<h3 id=\"二、ConcurrentHashMap的实现原理\"><a href=\"#二、ConcurrentHashMap的实现原理\" class=\"headerlink\" title=\"二、ConcurrentHashMap的实现原理\"></a>二、ConcurrentHashMap的实现原理</h3><p><strong>ConcurrentHashMap的结构图</strong></p>\n<p>ConcurrentHashMap在JDK1.8的实现原理是“<strong>数组+链表+红黑树</strong>”。（与HashMap在1.8中的实现思想一致，但是<strong>红黑树的节点不同</strong>，HashMap是Node节点，ConcurrentHashMap是TreeBin对象）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG\" alt=\"image\"></p>\n<hr>\n<p>下面介绍一下ConcurrentHashMap主要方法put()和get()的实现。</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put()方法\"></a>put()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">---第一部分</div><div class=\"line\">        if (key == null || value == null) throw new NullPointerException();</div><div class=\"line\">        //计算hash值</div><div class=\"line\">        int hash = spread(key.hashCode());</div><div class=\"line\">        int binCount = 0;</div><div class=\"line\">        for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class=\"line\">            Node&lt;K,V&gt; f; int n, i, fh;</div><div class=\"line\">            //如果tab为null，则初始化</div><div class=\"line\">            if (tab == null || (n = tab.length) == 0)</div><div class=\"line\">                tab = initTable();</div><div class=\"line\">            //判断数组索引位置的元素是否为null</div><div class=\"line\">            else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</div><div class=\"line\">                //CAS操作设置该数组索引位置为新节点Node</div><div class=\"line\">                if (casTabAt(tab, i, null,</div><div class=\"line\">                             new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class=\"line\">                    break;                   // no lock when adding to empty bin</div><div class=\"line\">            &#125;</div><div class=\"line\">            //f节点是MOVED节点，表示有其他线程在扩容，帮助一起扩容</div><div class=\"line\">            else if ((fh = f.hash) == MOVED)</div><div class=\"line\">                tab = helpTransfer(tab, f);</div><div class=\"line\">                </div><div class=\"line\">---第二部分-----</div><div class=\"line\">            else &#123;</div><div class=\"line\">                V oldVal = null;</div><div class=\"line\">                synchronized (f) &#123;</div><div class=\"line\">                    if (tabAt(tab, i) == f) &#123;</div><div class=\"line\">                        //表示是链表，还未转化成红黑树</div><div class=\"line\">                        if (fh &gt;= 0) &#123;</div><div class=\"line\">                            binCount = 1;</div><div class=\"line\">                            for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class=\"line\">                                K ek;</div><div class=\"line\">                                //如果key已存在，则替换value</div><div class=\"line\">                                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                                    ((ek = e.key) == key ||</div><div class=\"line\">                                     (ek != null &amp;&amp; key.equals(ek)))) &#123;</div><div class=\"line\">                                    oldVal = e.val;</div><div class=\"line\">                                    if (!onlyIfAbsent)</div><div class=\"line\">                                        e.val = value;</div><div class=\"line\">                                    break;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                                Node&lt;K,V&gt; pred = e;</div><div class=\"line\">                                //将新的节点插入尾部</div><div class=\"line\">                                if ((e = e.next) == null) &#123;</div><div class=\"line\">                                    pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class=\"line\">                                                              value, null);</div><div class=\"line\">                                    break;</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        //节点f是TreeBin对象，表示链表转为了红黑树</div><div class=\"line\">                        else if (f instanceof TreeBin) &#123;</div><div class=\"line\">                            Node&lt;K,V&gt; p;</div><div class=\"line\">                            binCount = 2;</div><div class=\"line\">                            if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class=\"line\">                                                           value)) != null) &#123;</div><div class=\"line\">                                oldVal = p.val;</div><div class=\"line\">                                if (!onlyIfAbsent)</div><div class=\"line\">                                    p.val = value;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (binCount != 0) &#123;</div><div class=\"line\">                    //如果大于8，转化为红黑树</div><div class=\"line\">                    if (binCount &gt;= TREEIFY_THRESHOLD)</div><div class=\"line\">                        treeifyBin(tab, i);</div><div class=\"line\">                    if (oldVal != null)</div><div class=\"line\">                        return oldVal;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        addCount(1L, binCount);</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>由于整个put()方法较长，分成两部分来分析。<br><strong>第一部分：</strong></p>\n<ol>\n<li>遍历数组tab，如果为null，初始化数组；</li>\n<li><strong>调用tabAt()方法查找数组索引i处的节点f，如果f为null，说明该位置还没有节点，调用casTabAt()利用CAS操作插入新的节点</strong></li>\n</ol>\n<ul>\n<li><strong>CAS成功</strong>：break跳出，直到最后的addCount(1L, binCount)方法，判断插入这一个节点后是否需要扩容; </li>\n<li><strong>CAS失败</strong>：说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点；<br>tabAt()和casTabAt()方法源码如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private static final sun.misc.Unsafe U;</div><div class=\"line\"> </div><div class=\"line\">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;</div><div class=\"line\">        return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);</div><div class=\"line\">    &#125;</div><div class=\"line\">static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i,</div><div class=\"line\">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;</div><div class=\"line\">        return U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可以看到，都是<strong>调用Unsafe类的方法（原子性），Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。</strong></p>\n<ol>\n<li><strong>若前面的情况都不满足，判断f节点是否为MOVED节点，是则表示有其他线程在扩容，帮助一起扩容</strong>；否则进入第二部分。  </li>\n</ol>\n<p><strong>第二部分：</strong>  </p>\n<p>第二部分表示把新的节点Node插入链表或红黑树，可以看到使用了synchronized关键字实现同步。<strong>但是注意，只在节点f上进行同步，表示只能有一个线程访问该节点。</strong> 节点插入之前，再次利用 tabAt(tab, i) == f 判断头节点是否还是f，防止被其它线程修改。</p>\n<ol>\n<li>如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果key已存在，则修改value，否则在链表尾部插入节点。</li>\n<li>如果f是TreeBin类型节点，说明链表变成红黑树，则在树结构上遍历元素，更新或增加节点。</li>\n<li>最后判断链表中的节点数binCount &gt;= 8，则转化为红黑树。</li>\n</ol>\n<hr>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class=\"line\">        //获取key的hash值</div><div class=\"line\">        int h = spread(key.hashCode());</div><div class=\"line\">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">            (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class=\"line\">            if ((eh = e.hash) == h) &#123;</div><div class=\"line\">                if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class=\"line\">                    return e.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (eh &lt; 0)</div><div class=\"line\">                return (p = e.find(h, key)) != null ? p.val : null;</div><div class=\"line\">            //遍历    </div><div class=\"line\">            while ((e = e.next) != null) &#123;</div><div class=\"line\">                if (e.hash == h &amp;&amp;</div><div class=\"line\">                    ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class=\"line\">                    return e.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>如果table为null或者遍历之后没找到对应的value，返回null；</li>\n<li>根据key的hash值找到table中指定的Node节点，遍历链表或红黑树找到对应的value值。<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4></li>\n</ol>\n<p>最后总结一下<strong>ConcurrentHashMap从JDK1.7（1.6）到JDK1.8的变化</strong>：</p>\n<ol>\n<li><strong>底层结构改变</strong>，从“<strong>数组+数组+链表</strong>”到“<strong>数组+链表+红黑树</strong>”</li>\n<li><strong>锁方式改变，取消了Segment重入锁，变成CAS+Synchronized实现锁</strong></li>\n<li><strong>锁粒度变小</strong>，<strong>由Segment数组变成table的元素</strong>。</li>\n<li>JDK1.8中size()实现更简单</li>\n</ol>\n"},{"title":"HashMap 在JDK1.8中的实现（与JDK1.7对比）","date":"2017-11-01T09:48:18.000Z","_content":"\n### HashMap的实现分析\n\n#### 介绍\n通过前面JDK1.7的分析，我们知道，当负载因子和Hash算法设计的很好时，可以降低hash碰撞的概率，但在数据量过大时也避免不了会出现链表变长的情况，一旦出现链表过长，查找元素变慢，则会严重影响HashMap的性能。  \n于是，在JDK1.8中，对数据结构做了进一步的优化，引入了红黑树。**而当链表长度太长（默认超过8）时，链表就转换为红黑树**，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。\n\n\n\n#### 底层实现\nHashMap的底层实现是**数组+链表+红黑树**。\n\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG)\n\n#### 数组索引位置\n\n```\n//第一步\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n\n//第二步，代码中：    \n    tab[i = (n - 1) & hash]   \n```\n确定数组索引的位置同样是两步法：  \n第一步计算hash，与JDK1.7中的计算方法不同；\n计算过程如下：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/hash.png)  \n\n第二步确定索引，与JDK1.7中的相同，只是不作为一个独立的方法；\n#### put()、get()方法\n**put()方法**\n```\npublic V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n```\n调用了putVal()方法：\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        //如果tab为空或长度为0，则分配内存resize()\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //数组索引位置为null，直接put\n        //同时这一步p赋值为tab[i]\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            //判断hash值和key是否都相同，都相同则后面替换value值\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            //红黑书处理冲突    \n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            //链表处理冲突\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    // 在链表尾部插入新结点\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        //节点数 >= 7，转化为红黑树\n                        if (binCount >= TREEIFY_THRESHOLD - 1) \n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    //已经存在key，退出循环，后面替换value值\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    //与e = p.next组合，遍历链表\n                    p = e;\n                }\n            }\n            //已经存在key，替换value值\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        //扩容\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\nput过程分析：\n1. 如果数组索引位置tab[i]为null，直接put；否则进入2；\n2. 与第一个节点hash值相同且key值也相同，则直接到后面替换value值，否则进入3；\n3. 判断链表是否形成红黑树，并根据结果进入不同的处理。\n\n---\n\n**get()方法**\n\n```\npublic V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n```\n调用getNode()方法：\n```\nfinal Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            //判断目标是不是first，是直接返回first\n            if (first.hash == hash && // always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n            //已经形成链表\n            if ((e = first.next) != null) {\n                //第一个节点是TreeNode，说明形成了红黑树\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                // 还未形成红黑树，按链表处理   \n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n```\n方法分析：\n1. 首先判断第一个节点first是不是要寻找的节点，如果是直接返回；不是进入2；\n2. 判断第一个节点first是不是树节点，如果是说明形成红黑树，调用红黑树的查找方法；不是则进入3；\n3. 说明还是链表，未形成红黑树，调用链表查找方法。\n\n#### 扩容机制\n我们知道，当往HashMap中不断地添加元素时，它就会扩大数组的长度，把小的数组用大的数组来代替。\n**回忆JDK1.7中的扩容，对于链表中的每个元素都需要重新计算hash值，而在JDK1.8中，只需要看看原来的hash值新增的那个bit是1还是0就好了**，是0的话索引没变，是1的话索引变成“原索引+oldCap（原容量）”，工作过程如下图：\n\n数组由16扩大到32的过程中，索引位置为15的元素变化：\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hahs%E6%89%A9%E5%AE%B9.png)\n\n**注：JDK1.7中旧链表的元素如果刚好又在新链表中，那么元素的顺序是倒置的，而JDK1.8不会倒置。**\n\n#### JDK1.8和JDK1.7的区别（HashMap）\n\n**相同点**\n1. **默认初始容量都是16，默认负载因子都是0.75。数组的长度length都是2的次幂，扩容时都是2倍**\n2. **通过hash计算索引的方法相同（hash & length-1）**\n3. **key为null的键值对都会放入table[0]中**\n4. **都是懒加载，初始时表为空，在插入第一个键值对时初始**化\n\n\n\n\n**不同点**\n1. **结构不同，JDK1.8增加了红黑树优化结构**\n2. **put方法的区别，JDK1.7中put时，添加到头节点；JDK1.8中添加到尾节点**\n3. **计算hash的方法不同，JDK1.8更优化**\n4. **JDK1.7新链表的顺序倒置，JDK1.8新链表顺序不倒置**","source":"_posts/HashMap 在JDK1.8中的实现（与JDK1.7对比）.md","raw":"---\ntitle: HashMap 在JDK1.8中的实现（与JDK1.7对比）\ndate: 2017-11-1 17:48:18\ntags: [HashMap,JDK1.8]\ncategories: 技术\n---\n\n### HashMap的实现分析\n\n#### 介绍\n通过前面JDK1.7的分析，我们知道，当负载因子和Hash算法设计的很好时，可以降低hash碰撞的概率，但在数据量过大时也避免不了会出现链表变长的情况，一旦出现链表过长，查找元素变慢，则会严重影响HashMap的性能。  \n于是，在JDK1.8中，对数据结构做了进一步的优化，引入了红黑树。**而当链表长度太长（默认超过8）时，链表就转换为红黑树**，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。\n\n\n\n#### 底层实现\nHashMap的底层实现是**数组+链表+红黑树**。\n\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG)\n\n#### 数组索引位置\n\n```\n//第一步\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n\n//第二步，代码中：    \n    tab[i = (n - 1) & hash]   \n```\n确定数组索引的位置同样是两步法：  \n第一步计算hash，与JDK1.7中的计算方法不同；\n计算过程如下：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/hash.png)  \n\n第二步确定索引，与JDK1.7中的相同，只是不作为一个独立的方法；\n#### put()、get()方法\n**put()方法**\n```\npublic V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n```\n调用了putVal()方法：\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        //如果tab为空或长度为0，则分配内存resize()\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //数组索引位置为null，直接put\n        //同时这一步p赋值为tab[i]\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            //判断hash值和key是否都相同，都相同则后面替换value值\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            //红黑书处理冲突    \n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            //链表处理冲突\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    // 在链表尾部插入新结点\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        //节点数 >= 7，转化为红黑树\n                        if (binCount >= TREEIFY_THRESHOLD - 1) \n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    //已经存在key，退出循环，后面替换value值\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    //与e = p.next组合，遍历链表\n                    p = e;\n                }\n            }\n            //已经存在key，替换value值\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        //扩容\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\nput过程分析：\n1. 如果数组索引位置tab[i]为null，直接put；否则进入2；\n2. 与第一个节点hash值相同且key值也相同，则直接到后面替换value值，否则进入3；\n3. 判断链表是否形成红黑树，并根据结果进入不同的处理。\n\n---\n\n**get()方法**\n\n```\npublic V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n```\n调用getNode()方法：\n```\nfinal Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            (first = tab[(n - 1) & hash]) != null) {\n            //判断目标是不是first，是直接返回first\n            if (first.hash == hash && // always check first node\n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n            //已经形成链表\n            if ((e = first.next) != null) {\n                //第一个节点是TreeNode，说明形成了红黑树\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                // 还未形成红黑树，按链表处理   \n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n```\n方法分析：\n1. 首先判断第一个节点first是不是要寻找的节点，如果是直接返回；不是进入2；\n2. 判断第一个节点first是不是树节点，如果是说明形成红黑树，调用红黑树的查找方法；不是则进入3；\n3. 说明还是链表，未形成红黑树，调用链表查找方法。\n\n#### 扩容机制\n我们知道，当往HashMap中不断地添加元素时，它就会扩大数组的长度，把小的数组用大的数组来代替。\n**回忆JDK1.7中的扩容，对于链表中的每个元素都需要重新计算hash值，而在JDK1.8中，只需要看看原来的hash值新增的那个bit是1还是0就好了**，是0的话索引没变，是1的话索引变成“原索引+oldCap（原容量）”，工作过程如下图：\n\n数组由16扩大到32的过程中，索引位置为15的元素变化：\n![image](http://osuskkx7k.bkt.clouddn.com/1.8hahs%E6%89%A9%E5%AE%B9.png)\n\n**注：JDK1.7中旧链表的元素如果刚好又在新链表中，那么元素的顺序是倒置的，而JDK1.8不会倒置。**\n\n#### JDK1.8和JDK1.7的区别（HashMap）\n\n**相同点**\n1. **默认初始容量都是16，默认负载因子都是0.75。数组的长度length都是2的次幂，扩容时都是2倍**\n2. **通过hash计算索引的方法相同（hash & length-1）**\n3. **key为null的键值对都会放入table[0]中**\n4. **都是懒加载，初始时表为空，在插入第一个键值对时初始**化\n\n\n\n\n**不同点**\n1. **结构不同，JDK1.8增加了红黑树优化结构**\n2. **put方法的区别，JDK1.7中put时，添加到头节点；JDK1.8中添加到尾节点**\n3. **计算hash的方法不同，JDK1.8更优化**\n4. **JDK1.7新链表的顺序倒置，JDK1.8新链表顺序不倒置**","slug":"HashMap 在JDK1.8中的实现（与JDK1.7对比）","published":1,"updated":"2018-04-11T10:02:31.865Z","_id":"cjfqzt23t000650tc696zm3bp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"HashMap的实现分析\"><a href=\"#HashMap的实现分析\" class=\"headerlink\" title=\"HashMap的实现分析\"></a>HashMap的实现分析</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>通过前面JDK1.7的分析，我们知道，当负载因子和Hash算法设计的很好时，可以降低hash碰撞的概率，但在数据量过大时也避免不了会出现链表变长的情况，一旦出现链表过长，查找元素变慢，则会严重影响HashMap的性能。<br>于是，在JDK1.8中，对数据结构做了进一步的优化，引入了红黑树。<strong>而当链表长度太长（默认超过8）时，链表就转换为红黑树</strong>，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p>\n<h4 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h4><p>HashMap的底层实现是<strong>数组+链表+红黑树</strong>。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG\" alt=\"image\"></p>\n<h4 id=\"数组索引位置\"><a href=\"#数组索引位置\" class=\"headerlink\" title=\"数组索引位置\"></a>数组索引位置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第一步</div><div class=\"line\">static final int hash(Object key) &#123;</div><div class=\"line\">        int h;</div><div class=\"line\">        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">//第二步，代码中：    </div><div class=\"line\">    tab[i = (n - 1) &amp; hash]</div></pre></td></tr></table></figure>\n<p>确定数组索引的位置同样是两步法：<br>第一步计算hash，与JDK1.7中的计算方法不同；<br>计算过程如下：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/hash.png\" alt=\"image\">  </p>\n<p>第二步确定索引，与JDK1.7中的相同，只是不作为一个独立的方法；</p>\n<h4 id=\"put-、get-方法\"><a href=\"#put-、get-方法\" class=\"headerlink\" title=\"put()、get()方法\"></a>put()、get()方法</h4><p><strong>put()方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">        return putVal(hash(key), key, value, false, true);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用了putVal()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class=\"line\">                   boolean evict) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class=\"line\">        //如果tab为空或长度为0，则分配内存resize()</div><div class=\"line\">        if ((tab = table) == null || (n = tab.length) == 0)</div><div class=\"line\">            n = (tab = resize()).length;</div><div class=\"line\">        //数组索引位置为null，直接put</div><div class=\"line\">        //同时这一步p赋值为tab[i]</div><div class=\"line\">        if ((p = tab[i = (n - 1) &amp; hash]) == null)</div><div class=\"line\">            tab[i] = newNode(hash, key, value, null);</div><div class=\"line\">        else &#123;</div><div class=\"line\">            Node&lt;K,V&gt; e; K k;</div><div class=\"line\">            //判断hash值和key是否都相同，都相同则后面替换value值</div><div class=\"line\">            if (p.hash == hash &amp;&amp;</div><div class=\"line\">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                e = p;</div><div class=\"line\">            //红黑书处理冲突    </div><div class=\"line\">            else if (p instanceof TreeNode)</div><div class=\"line\">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</div><div class=\"line\">            //链表处理冲突</div><div class=\"line\">            else &#123;</div><div class=\"line\">                for (int binCount = 0; ; ++binCount) &#123;</div><div class=\"line\">                    // 在链表尾部插入新结点</div><div class=\"line\">                    if ((e = p.next) == null) &#123;</div><div class=\"line\">                        p.next = newNode(hash, key, value, null);</div><div class=\"line\">                        //节点数 &gt;= 7，转化为红黑树</div><div class=\"line\">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) </div><div class=\"line\">                            treeifyBin(tab, hash);</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    //已经存在key，退出循环，后面替换value值</div><div class=\"line\">                    if (e.hash == hash &amp;&amp;</div><div class=\"line\">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                        break;</div><div class=\"line\">                    //与e = p.next组合，遍历链表</div><div class=\"line\">                    p = e;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //已经存在key，替换value值</div><div class=\"line\">            if (e != null) &#123; // existing mapping for key</div><div class=\"line\">                V oldValue = e.value;</div><div class=\"line\">                if (!onlyIfAbsent || oldValue == null)</div><div class=\"line\">                    e.value = value;</div><div class=\"line\">                afterNodeAccess(e);</div><div class=\"line\">                return oldValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ++modCount;</div><div class=\"line\">        //扩容</div><div class=\"line\">        if (++size &gt; threshold)</div><div class=\"line\">            resize();</div><div class=\"line\">        afterNodeInsertion(evict);</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>put过程分析：</p>\n<ol>\n<li>如果数组索引位置tab[i]为null，直接put；否则进入2；</li>\n<li>与第一个节点hash值相同且key值也相同，则直接到后面替换value值，否则进入3；</li>\n<li>判断链表是否形成红黑树，并根据结果进入不同的处理。</li>\n</ol>\n<hr>\n<p><strong>get()方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt; e;</div><div class=\"line\">        return (e = getNode(hash(key), key)) == null ? null : e.value;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用getNode()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class=\"line\">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">            (first = tab[(n - 1) &amp; hash]) != null) &#123;</div><div class=\"line\">            //判断目标是不是first，是直接返回first</div><div class=\"line\">            if (first.hash == hash &amp;&amp; // always check first node</div><div class=\"line\">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                return first;</div><div class=\"line\">            //已经形成链表</div><div class=\"line\">            if ((e = first.next) != null) &#123;</div><div class=\"line\">                //第一个节点是TreeNode，说明形成了红黑树</div><div class=\"line\">                if (first instanceof TreeNode)</div><div class=\"line\">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">                // 还未形成红黑树，按链表处理   </div><div class=\"line\">                do &#123;</div><div class=\"line\">                    if (e.hash == hash &amp;&amp;</div><div class=\"line\">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                        return e;</div><div class=\"line\">                &#125; while ((e = e.next) != null);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>方法分析：</p>\n<ol>\n<li>首先判断第一个节点first是不是要寻找的节点，如果是直接返回；不是进入2；</li>\n<li>判断第一个节点first是不是树节点，如果是说明形成红黑树，调用红黑树的查找方法；不是则进入3；</li>\n<li>说明还是链表，未形成红黑树，调用链表查找方法。</li>\n</ol>\n<h4 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h4><p>我们知道，当往HashMap中不断地添加元素时，它就会扩大数组的长度，把小的数组用大的数组来代替。<br><strong>回忆JDK1.7中的扩容，对于链表中的每个元素都需要重新计算hash值，而在JDK1.8中，只需要看看原来的hash值新增的那个bit是1还是0就好了</strong>，是0的话索引没变，是1的话索引变成“原索引+oldCap（原容量）”，工作过程如下图：</p>\n<p>数组由16扩大到32的过程中，索引位置为15的元素变化：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hahs%E6%89%A9%E5%AE%B9.png\" alt=\"image\"></p>\n<p><strong>注：JDK1.7中旧链表的元素如果刚好又在新链表中，那么元素的顺序是倒置的，而JDK1.8不会倒置。</strong></p>\n<h4 id=\"JDK1-8和JDK1-7的区别（HashMap）\"><a href=\"#JDK1-8和JDK1-7的区别（HashMap）\" class=\"headerlink\" title=\"JDK1.8和JDK1.7的区别（HashMap）\"></a>JDK1.8和JDK1.7的区别（HashMap）</h4><p><strong>相同点</strong></p>\n<ol>\n<li><strong>默认初始容量都是16，默认负载因子都是0.75。数组的长度length都是2的次幂，扩容时都是2倍</strong></li>\n<li><strong>通过hash计算索引的方法相同（hash &amp; length-1）</strong></li>\n<li><strong>key为null的键值对都会放入table[0]中</strong></li>\n<li><strong>都是懒加载，初始时表为空，在插入第一个键值对时初始</strong>化</li>\n</ol>\n<p><strong>不同点</strong></p>\n<ol>\n<li><strong>结构不同，JDK1.8增加了红黑树优化结构</strong></li>\n<li><strong>put方法的区别，JDK1.7中put时，添加到头节点；JDK1.8中添加到尾节点</strong></li>\n<li><strong>计算hash的方法不同，JDK1.8更优化</strong></li>\n<li><strong>JDK1.7新链表的顺序倒置，JDK1.8新链表顺序不倒置</strong></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HashMap的实现分析\"><a href=\"#HashMap的实现分析\" class=\"headerlink\" title=\"HashMap的实现分析\"></a>HashMap的实现分析</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>通过前面JDK1.7的分析，我们知道，当负载因子和Hash算法设计的很好时，可以降低hash碰撞的概率，但在数据量过大时也避免不了会出现链表变长的情况，一旦出现链表过长，查找元素变慢，则会严重影响HashMap的性能。<br>于是，在JDK1.8中，对数据结构做了进一步的优化，引入了红黑树。<strong>而当链表长度太长（默认超过8）时，链表就转换为红黑树</strong>，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p>\n<h4 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h4><p>HashMap的底层实现是<strong>数组+链表+红黑树</strong>。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hash.PNG\" alt=\"image\"></p>\n<h4 id=\"数组索引位置\"><a href=\"#数组索引位置\" class=\"headerlink\" title=\"数组索引位置\"></a>数组索引位置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第一步</div><div class=\"line\">static final int hash(Object key) &#123;</div><div class=\"line\">        int h;</div><div class=\"line\">        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">//第二步，代码中：    </div><div class=\"line\">    tab[i = (n - 1) &amp; hash]</div></pre></td></tr></table></figure>\n<p>确定数组索引的位置同样是两步法：<br>第一步计算hash，与JDK1.7中的计算方法不同；<br>计算过程如下：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/hash.png\" alt=\"image\">  </p>\n<p>第二步确定索引，与JDK1.7中的相同，只是不作为一个独立的方法；</p>\n<h4 id=\"put-、get-方法\"><a href=\"#put-、get-方法\" class=\"headerlink\" title=\"put()、get()方法\"></a>put()、get()方法</h4><p><strong>put()方法</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">        return putVal(hash(key), key, value, false, true);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用了putVal()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class=\"line\">                   boolean evict) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class=\"line\">        //如果tab为空或长度为0，则分配内存resize()</div><div class=\"line\">        if ((tab = table) == null || (n = tab.length) == 0)</div><div class=\"line\">            n = (tab = resize()).length;</div><div class=\"line\">        //数组索引位置为null，直接put</div><div class=\"line\">        //同时这一步p赋值为tab[i]</div><div class=\"line\">        if ((p = tab[i = (n - 1) &amp; hash]) == null)</div><div class=\"line\">            tab[i] = newNode(hash, key, value, null);</div><div class=\"line\">        else &#123;</div><div class=\"line\">            Node&lt;K,V&gt; e; K k;</div><div class=\"line\">            //判断hash值和key是否都相同，都相同则后面替换value值</div><div class=\"line\">            if (p.hash == hash &amp;&amp;</div><div class=\"line\">                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                e = p;</div><div class=\"line\">            //红黑书处理冲突    </div><div class=\"line\">            else if (p instanceof TreeNode)</div><div class=\"line\">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</div><div class=\"line\">            //链表处理冲突</div><div class=\"line\">            else &#123;</div><div class=\"line\">                for (int binCount = 0; ; ++binCount) &#123;</div><div class=\"line\">                    // 在链表尾部插入新结点</div><div class=\"line\">                    if ((e = p.next) == null) &#123;</div><div class=\"line\">                        p.next = newNode(hash, key, value, null);</div><div class=\"line\">                        //节点数 &gt;= 7，转化为红黑树</div><div class=\"line\">                        if (binCount &gt;= TREEIFY_THRESHOLD - 1) </div><div class=\"line\">                            treeifyBin(tab, hash);</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    //已经存在key，退出循环，后面替换value值</div><div class=\"line\">                    if (e.hash == hash &amp;&amp;</div><div class=\"line\">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                        break;</div><div class=\"line\">                    //与e = p.next组合，遍历链表</div><div class=\"line\">                    p = e;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //已经存在key，替换value值</div><div class=\"line\">            if (e != null) &#123; // existing mapping for key</div><div class=\"line\">                V oldValue = e.value;</div><div class=\"line\">                if (!onlyIfAbsent || oldValue == null)</div><div class=\"line\">                    e.value = value;</div><div class=\"line\">                afterNodeAccess(e);</div><div class=\"line\">                return oldValue;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ++modCount;</div><div class=\"line\">        //扩容</div><div class=\"line\">        if (++size &gt; threshold)</div><div class=\"line\">            resize();</div><div class=\"line\">        afterNodeInsertion(evict);</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>put过程分析：</p>\n<ol>\n<li>如果数组索引位置tab[i]为null，直接put；否则进入2；</li>\n<li>与第一个节点hash值相同且key值也相同，则直接到后面替换value值，否则进入3；</li>\n<li>判断链表是否形成红黑树，并根据结果进入不同的处理。</li>\n</ol>\n<hr>\n<p><strong>get()方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt; e;</div><div class=\"line\">        return (e = getNode(hash(key), key)) == null ? null : e.value;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用getNode()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</div><div class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class=\"line\">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">            (first = tab[(n - 1) &amp; hash]) != null) &#123;</div><div class=\"line\">            //判断目标是不是first，是直接返回first</div><div class=\"line\">            if (first.hash == hash &amp;&amp; // always check first node</div><div class=\"line\">                ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                return first;</div><div class=\"line\">            //已经形成链表</div><div class=\"line\">            if ((e = first.next) != null) &#123;</div><div class=\"line\">                //第一个节点是TreeNode，说明形成了红黑树</div><div class=\"line\">                if (first instanceof TreeNode)</div><div class=\"line\">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">                // 还未形成红黑树，按链表处理   </div><div class=\"line\">                do &#123;</div><div class=\"line\">                    if (e.hash == hash &amp;&amp;</div><div class=\"line\">                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                        return e;</div><div class=\"line\">                &#125; while ((e = e.next) != null);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>方法分析：</p>\n<ol>\n<li>首先判断第一个节点first是不是要寻找的节点，如果是直接返回；不是进入2；</li>\n<li>判断第一个节点first是不是树节点，如果是说明形成红黑树，调用红黑树的查找方法；不是则进入3；</li>\n<li>说明还是链表，未形成红黑树，调用链表查找方法。</li>\n</ol>\n<h4 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h4><p>我们知道，当往HashMap中不断地添加元素时，它就会扩大数组的长度，把小的数组用大的数组来代替。<br><strong>回忆JDK1.7中的扩容，对于链表中的每个元素都需要重新计算hash值，而在JDK1.8中，只需要看看原来的hash值新增的那个bit是1还是0就好了</strong>，是0的话索引没变，是1的话索引变成“原索引+oldCap（原容量）”，工作过程如下图：</p>\n<p>数组由16扩大到32的过程中，索引位置为15的元素变化：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/1.8hahs%E6%89%A9%E5%AE%B9.png\" alt=\"image\"></p>\n<p><strong>注：JDK1.7中旧链表的元素如果刚好又在新链表中，那么元素的顺序是倒置的，而JDK1.8不会倒置。</strong></p>\n<h4 id=\"JDK1-8和JDK1-7的区别（HashMap）\"><a href=\"#JDK1-8和JDK1-7的区别（HashMap）\" class=\"headerlink\" title=\"JDK1.8和JDK1.7的区别（HashMap）\"></a>JDK1.8和JDK1.7的区别（HashMap）</h4><p><strong>相同点</strong></p>\n<ol>\n<li><strong>默认初始容量都是16，默认负载因子都是0.75。数组的长度length都是2的次幂，扩容时都是2倍</strong></li>\n<li><strong>通过hash计算索引的方法相同（hash &amp; length-1）</strong></li>\n<li><strong>key为null的键值对都会放入table[0]中</strong></li>\n<li><strong>都是懒加载，初始时表为空，在插入第一个键值对时初始</strong>化</li>\n</ol>\n<p><strong>不同点</strong></p>\n<ol>\n<li><strong>结构不同，JDK1.8增加了红黑树优化结构</strong></li>\n<li><strong>put方法的区别，JDK1.7中put时，添加到头节点；JDK1.8中添加到尾节点</strong></li>\n<li><strong>计算hash的方法不同，JDK1.8更优化</strong></li>\n<li><strong>JDK1.7新链表的顺序倒置，JDK1.8新链表顺序不倒置</strong></li>\n</ol>\n"},{"title":"HashMap引发的线程安全问题","date":"2017-11-03T09:48:18.000Z","_content":"### 一、线程安全性\n我们知道，HashMap是非线程安全的，只能在单线程的情况下使用。那么为什么不能在并发的情况下使用呢？**因为在并发时，HashMap的扩容会产生错误而形成环形链表，导致读取数据时发生死循环**。\n\n回忆前面描述的扩容过程，调用了transfer()方法将旧链表转化为新链表：\n\n```\nvoid transfer(Entry[] newTable) {  \n    Entry[] src = table;  \n    int newCapacity = newTable.length;  \n    for (int j = 0; j < src.length; j++) {  \n        Entry<K,V> e = src[j];  \n        if (e != null) {  \n            src[j] = null;  \n            do {  \n                Entry<K,V> next = e.next;  \n                int i = indexFor(e.hash, newCapacity);  \n                e.next = newTable[i];  \n                newTable[i] = e;  \n                e = next;  \n            } while (e != null);  \n        }  \n    }  \n}\n```\n关键代码如下：\n\n```\n        do {  \n        Entry<K,V> next = e.next;  \n        int i = indexFor(e.hash, newCapacity);  \n        e.next = newTable[i];  \n        newTable[i] = e;  \n        e = next;  \n        } while (e != null);  \n```\n循环操作将旧链表中的节点放入新链表，直到下一个节点next为null。  \n分别在单线程和多线程的环境下描述扩容过程。\n#### 单线程扩容\n假设hash数组的大小为2，负载因子为1，即超过1×2=2个元素时扩容，添加3个元素5、7、3，数组大小扩大为4，扩容过程如下：\n    \n![image](http://osuskkx7k.bkt.clouddn.com/h1.png?imageView2/2/w/900/h/450)\n\n原链表中3个元素，循环3次，具体如下：\n```\n第一次循环\ne = 3,next = 7\n3.next = tab[i] = null  (此时数组tab[i]为空)\ntab[i] = 3\ne = 7 \n\n第二次循环\ne = 7,next = 5\n7.next = tab[i] = 3\ntab[i] = 7\ne = 5\n\n第三次循环\ne = 5,next = null\n5.next = tab[i2] = null  (此时数组tab[i2]为空)\ntab[i2] = 5\ne = null \n\n(停止循环)\n\n```\n\n\n#### 多线程扩容\n为什么多线程环境下扩容会形成环形链表呢？  \n还是刚刚的例子，两个线程并发执行，线程1在进入do循环的第一行挂起，线程2继续执行\n\n```\n    do {  \n        Entry<K,V> next = e.next;  //线程1在此处挂起\n        int i = indexFor(e.hash, newCapacity);  \n        e.next = newTable[i];  \n        newTable[i] = e;  \n        e = next;  \n        } while (e != null);\n```\n由前面单线程的情况可知，线程2此时成功扩容，结果如下：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h2.png)\n\n线程1恢复执行，已知线程1的 e 指向了key(3)，而next指向了key(7)，扩容过程如下：\n\n```\n第一次循环\ne = 3,next = 7\n3.next = tab[i] = null  (此时数组tab[i]为空)\ntab[i] = 3\ne = 7 \n\n第二次循环\ne = 7,next = 3\n7.next = tab[i] = 3\ntab[i] = 7\ne = 3\n\n第三次循环\ne = 3,next = null\n3.next = tab[i] = 7\ntab[i] = 3\ne = null\n\n(停止循环)\n```\n第一次循环图：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/h3.png)  \n\n第二次循环图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h22.png)\n\n第三次循环图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h4.png)\n\n在停止循环后，问题就出现了，如图所示，key(3)和key(7)构成了环形链表。  \n**于是，当我们调用HashMap的get方法时，由于查找链表节点时无法退出，就会产生无限循环。**\n### 二、解决方法\n\n解决方法就是采用同步的数据结构，主要有以下三种：\n1. **Hashtable**\n2. **Collections.synchronizedMap()**\n3. **ConcurrentHashMap**\n\n#### Hashtable\nHashtable是线程安全的。\n\n```\npublic synchronized V put(K key, V value) {...}\n\npublic synchronized V get(Object key) {...}\n```\n可以看到，**Hashtable是通过在方法上加上synchronized关键字来实现同步功能的**。当一个线程访问时，其他线程都被阻塞住，这种方式效率很低，目前几乎不被使用。\n\n#### Collections.synchronizedMap()\n调用Collections的synchronizedMap()方法，传入一个Map，可以得到一个线程安全的SynchronizedMap。\n\n```\nprivate static class SynchronizedMap<K,V>\n        implements Map<K,V>, Serializable {\n        private final Map<K,V> m;     \n        final Object      mutex;        // Object on which to synchronize\n\n        SynchronizedMap(Map<K,V> m) {\n            this.m = Objects.requireNonNull(m);\n            mutex = this;\n        }\n        ....\n        public V get(Object key) {\n            synchronized (mutex) {return m.get(key);}\n        }\n\n        public V put(K key, V value) {\n            synchronized (mutex) {return m.put(key, value);}\n        }\n```\n可以看到，**它同步的原理同样也是使用了Synchronized关键字，不同的是Synchronized修饰代码块，并且将自身（this）作为了锁对象（mutex）。**\n\n\n#### ConcurrentHashMap\nConcurrentHashMap是JDK1.5之后引入的，是为了替代上面提到的二者。\nConcurrentHashMap是线程安全且高效的HashMap，它使用了多个锁来控制对hash数组不同部分的修改。  \n\n关于它的实现原理可以查看[ConcurrentHashMap](https://youngforzy.github.io/2017/11/10/ConcurrentHashMap在JDK1.8中的实现分析/)这篇文章中的分析。\n","source":"_posts/HashMap引发的线程安全问题.md","raw":"---\ntitle: HashMap引发的线程安全问题\ndate: 2017-11-3 17:48:18\ntags: [HashMap,线程安全]\ncategories: 技术\n---\n### 一、线程安全性\n我们知道，HashMap是非线程安全的，只能在单线程的情况下使用。那么为什么不能在并发的情况下使用呢？**因为在并发时，HashMap的扩容会产生错误而形成环形链表，导致读取数据时发生死循环**。\n\n回忆前面描述的扩容过程，调用了transfer()方法将旧链表转化为新链表：\n\n```\nvoid transfer(Entry[] newTable) {  \n    Entry[] src = table;  \n    int newCapacity = newTable.length;  \n    for (int j = 0; j < src.length; j++) {  \n        Entry<K,V> e = src[j];  \n        if (e != null) {  \n            src[j] = null;  \n            do {  \n                Entry<K,V> next = e.next;  \n                int i = indexFor(e.hash, newCapacity);  \n                e.next = newTable[i];  \n                newTable[i] = e;  \n                e = next;  \n            } while (e != null);  \n        }  \n    }  \n}\n```\n关键代码如下：\n\n```\n        do {  \n        Entry<K,V> next = e.next;  \n        int i = indexFor(e.hash, newCapacity);  \n        e.next = newTable[i];  \n        newTable[i] = e;  \n        e = next;  \n        } while (e != null);  \n```\n循环操作将旧链表中的节点放入新链表，直到下一个节点next为null。  \n分别在单线程和多线程的环境下描述扩容过程。\n#### 单线程扩容\n假设hash数组的大小为2，负载因子为1，即超过1×2=2个元素时扩容，添加3个元素5、7、3，数组大小扩大为4，扩容过程如下：\n    \n![image](http://osuskkx7k.bkt.clouddn.com/h1.png?imageView2/2/w/900/h/450)\n\n原链表中3个元素，循环3次，具体如下：\n```\n第一次循环\ne = 3,next = 7\n3.next = tab[i] = null  (此时数组tab[i]为空)\ntab[i] = 3\ne = 7 \n\n第二次循环\ne = 7,next = 5\n7.next = tab[i] = 3\ntab[i] = 7\ne = 5\n\n第三次循环\ne = 5,next = null\n5.next = tab[i2] = null  (此时数组tab[i2]为空)\ntab[i2] = 5\ne = null \n\n(停止循环)\n\n```\n\n\n#### 多线程扩容\n为什么多线程环境下扩容会形成环形链表呢？  \n还是刚刚的例子，两个线程并发执行，线程1在进入do循环的第一行挂起，线程2继续执行\n\n```\n    do {  \n        Entry<K,V> next = e.next;  //线程1在此处挂起\n        int i = indexFor(e.hash, newCapacity);  \n        e.next = newTable[i];  \n        newTable[i] = e;  \n        e = next;  \n        } while (e != null);\n```\n由前面单线程的情况可知，线程2此时成功扩容，结果如下：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h2.png)\n\n线程1恢复执行，已知线程1的 e 指向了key(3)，而next指向了key(7)，扩容过程如下：\n\n```\n第一次循环\ne = 3,next = 7\n3.next = tab[i] = null  (此时数组tab[i]为空)\ntab[i] = 3\ne = 7 \n\n第二次循环\ne = 7,next = 3\n7.next = tab[i] = 3\ntab[i] = 7\ne = 3\n\n第三次循环\ne = 3,next = null\n3.next = tab[i] = 7\ntab[i] = 3\ne = null\n\n(停止循环)\n```\n第一次循环图：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/h3.png)  \n\n第二次循环图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h22.png)\n\n第三次循环图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/h4.png)\n\n在停止循环后，问题就出现了，如图所示，key(3)和key(7)构成了环形链表。  \n**于是，当我们调用HashMap的get方法时，由于查找链表节点时无法退出，就会产生无限循环。**\n### 二、解决方法\n\n解决方法就是采用同步的数据结构，主要有以下三种：\n1. **Hashtable**\n2. **Collections.synchronizedMap()**\n3. **ConcurrentHashMap**\n\n#### Hashtable\nHashtable是线程安全的。\n\n```\npublic synchronized V put(K key, V value) {...}\n\npublic synchronized V get(Object key) {...}\n```\n可以看到，**Hashtable是通过在方法上加上synchronized关键字来实现同步功能的**。当一个线程访问时，其他线程都被阻塞住，这种方式效率很低，目前几乎不被使用。\n\n#### Collections.synchronizedMap()\n调用Collections的synchronizedMap()方法，传入一个Map，可以得到一个线程安全的SynchronizedMap。\n\n```\nprivate static class SynchronizedMap<K,V>\n        implements Map<K,V>, Serializable {\n        private final Map<K,V> m;     \n        final Object      mutex;        // Object on which to synchronize\n\n        SynchronizedMap(Map<K,V> m) {\n            this.m = Objects.requireNonNull(m);\n            mutex = this;\n        }\n        ....\n        public V get(Object key) {\n            synchronized (mutex) {return m.get(key);}\n        }\n\n        public V put(K key, V value) {\n            synchronized (mutex) {return m.put(key, value);}\n        }\n```\n可以看到，**它同步的原理同样也是使用了Synchronized关键字，不同的是Synchronized修饰代码块，并且将自身（this）作为了锁对象（mutex）。**\n\n\n#### ConcurrentHashMap\nConcurrentHashMap是JDK1.5之后引入的，是为了替代上面提到的二者。\nConcurrentHashMap是线程安全且高效的HashMap，它使用了多个锁来控制对hash数组不同部分的修改。  \n\n关于它的实现原理可以查看[ConcurrentHashMap](https://youngforzy.github.io/2017/11/10/ConcurrentHashMap在JDK1.8中的实现分析/)这篇文章中的分析。\n","slug":"HashMap引发的线程安全问题","published":1,"updated":"2018-04-11T10:02:31.866Z","_id":"cjfqzt249000950tc64nekcaa","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、线程安全性\"><a href=\"#一、线程安全性\" class=\"headerlink\" title=\"一、线程安全性\"></a>一、线程安全性</h3><p>我们知道，HashMap是非线程安全的，只能在单线程的情况下使用。那么为什么不能在并发的情况下使用呢？<strong>因为在并发时，HashMap的扩容会产生错误而形成环形链表，导致读取数据时发生死循环</strong>。</p>\n<p>回忆前面描述的扩容过程，调用了transfer()方法将旧链表转化为新链表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable) &#123;  </div><div class=\"line\">    Entry[] src = table;  </div><div class=\"line\">    int newCapacity = newTable.length;  </div><div class=\"line\">    for (int j = 0; j &lt; src.length; j++) &#123;  </div><div class=\"line\">        Entry&lt;K,V&gt; e = src[j];  </div><div class=\"line\">        if (e != null) &#123;  </div><div class=\"line\">            src[j] = null;  </div><div class=\"line\">            do &#123;  </div><div class=\"line\">                Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">                int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">                e.next = newTable[i];  </div><div class=\"line\">                newTable[i] = e;  </div><div class=\"line\">                e = next;  </div><div class=\"line\">            &#125; while (e != null);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关键代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">do &#123;  </div><div class=\"line\">Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">e.next = newTable[i];  </div><div class=\"line\">newTable[i] = e;  </div><div class=\"line\">e = next;  </div><div class=\"line\">&#125; while (e != null);</div></pre></td></tr></table></figure>\n<p>循环操作将旧链表中的节点放入新链表，直到下一个节点next为null。<br>分别在单线程和多线程的环境下描述扩容过程。</p>\n<h4 id=\"单线程扩容\"><a href=\"#单线程扩容\" class=\"headerlink\" title=\"单线程扩容\"></a>单线程扩容</h4><p>假设hash数组的大小为2，负载因子为1，即超过1×2=2个元素时扩容，添加3个元素5、7、3，数组大小扩大为4，扩容过程如下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h1.png?imageView2/2/w/900/h/450\" alt=\"image\"></p>\n<p>原链表中3个元素，循环3次，具体如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次循环</div><div class=\"line\">e = 3,next = 7</div><div class=\"line\">3.next = tab[i] = null  (此时数组tab[i]为空)</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = 7 </div><div class=\"line\"></div><div class=\"line\">第二次循环</div><div class=\"line\">e = 7,next = 5</div><div class=\"line\">7.next = tab[i] = 3</div><div class=\"line\">tab[i] = 7</div><div class=\"line\">e = 5</div><div class=\"line\"></div><div class=\"line\">第三次循环</div><div class=\"line\">e = 5,next = null</div><div class=\"line\">5.next = tab[i2] = null  (此时数组tab[i2]为空)</div><div class=\"line\">tab[i2] = 5</div><div class=\"line\">e = null </div><div class=\"line\"></div><div class=\"line\">(停止循环)</div></pre></td></tr></table></figure></p>\n<h4 id=\"多线程扩容\"><a href=\"#多线程扩容\" class=\"headerlink\" title=\"多线程扩容\"></a>多线程扩容</h4><p>为什么多线程环境下扩容会形成环形链表呢？<br>还是刚刚的例子，两个线程并发执行，线程1在进入do循环的第一行挂起，线程2继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">do &#123;  </div><div class=\"line\">    Entry&lt;K,V&gt; next = e.next;  //线程1在此处挂起</div><div class=\"line\">    int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">    e.next = newTable[i];  </div><div class=\"line\">    newTable[i] = e;  </div><div class=\"line\">    e = next;  </div><div class=\"line\">    &#125; while (e != null);</div></pre></td></tr></table></figure>\n<p>由前面单线程的情况可知，线程2此时成功扩容，结果如下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h2.png\" alt=\"image\"></p>\n<p>线程1恢复执行，已知线程1的 e 指向了key(3)，而next指向了key(7)，扩容过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次循环</div><div class=\"line\">e = 3,next = 7</div><div class=\"line\">3.next = tab[i] = null  (此时数组tab[i]为空)</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = 7 </div><div class=\"line\"></div><div class=\"line\">第二次循环</div><div class=\"line\">e = 7,next = 3</div><div class=\"line\">7.next = tab[i] = 3</div><div class=\"line\">tab[i] = 7</div><div class=\"line\">e = 3</div><div class=\"line\"></div><div class=\"line\">第三次循环</div><div class=\"line\">e = 3,next = null</div><div class=\"line\">3.next = tab[i] = 7</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = null</div><div class=\"line\"></div><div class=\"line\">(停止循环)</div></pre></td></tr></table></figure>\n<p>第一次循环图：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h3.png\" alt=\"image\">  </p>\n<p>第二次循环图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h22.png\" alt=\"image\"></p>\n<p>第三次循环图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h4.png\" alt=\"image\"></p>\n<p>在停止循环后，问题就出现了，如图所示，key(3)和key(7)构成了环形链表。<br><strong>于是，当我们调用HashMap的get方法时，由于查找链表节点时无法退出，就会产生无限循环。</strong></p>\n<h3 id=\"二、解决方法\"><a href=\"#二、解决方法\" class=\"headerlink\" title=\"二、解决方法\"></a>二、解决方法</h3><p>解决方法就是采用同步的数据结构，主要有以下三种：</p>\n<ol>\n<li><strong>Hashtable</strong></li>\n<li><strong>Collections.synchronizedMap()</strong></li>\n<li><strong>ConcurrentHashMap</strong></li>\n</ol>\n<h4 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h4><p>Hashtable是线程安全的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public synchronized V put(K key, V value) &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\">public synchronized V get(Object key) &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，<strong>Hashtable是通过在方法上加上synchronized关键字来实现同步功能的</strong>。当一个线程访问时，其他线程都被阻塞住，这种方式效率很低，目前几乎不被使用。</p>\n<h4 id=\"Collections-synchronizedMap\"><a href=\"#Collections-synchronizedMap\" class=\"headerlink\" title=\"Collections.synchronizedMap()\"></a>Collections.synchronizedMap()</h4><p>调用Collections的synchronizedMap()方法，传入一个Map，可以得到一个线程安全的SynchronizedMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static class SynchronizedMap&lt;K,V&gt;</div><div class=\"line\">        implements Map&lt;K,V&gt;, Serializable &#123;</div><div class=\"line\">        private final Map&lt;K,V&gt; m;     </div><div class=\"line\">        final Object      mutex;        // Object on which to synchronize</div><div class=\"line\"></div><div class=\"line\">        SynchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">            this.m = Objects.requireNonNull(m);</div><div class=\"line\">            mutex = this;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ....</div><div class=\"line\">        public V get(Object key) &#123;</div><div class=\"line\">            synchronized (mutex) &#123;return m.get(key);&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public V put(K key, V value) &#123;</div><div class=\"line\">            synchronized (mutex) &#123;return m.put(key, value);&#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，<strong>它同步的原理同样也是使用了Synchronized关键字，不同的是Synchronized修饰代码块，并且将自身（this）作为了锁对象（mutex）。</strong></p>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><p>ConcurrentHashMap是JDK1.5之后引入的，是为了替代上面提到的二者。<br>ConcurrentHashMap是线程安全且高效的HashMap，它使用了多个锁来控制对hash数组不同部分的修改。  </p>\n<p>关于它的实现原理可以查看<a href=\"https://youngforzy.github.io/2017/11/10/ConcurrentHashMap在JDK1.8中的实现分析/\" target=\"_blank\" rel=\"external\">ConcurrentHashMap</a>这篇文章中的分析。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、线程安全性\"><a href=\"#一、线程安全性\" class=\"headerlink\" title=\"一、线程安全性\"></a>一、线程安全性</h3><p>我们知道，HashMap是非线程安全的，只能在单线程的情况下使用。那么为什么不能在并发的情况下使用呢？<strong>因为在并发时，HashMap的扩容会产生错误而形成环形链表，导致读取数据时发生死循环</strong>。</p>\n<p>回忆前面描述的扩容过程，调用了transfer()方法将旧链表转化为新链表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable) &#123;  </div><div class=\"line\">    Entry[] src = table;  </div><div class=\"line\">    int newCapacity = newTable.length;  </div><div class=\"line\">    for (int j = 0; j &lt; src.length; j++) &#123;  </div><div class=\"line\">        Entry&lt;K,V&gt; e = src[j];  </div><div class=\"line\">        if (e != null) &#123;  </div><div class=\"line\">            src[j] = null;  </div><div class=\"line\">            do &#123;  </div><div class=\"line\">                Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">                int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">                e.next = newTable[i];  </div><div class=\"line\">                newTable[i] = e;  </div><div class=\"line\">                e = next;  </div><div class=\"line\">            &#125; while (e != null);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>关键代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">do &#123;  </div><div class=\"line\">Entry&lt;K,V&gt; next = e.next;  </div><div class=\"line\">int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">e.next = newTable[i];  </div><div class=\"line\">newTable[i] = e;  </div><div class=\"line\">e = next;  </div><div class=\"line\">&#125; while (e != null);</div></pre></td></tr></table></figure>\n<p>循环操作将旧链表中的节点放入新链表，直到下一个节点next为null。<br>分别在单线程和多线程的环境下描述扩容过程。</p>\n<h4 id=\"单线程扩容\"><a href=\"#单线程扩容\" class=\"headerlink\" title=\"单线程扩容\"></a>单线程扩容</h4><p>假设hash数组的大小为2，负载因子为1，即超过1×2=2个元素时扩容，添加3个元素5、7、3，数组大小扩大为4，扩容过程如下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h1.png?imageView2/2/w/900/h/450\" alt=\"image\"></p>\n<p>原链表中3个元素，循环3次，具体如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次循环</div><div class=\"line\">e = 3,next = 7</div><div class=\"line\">3.next = tab[i] = null  (此时数组tab[i]为空)</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = 7 </div><div class=\"line\"></div><div class=\"line\">第二次循环</div><div class=\"line\">e = 7,next = 5</div><div class=\"line\">7.next = tab[i] = 3</div><div class=\"line\">tab[i] = 7</div><div class=\"line\">e = 5</div><div class=\"line\"></div><div class=\"line\">第三次循环</div><div class=\"line\">e = 5,next = null</div><div class=\"line\">5.next = tab[i2] = null  (此时数组tab[i2]为空)</div><div class=\"line\">tab[i2] = 5</div><div class=\"line\">e = null </div><div class=\"line\"></div><div class=\"line\">(停止循环)</div></pre></td></tr></table></figure></p>\n<h4 id=\"多线程扩容\"><a href=\"#多线程扩容\" class=\"headerlink\" title=\"多线程扩容\"></a>多线程扩容</h4><p>为什么多线程环境下扩容会形成环形链表呢？<br>还是刚刚的例子，两个线程并发执行，线程1在进入do循环的第一行挂起，线程2继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">do &#123;  </div><div class=\"line\">    Entry&lt;K,V&gt; next = e.next;  //线程1在此处挂起</div><div class=\"line\">    int i = indexFor(e.hash, newCapacity);  </div><div class=\"line\">    e.next = newTable[i];  </div><div class=\"line\">    newTable[i] = e;  </div><div class=\"line\">    e = next;  </div><div class=\"line\">    &#125; while (e != null);</div></pre></td></tr></table></figure>\n<p>由前面单线程的情况可知，线程2此时成功扩容，结果如下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h2.png\" alt=\"image\"></p>\n<p>线程1恢复执行，已知线程1的 e 指向了key(3)，而next指向了key(7)，扩容过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次循环</div><div class=\"line\">e = 3,next = 7</div><div class=\"line\">3.next = tab[i] = null  (此时数组tab[i]为空)</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = 7 </div><div class=\"line\"></div><div class=\"line\">第二次循环</div><div class=\"line\">e = 7,next = 3</div><div class=\"line\">7.next = tab[i] = 3</div><div class=\"line\">tab[i] = 7</div><div class=\"line\">e = 3</div><div class=\"line\"></div><div class=\"line\">第三次循环</div><div class=\"line\">e = 3,next = null</div><div class=\"line\">3.next = tab[i] = 7</div><div class=\"line\">tab[i] = 3</div><div class=\"line\">e = null</div><div class=\"line\"></div><div class=\"line\">(停止循环)</div></pre></td></tr></table></figure>\n<p>第一次循环图：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h3.png\" alt=\"image\">  </p>\n<p>第二次循环图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h22.png\" alt=\"image\"></p>\n<p>第三次循环图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/h4.png\" alt=\"image\"></p>\n<p>在停止循环后，问题就出现了，如图所示，key(3)和key(7)构成了环形链表。<br><strong>于是，当我们调用HashMap的get方法时，由于查找链表节点时无法退出，就会产生无限循环。</strong></p>\n<h3 id=\"二、解决方法\"><a href=\"#二、解决方法\" class=\"headerlink\" title=\"二、解决方法\"></a>二、解决方法</h3><p>解决方法就是采用同步的数据结构，主要有以下三种：</p>\n<ol>\n<li><strong>Hashtable</strong></li>\n<li><strong>Collections.synchronizedMap()</strong></li>\n<li><strong>ConcurrentHashMap</strong></li>\n</ol>\n<h4 id=\"Hashtable\"><a href=\"#Hashtable\" class=\"headerlink\" title=\"Hashtable\"></a>Hashtable</h4><p>Hashtable是线程安全的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public synchronized V put(K key, V value) &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\">public synchronized V get(Object key) &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，<strong>Hashtable是通过在方法上加上synchronized关键字来实现同步功能的</strong>。当一个线程访问时，其他线程都被阻塞住，这种方式效率很低，目前几乎不被使用。</p>\n<h4 id=\"Collections-synchronizedMap\"><a href=\"#Collections-synchronizedMap\" class=\"headerlink\" title=\"Collections.synchronizedMap()\"></a>Collections.synchronizedMap()</h4><p>调用Collections的synchronizedMap()方法，传入一个Map，可以得到一个线程安全的SynchronizedMap。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static class SynchronizedMap&lt;K,V&gt;</div><div class=\"line\">        implements Map&lt;K,V&gt;, Serializable &#123;</div><div class=\"line\">        private final Map&lt;K,V&gt; m;     </div><div class=\"line\">        final Object      mutex;        // Object on which to synchronize</div><div class=\"line\"></div><div class=\"line\">        SynchronizedMap(Map&lt;K,V&gt; m) &#123;</div><div class=\"line\">            this.m = Objects.requireNonNull(m);</div><div class=\"line\">            mutex = this;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ....</div><div class=\"line\">        public V get(Object key) &#123;</div><div class=\"line\">            synchronized (mutex) &#123;return m.get(key);&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public V put(K key, V value) &#123;</div><div class=\"line\">            synchronized (mutex) &#123;return m.put(key, value);&#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，<strong>它同步的原理同样也是使用了Synchronized关键字，不同的是Synchronized修饰代码块，并且将自身（this）作为了锁对象（mutex）。</strong></p>\n<h4 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h4><p>ConcurrentHashMap是JDK1.5之后引入的，是为了替代上面提到的二者。<br>ConcurrentHashMap是线程安全且高效的HashMap，它使用了多个锁来控制对hash数组不同部分的修改。  </p>\n<p>关于它的实现原理可以查看<a href=\"https://youngforzy.github.io/2017/11/10/ConcurrentHashMap在JDK1.8中的实现分析/\" target=\"_blank\" rel=\"external\">ConcurrentHashMap</a>这篇文章中的分析。</p>\n"},{"title":"JVM之垃圾收集算法","date":"2017-10-21T11:48:18.000Z","_content":"### 一、对象的死亡判定\n\n**JVM垃圾回收针对哪些区域？回收的是什么？**  \n**答：**   \n**1. 主要针对Java堆。**  \n**2. 回收“死亡”的对象，即没有引用的对象。**\n\n\n那么如何判断对象是否“死亡”呢？  \n两种方法，引用计数法和可达性分析算法。\n\n#### 引用计数法\n**原理：给每个对象添加一个引用计数器。**\n\n- 每当有一个地方引用它，引用计数器+1；\n- 每当一个引用失效，引用计数器-1；\n- 当引用计数器为0时，表示该对象无引用，即可回收。\n\n缺点：无法解决对象之间循环引用的问题。\n\n```\nGCobject A = new GCobject();\nGCobject B = new GCobject();\nA.instance = B;\nB.instance = A;\n...\nA = null;\nB = null;\n\n```\n可以看到，A、B对象都为null，已经不可能再访问，但由于A、B都有字段引用着对方，引用计数器不为0，因此不会被回收。\n\n#### 可达性分析算法\n\n**原理：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Roots没有任何引用链相连时, 则说明此对象是不可用的。**  \n\n![image](http://osuskkx7k.bkt.clouddn.com/gc1.jpg.png)\n\n如图，Object5、Object6、Object7这三个对象就是不可用的。\n\n**“GC Roots”对象：**\n\n- 虚拟机栈(栈帧中的本地变量表)中引用的对象；\n- 方法区中类静态引用的对象；\n- 方法区中常量引用的对象；\n- 本地方法栈中JNI（Native方法）引用的对象；\n\n\n---\n\n然而，在可达性分析算法中不可达的对象，也并不是“非死不可”。**一个对象真正死亡，至少要经历两次标记过程：**\n1.  **第一次标记：** 对象无GC Roots的引用链，筛选是否执行finalize()方法：  \n\n- 对象没有覆盖finalize()或finalize()被JVM调用过，则不需要执行；\n- 若执行finalize()，则将对象放入F-Queue队列中，会由JVM自动建立的线程执行该方法；\n\n\n2. **第二次标记**：对F-Queue队列中的对象进行小规模的标记：\n- 对象在finalize()中拯救自己（重新与引用链相连），则不会回收；\n- 对象没有在finalize()中逃脱；\n\n**注：任何一个对象的finalize()方法只能被调用一次。**\n\n### 二、垃圾收集算法\n主要有4种垃圾收集算法。  \n**Java堆从GC的角度可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。**\n#### 标记-清除算法（老年代）\n它是最基础的收集算法，**算法分为标记和清除两个阶段：**\n1. 首先标记出所有可回收的对象\n2. 统一回收被标记对象\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.jpg)  \n\n不足：\n1. 效率问题，标记和清除的效率不高；\n2. 空间问题，标记清除后容易产生不连续的空间碎片（不利于大对象的内存分配）\n\n\n#### 复制算法（新生代）\n**算法的核心是将可用内存按容量划分为大小相等的两块，每次只用其中一块，当这一块的内存用完，就将还存活的对象复制到另外一块上面，然后把已使用过的内存空间一次清理掉。**（如图）\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg)\n\n优点：无内存碎片；  \n不足：可用内存减小；  \n\n针对以上不足，就有了**现代复制算法**：  \n不需完全按照1∶1的比例划分新生代空间，\n将**新生代划分为一块较大的Eden区和两块较小的Survivor区(from和to)**(HotSpot默认Eden和Survivor的大小为8∶1)，每次只用Eden和其中一块Survivor（from）。\n- 当发生MinorGC时, 将Eden和Survivor(from)中还存活着的对象一次性地拷贝到另外一块Survivor(to)上，最后清理掉Eden和刚才用过的Survivor(from)空间。\n- 当Survivor(to)空间不够用(不足以保存尚存活的对象)时, 需要依赖老年代进行空间分配担保机制，这部分内存直接进入老年代。\n\n**注：现代的商业虚拟机都是采用这种收集算法回收新生代。**\n\n\n#### 标记-整理算法（老年代）\n标记-清除算法会产生内存碎片问题，而复制算法需要有额外的内存担保空间，于是针对老年代的特点，又有了标记整理算法。  \n**标记整理算法：标记过程与标记-清除算法相同， 但后续步骤不再对可回收对象直接清理， 而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。** （如图）  \n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.jpg)\n\n\n\n#### 分代收集算法\n当前主流JVM垃圾收集都采用”分代收集”(Generational Collection)算法。 这种算法会根据对象存活周期的不同将内存划分为几块， 如JVM中的**新生代、老年代、永久代**。 这样就可以根据各年代特点分别采用最适当的GC算法：\n\n- **新生代**：每次垃圾收集都能发现大批对象已死， 只有少量存活。因此选用**复制算法**，只需要付出少量存活对象的复制成本就可以完成收集。\n- **老年代**：因为对象存活率高、没有额外空间对它进行分配担保，就必须采用“**标记—清理”或“标记—整理**”算法来进行回收，不必进行内存复制，且直接腾出空闲内存。\n\n\n\n\n\n","source":"_posts/JVM之垃圾收集算法.md","raw":"---\ntitle: JVM之垃圾收集算法\ndate: 2017-10-21 19:48:18\ntags: [JVM,垃圾收集算法]\ncategories: 技术\n---\n### 一、对象的死亡判定\n\n**JVM垃圾回收针对哪些区域？回收的是什么？**  \n**答：**   \n**1. 主要针对Java堆。**  \n**2. 回收“死亡”的对象，即没有引用的对象。**\n\n\n那么如何判断对象是否“死亡”呢？  \n两种方法，引用计数法和可达性分析算法。\n\n#### 引用计数法\n**原理：给每个对象添加一个引用计数器。**\n\n- 每当有一个地方引用它，引用计数器+1；\n- 每当一个引用失效，引用计数器-1；\n- 当引用计数器为0时，表示该对象无引用，即可回收。\n\n缺点：无法解决对象之间循环引用的问题。\n\n```\nGCobject A = new GCobject();\nGCobject B = new GCobject();\nA.instance = B;\nB.instance = A;\n...\nA = null;\nB = null;\n\n```\n可以看到，A、B对象都为null，已经不可能再访问，但由于A、B都有字段引用着对方，引用计数器不为0，因此不会被回收。\n\n#### 可达性分析算法\n\n**原理：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Roots没有任何引用链相连时, 则说明此对象是不可用的。**  \n\n![image](http://osuskkx7k.bkt.clouddn.com/gc1.jpg.png)\n\n如图，Object5、Object6、Object7这三个对象就是不可用的。\n\n**“GC Roots”对象：**\n\n- 虚拟机栈(栈帧中的本地变量表)中引用的对象；\n- 方法区中类静态引用的对象；\n- 方法区中常量引用的对象；\n- 本地方法栈中JNI（Native方法）引用的对象；\n\n\n---\n\n然而，在可达性分析算法中不可达的对象，也并不是“非死不可”。**一个对象真正死亡，至少要经历两次标记过程：**\n1.  **第一次标记：** 对象无GC Roots的引用链，筛选是否执行finalize()方法：  \n\n- 对象没有覆盖finalize()或finalize()被JVM调用过，则不需要执行；\n- 若执行finalize()，则将对象放入F-Queue队列中，会由JVM自动建立的线程执行该方法；\n\n\n2. **第二次标记**：对F-Queue队列中的对象进行小规模的标记：\n- 对象在finalize()中拯救自己（重新与引用链相连），则不会回收；\n- 对象没有在finalize()中逃脱；\n\n**注：任何一个对象的finalize()方法只能被调用一次。**\n\n### 二、垃圾收集算法\n主要有4种垃圾收集算法。  \n**Java堆从GC的角度可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。**\n#### 标记-清除算法（老年代）\n它是最基础的收集算法，**算法分为标记和清除两个阶段：**\n1. 首先标记出所有可回收的对象\n2. 统一回收被标记对象\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.jpg)  \n\n不足：\n1. 效率问题，标记和清除的效率不高；\n2. 空间问题，标记清除后容易产生不连续的空间碎片（不利于大对象的内存分配）\n\n\n#### 复制算法（新生代）\n**算法的核心是将可用内存按容量划分为大小相等的两块，每次只用其中一块，当这一块的内存用完，就将还存活的对象复制到另外一块上面，然后把已使用过的内存空间一次清理掉。**（如图）\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg)\n\n优点：无内存碎片；  \n不足：可用内存减小；  \n\n针对以上不足，就有了**现代复制算法**：  \n不需完全按照1∶1的比例划分新生代空间，\n将**新生代划分为一块较大的Eden区和两块较小的Survivor区(from和to)**(HotSpot默认Eden和Survivor的大小为8∶1)，每次只用Eden和其中一块Survivor（from）。\n- 当发生MinorGC时, 将Eden和Survivor(from)中还存活着的对象一次性地拷贝到另外一块Survivor(to)上，最后清理掉Eden和刚才用过的Survivor(from)空间。\n- 当Survivor(to)空间不够用(不足以保存尚存活的对象)时, 需要依赖老年代进行空间分配担保机制，这部分内存直接进入老年代。\n\n**注：现代的商业虚拟机都是采用这种收集算法回收新生代。**\n\n\n#### 标记-整理算法（老年代）\n标记-清除算法会产生内存碎片问题，而复制算法需要有额外的内存担保空间，于是针对老年代的特点，又有了标记整理算法。  \n**标记整理算法：标记过程与标记-清除算法相同， 但后续步骤不再对可回收对象直接清理， 而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。** （如图）  \n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.jpg)\n\n\n\n#### 分代收集算法\n当前主流JVM垃圾收集都采用”分代收集”(Generational Collection)算法。 这种算法会根据对象存活周期的不同将内存划分为几块， 如JVM中的**新生代、老年代、永久代**。 这样就可以根据各年代特点分别采用最适当的GC算法：\n\n- **新生代**：每次垃圾收集都能发现大批对象已死， 只有少量存活。因此选用**复制算法**，只需要付出少量存活对象的复制成本就可以完成收集。\n- **老年代**：因为对象存活率高、没有额外空间对它进行分配担保，就必须采用“**标记—清理”或“标记—整理**”算法来进行回收，不必进行内存复制，且直接腾出空闲内存。\n\n\n\n\n\n","slug":"JVM之垃圾收集算法","published":1,"updated":"2018-04-11T10:02:31.866Z","_id":"cjfqzt249000b50tcedac6agu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、对象的死亡判定\"><a href=\"#一、对象的死亡判定\" class=\"headerlink\" title=\"一、对象的死亡判定\"></a>一、对象的死亡判定</h3><p><strong>JVM垃圾回收针对哪些区域？回收的是什么？</strong><br><strong>答：</strong><br><strong>1. 主要针对Java堆。</strong><br><strong>2. 回收“死亡”的对象，即没有引用的对象。</strong></p>\n<p>那么如何判断对象是否“死亡”呢？<br>两种方法，引用计数法和可达性分析算法。</p>\n<h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><p><strong>原理：给每个对象添加一个引用计数器。</strong></p>\n<ul>\n<li>每当有一个地方引用它，引用计数器+1；</li>\n<li>每当一个引用失效，引用计数器-1；</li>\n<li>当引用计数器为0时，表示该对象无引用，即可回收。</li>\n</ul>\n<p>缺点：无法解决对象之间循环引用的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GCobject A = new GCobject();</div><div class=\"line\">GCobject B = new GCobject();</div><div class=\"line\">A.instance = B;</div><div class=\"line\">B.instance = A;</div><div class=\"line\">...</div><div class=\"line\">A = null;</div><div class=\"line\">B = null;</div></pre></td></tr></table></figure>\n<p>可以看到，A、B对象都为null，已经不可能再访问，但由于A、B都有字段引用着对方，引用计数器不为0，因此不会被回收。</p>\n<h4 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h4><p><strong>原理：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Roots没有任何引用链相连时, 则说明此对象是不可用的。</strong>  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/gc1.jpg.png\" alt=\"image\"></p>\n<p>如图，Object5、Object6、Object7这三个对象就是不可用的。</p>\n<p><strong>“GC Roots”对象：</strong></p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象；</li>\n<li>方法区中类静态引用的对象；</li>\n<li>方法区中常量引用的对象；</li>\n<li>本地方法栈中JNI（Native方法）引用的对象；</li>\n</ul>\n<hr>\n<p>然而，在可达性分析算法中不可达的对象，也并不是“非死不可”。<strong>一个对象真正死亡，至少要经历两次标记过程：</strong></p>\n<ol>\n<li><strong>第一次标记：</strong> 对象无GC Roots的引用链，筛选是否执行finalize()方法：  </li>\n</ol>\n<ul>\n<li>对象没有覆盖finalize()或finalize()被JVM调用过，则不需要执行；</li>\n<li>若执行finalize()，则将对象放入F-Queue队列中，会由JVM自动建立的线程执行该方法；</li>\n</ul>\n<ol>\n<li><strong>第二次标记</strong>：对F-Queue队列中的对象进行小规模的标记：</li>\n</ol>\n<ul>\n<li>对象在finalize()中拯救自己（重新与引用链相连），则不会回收；</li>\n<li>对象没有在finalize()中逃脱；</li>\n</ul>\n<p><strong>注：任何一个对象的finalize()方法只能被调用一次。</strong></p>\n<h3 id=\"二、垃圾收集算法\"><a href=\"#二、垃圾收集算法\" class=\"headerlink\" title=\"二、垃圾收集算法\"></a>二、垃圾收集算法</h3><p>主要有4种垃圾收集算法。<br><strong>Java堆从GC的角度可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。</strong></p>\n<h4 id=\"标记-清除算法（老年代）\"><a href=\"#标记-清除算法（老年代）\" class=\"headerlink\" title=\"标记-清除算法（老年代）\"></a>标记-清除算法（老年代）</h4><p>它是最基础的收集算法，<strong>算法分为标记和清除两个阶段：</strong></p>\n<ol>\n<li>首先标记出所有可回收的对象</li>\n<li>统一回收被标记对象</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.jpg\" alt=\"image\">  </p>\n<p>不足：</p>\n<ol>\n<li>效率问题，标记和清除的效率不高；</li>\n<li>空间问题，标记清除后容易产生不连续的空间碎片（不利于大对象的内存分配）</li>\n</ol>\n<h4 id=\"复制算法（新生代）\"><a href=\"#复制算法（新生代）\" class=\"headerlink\" title=\"复制算法（新生代）\"></a>复制算法（新生代）</h4><p><strong>算法的核心是将可用内存按容量划分为大小相等的两块，每次只用其中一块，当这一块的内存用完，就将还存活的对象复制到另外一块上面，然后把已使用过的内存空间一次清理掉。</strong>（如图）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg\" alt=\"image\"></p>\n<p>优点：无内存碎片；<br>不足：可用内存减小；  </p>\n<p>针对以上不足，就有了<strong>现代复制算法</strong>：<br>不需完全按照1∶1的比例划分新生代空间，<br>将<strong>新生代划分为一块较大的Eden区和两块较小的Survivor区(from和to)</strong>(HotSpot默认Eden和Survivor的大小为8∶1)，每次只用Eden和其中一块Survivor（from）。</p>\n<ul>\n<li>当发生MinorGC时, 将Eden和Survivor(from)中还存活着的对象一次性地拷贝到另外一块Survivor(to)上，最后清理掉Eden和刚才用过的Survivor(from)空间。</li>\n<li>当Survivor(to)空间不够用(不足以保存尚存活的对象)时, 需要依赖老年代进行空间分配担保机制，这部分内存直接进入老年代。</li>\n</ul>\n<p><strong>注：现代的商业虚拟机都是采用这种收集算法回收新生代。</strong></p>\n<h4 id=\"标记-整理算法（老年代）\"><a href=\"#标记-整理算法（老年代）\" class=\"headerlink\" title=\"标记-整理算法（老年代）\"></a>标记-整理算法（老年代）</h4><p>标记-清除算法会产生内存碎片问题，而复制算法需要有额外的内存担保空间，于是针对老年代的特点，又有了标记整理算法。<br><strong>标记整理算法：标记过程与标记-清除算法相同， 但后续步骤不再对可回收对象直接清理， 而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。</strong> （如图）  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.jpg\" alt=\"image\"></p>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>当前主流JVM垃圾收集都采用”分代收集”(Generational Collection)算法。 这种算法会根据对象存活周期的不同将内存划分为几块， 如JVM中的<strong>新生代、老年代、永久代</strong>。 这样就可以根据各年代特点分别采用最适当的GC算法：</p>\n<ul>\n<li><strong>新生代</strong>：每次垃圾收集都能发现大批对象已死， 只有少量存活。因此选用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集。</li>\n<li><strong>老年代</strong>：因为对象存活率高、没有额外空间对它进行分配担保，就必须采用“<strong>标记—清理”或“标记—整理</strong>”算法来进行回收，不必进行内存复制，且直接腾出空闲内存。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、对象的死亡判定\"><a href=\"#一、对象的死亡判定\" class=\"headerlink\" title=\"一、对象的死亡判定\"></a>一、对象的死亡判定</h3><p><strong>JVM垃圾回收针对哪些区域？回收的是什么？</strong><br><strong>答：</strong><br><strong>1. 主要针对Java堆。</strong><br><strong>2. 回收“死亡”的对象，即没有引用的对象。</strong></p>\n<p>那么如何判断对象是否“死亡”呢？<br>两种方法，引用计数法和可达性分析算法。</p>\n<h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><p><strong>原理：给每个对象添加一个引用计数器。</strong></p>\n<ul>\n<li>每当有一个地方引用它，引用计数器+1；</li>\n<li>每当一个引用失效，引用计数器-1；</li>\n<li>当引用计数器为0时，表示该对象无引用，即可回收。</li>\n</ul>\n<p>缺点：无法解决对象之间循环引用的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">GCobject A = new GCobject();</div><div class=\"line\">GCobject B = new GCobject();</div><div class=\"line\">A.instance = B;</div><div class=\"line\">B.instance = A;</div><div class=\"line\">...</div><div class=\"line\">A = null;</div><div class=\"line\">B = null;</div></pre></td></tr></table></figure>\n<p>可以看到，A、B对象都为null，已经不可能再访问，但由于A、B都有字段引用着对方，引用计数器不为0，因此不会被回收。</p>\n<h4 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h4><p><strong>原理：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为“引用链”，当一个对象到 GC Roots没有任何引用链相连时, 则说明此对象是不可用的。</strong>  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/gc1.jpg.png\" alt=\"image\"></p>\n<p>如图，Object5、Object6、Object7这三个对象就是不可用的。</p>\n<p><strong>“GC Roots”对象：</strong></p>\n<ul>\n<li>虚拟机栈(栈帧中的本地变量表)中引用的对象；</li>\n<li>方法区中类静态引用的对象；</li>\n<li>方法区中常量引用的对象；</li>\n<li>本地方法栈中JNI（Native方法）引用的对象；</li>\n</ul>\n<hr>\n<p>然而，在可达性分析算法中不可达的对象，也并不是“非死不可”。<strong>一个对象真正死亡，至少要经历两次标记过程：</strong></p>\n<ol>\n<li><strong>第一次标记：</strong> 对象无GC Roots的引用链，筛选是否执行finalize()方法：  </li>\n</ol>\n<ul>\n<li>对象没有覆盖finalize()或finalize()被JVM调用过，则不需要执行；</li>\n<li>若执行finalize()，则将对象放入F-Queue队列中，会由JVM自动建立的线程执行该方法；</li>\n</ul>\n<ol>\n<li><strong>第二次标记</strong>：对F-Queue队列中的对象进行小规模的标记：</li>\n</ol>\n<ul>\n<li>对象在finalize()中拯救自己（重新与引用链相连），则不会回收；</li>\n<li>对象没有在finalize()中逃脱；</li>\n</ul>\n<p><strong>注：任何一个对象的finalize()方法只能被调用一次。</strong></p>\n<h3 id=\"二、垃圾收集算法\"><a href=\"#二、垃圾收集算法\" class=\"headerlink\" title=\"二、垃圾收集算法\"></a>二、垃圾收集算法</h3><p>主要有4种垃圾收集算法。<br><strong>Java堆从GC的角度可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。</strong></p>\n<h4 id=\"标记-清除算法（老年代）\"><a href=\"#标记-清除算法（老年代）\" class=\"headerlink\" title=\"标记-清除算法（老年代）\"></a>标记-清除算法（老年代）</h4><p>它是最基础的收集算法，<strong>算法分为标记和清除两个阶段：</strong></p>\n<ol>\n<li>首先标记出所有可回收的对象</li>\n<li>统一回收被标记对象</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.jpg\" alt=\"image\">  </p>\n<p>不足：</p>\n<ol>\n<li>效率问题，标记和清除的效率不高；</li>\n<li>空间问题，标记清除后容易产生不连续的空间碎片（不利于大对象的内存分配）</li>\n</ol>\n<h4 id=\"复制算法（新生代）\"><a href=\"#复制算法（新生代）\" class=\"headerlink\" title=\"复制算法（新生代）\"></a>复制算法（新生代）</h4><p><strong>算法的核心是将可用内存按容量划分为大小相等的两块，每次只用其中一块，当这一块的内存用完，就将还存活的对象复制到另外一块上面，然后把已使用过的内存空间一次清理掉。</strong>（如图）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg\" alt=\"image\"></p>\n<p>优点：无内存碎片；<br>不足：可用内存减小；  </p>\n<p>针对以上不足，就有了<strong>现代复制算法</strong>：<br>不需完全按照1∶1的比例划分新生代空间，<br>将<strong>新生代划分为一块较大的Eden区和两块较小的Survivor区(from和to)</strong>(HotSpot默认Eden和Survivor的大小为8∶1)，每次只用Eden和其中一块Survivor（from）。</p>\n<ul>\n<li>当发生MinorGC时, 将Eden和Survivor(from)中还存活着的对象一次性地拷贝到另外一块Survivor(to)上，最后清理掉Eden和刚才用过的Survivor(from)空间。</li>\n<li>当Survivor(to)空间不够用(不足以保存尚存活的对象)时, 需要依赖老年代进行空间分配担保机制，这部分内存直接进入老年代。</li>\n</ul>\n<p><strong>注：现代的商业虚拟机都是采用这种收集算法回收新生代。</strong></p>\n<h4 id=\"标记-整理算法（老年代）\"><a href=\"#标记-整理算法（老年代）\" class=\"headerlink\" title=\"标记-整理算法（老年代）\"></a>标记-整理算法（老年代）</h4><p>标记-清除算法会产生内存碎片问题，而复制算法需要有额外的内存担保空间，于是针对老年代的特点，又有了标记整理算法。<br><strong>标记整理算法：标记过程与标记-清除算法相同， 但后续步骤不再对可回收对象直接清理， 而是让所有存活的对象都向一端移动，然后清理掉端边界以外的内存。</strong> （如图）  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.jpg\" alt=\"image\"></p>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>当前主流JVM垃圾收集都采用”分代收集”(Generational Collection)算法。 这种算法会根据对象存活周期的不同将内存划分为几块， 如JVM中的<strong>新生代、老年代、永久代</strong>。 这样就可以根据各年代特点分别采用最适当的GC算法：</p>\n<ul>\n<li><strong>新生代</strong>：每次垃圾收集都能发现大批对象已死， 只有少量存活。因此选用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集。</li>\n<li><strong>老年代</strong>：因为对象存活率高、没有额外空间对它进行分配担保，就必须采用“<strong>标记—清理”或“标记—整理</strong>”算法来进行回收，不必进行内存复制，且直接腾出空闲内存。</li>\n</ul>\n"},{"title":"JVM之垃圾收集器","date":"2017-10-23T11:28:13.000Z","_content":"### 一、垃圾收集器概述\n\n**垃圾收集器是内存垃圾回收算法的具体实现。**  \nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此出现了7种收集器：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1。  \n它们以组合的形式配合工作来完成不同分代的垃圾收集工作。\n\n**常用组合**：\n1. Serial/Serial Old\n2. ParNew/Serial Old\n3. ParNew/CMS\n4. Parallel Scavenge/Parallel Old\n5. G1\n\n![image](http://osuskkx7k.bkt.clouddn.com/JVMtool2.png)\n\n#### Minor GC和Full GC\nMinor GC（新生代GC）：发生在新生代的GC动作，频率高，回收速度块。\n\nFull GC（老年代GC）：发生在老年代的GC动作，老年代满了后才进行，一般伴随至少一次Minor GC，频率低，回收速度慢。\n\n#### 垃圾收集器种类\n目前的收集器主要有以下三种：  \n\n**串行收集器：** 只有一条垃圾收集线程工作  \n\n**并行收集器：** 多条垃圾收集线程并行工作，用户线程等待\n\n\n**并发收集器：** 垃圾收集线程与用户线程同时执行（不一定并行，可能交替执行）\n\n### 二、垃圾收集器详述\n\n#### 新生代收集器（3种）\n##### Serial 收集器（串行）\nSerial收集器是一个单线程的收集器。  \n“单线程”：不仅只是有一条收集线程，而且必须暂停用户工作线程。 \n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/seria.png)\n\n**特点：** 单线程，无线程切换，简单高效，（管理内存小，停顿可以接受）  \n**缺点：**  暂停工作线程    \n**应用场景：** 适用于运行在Client模式下的虚拟机\n\n\n##### ParNew 收集器（并行）\nParNew收集器是Serial收集器的多线程版本。\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/ParNew.png)\n\n**特点：** 多线程，除Serial外唯一能和CMS收集器配合  \n**缺点：**  暂停工作线程，单线程下不如Serial    \n**应用场景：** 适用于运行在Server模式下的虚拟机\n\n##### Parallel Scavenge 收集器（并行）\n\nParallel Scavenge收集器被称为“吞吐量优先”收集器。\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/parallel%20scavenge.png)\n\n**特点：** \n- **可控制吞吐量。**  \n吞吐量 = 用户代码时间/（用户代码时间+垃圾收集时间）  \n吞吐量越高，表示越高效地利用CPU，适合后台运算任务。  \n- **GC 自适应调节策略**  \n  JVM可以根据当前系统的运行情况自适应调节参数，以提供最合适的停顿时间和最大的吞吐量。\n\n**缺点：** 相比停顿时间更注重吞吐量    \n**应用场景：** 主要用于后台计算，不需要与用户进行太多交互，对暂停时间没有特别高的要求等场景，如批量处理；\n\n#### 老年代收集器（3种）\n\n##### Serial Old 收集器（串行）\nSerial Old是Serial的老年代版本，同样是一个单线程收集器。  \n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/seria.png)\n\n**特点：** 单线程，“标记-整理”算法  \n**缺点：**  暂停工作线程    \n**应用场景：** 适用于运行在Client模式下的虚拟机\n\n##### Parallel Old 收集器（并行）\n\nParallel Old是Parallel Scavenge收集器的老年代版本，多线程收集器。（JDK1.6之后出现）\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/parallel%20old.png)\n\n**特点：** 多线程，“标记-整理”算法，唯一能和Parallel Scavenge收集器配合  \n**缺点：**  暂停工作线程   \n**应用场景：** 适用于注重吞吐量及CPU资源敏感的场合\n\n##### CMS 收集器（并发）\n\n**CMS（Concurrent Mark Sweep）是一种以获取最短回收停顿时间为目标的收集器。  \n第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。**  \n\n工作过程分为**4个步骤**：  \n1. **初始标记**：标记“GC-Roots”关联的对象（Stop the World）\n2. **并发标记**： 进行GC-Roots Tracing的过程，在刚才产生的集合中标记出存活对象；\n3. **重新标记**：修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录（Stop the World）\n4. **并发清除**：回收所有垃圾对象\n\n所以，**在初始标记和重新标记阶段，还是只有垃圾收集线程工作；并发标记和并发清除阶段是和用户线程并发执行的**。\n\n![image](http://osuskkx7k.bkt.clouddn.com/CMS.png)\n\n**特点：** 多线程并发执行，停顿时间短  \n**缺点：**  \n- 对CPU资源十分敏感\n- 无法处理浮动垃圾\n- 产生大量空间碎片（由于是“标记-清除”算法）  \n\n**应用场景：** 适用于大型网站或B/S的服务端，注重响应速度和用户体验。\n\n#### 通用收集器\n##### G1 收集器（并发）\nG1是目前最前沿的收集器，可处理整个GC堆，JDK1.7之后出现。  \n\n**G1是如何处理整个堆**？  \nG1将整个堆划分为多个大小相等的独立区域Region（不再是新生代老年代），然后跟踪各个Region获得其垃圾收集价值大小，并在后台维护一个优先列表，根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）。这个过程保证了在有限的时间内可以回收更多的垃圾。\n\n\n工作过程分为**4个步骤**： \n1. **初始标记**：标记“GC-Roots”关联的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象\n2. **并发标记**：根据GC-Roots进行可达性分析，找出存活对象\n3. **最终标记**：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录\n4. **筛选回收**：根据各个Region的价值回收\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/G1.png)\n\n**特点：** \n- 并行且并发  \n- 独立处理整个GC堆，不需要配合其他收集器\n- 可预测停顿时间\n- 不产生空间碎片\n\n\n**应用场景：** 面向服务器，适用于多CPU及大容量内存的机器。\n\n\n### 三、常见的参数配置\n\n- **Xms**：堆的最小值（初始）\n- **Xmx**：堆的最大值  \n（Xms、Xmx二者一样时，可避免自动扩展）\n- **Xmn**：堆中新生代的大小\n- **Xss**：每个线程的堆栈大小\n- **XX:PermSize**：永久代的大小（初始）\n- **XX:MaxPermSize**：永久代的最大值\n- **XX:NewRatio**：年轻代（包括Eden和两个Survivor区）与年老代的比值，设置为3，则年轻代与年老代所占比值为1：3，年轻代占整个堆栈的1/4\n\n- **XX:SurvivorRatio**：年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6\n\n\n\n\n\n","source":"_posts/JVM之垃圾收集器.md","raw":"---\ntitle: JVM之垃圾收集器\ndate: 2017-10-23 19:28:13\ntags: [JVM,垃圾收集器]\ncategories: 技术\n---\n### 一、垃圾收集器概述\n\n**垃圾收集器是内存垃圾回收算法的具体实现。**  \nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此出现了7种收集器：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1。  \n它们以组合的形式配合工作来完成不同分代的垃圾收集工作。\n\n**常用组合**：\n1. Serial/Serial Old\n2. ParNew/Serial Old\n3. ParNew/CMS\n4. Parallel Scavenge/Parallel Old\n5. G1\n\n![image](http://osuskkx7k.bkt.clouddn.com/JVMtool2.png)\n\n#### Minor GC和Full GC\nMinor GC（新生代GC）：发生在新生代的GC动作，频率高，回收速度块。\n\nFull GC（老年代GC）：发生在老年代的GC动作，老年代满了后才进行，一般伴随至少一次Minor GC，频率低，回收速度慢。\n\n#### 垃圾收集器种类\n目前的收集器主要有以下三种：  \n\n**串行收集器：** 只有一条垃圾收集线程工作  \n\n**并行收集器：** 多条垃圾收集线程并行工作，用户线程等待\n\n\n**并发收集器：** 垃圾收集线程与用户线程同时执行（不一定并行，可能交替执行）\n\n### 二、垃圾收集器详述\n\n#### 新生代收集器（3种）\n##### Serial 收集器（串行）\nSerial收集器是一个单线程的收集器。  \n“单线程”：不仅只是有一条收集线程，而且必须暂停用户工作线程。 \n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/seria.png)\n\n**特点：** 单线程，无线程切换，简单高效，（管理内存小，停顿可以接受）  \n**缺点：**  暂停工作线程    \n**应用场景：** 适用于运行在Client模式下的虚拟机\n\n\n##### ParNew 收集器（并行）\nParNew收集器是Serial收集器的多线程版本。\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/ParNew.png)\n\n**特点：** 多线程，除Serial外唯一能和CMS收集器配合  \n**缺点：**  暂停工作线程，单线程下不如Serial    \n**应用场景：** 适用于运行在Server模式下的虚拟机\n\n##### Parallel Scavenge 收集器（并行）\n\nParallel Scavenge收集器被称为“吞吐量优先”收集器。\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/parallel%20scavenge.png)\n\n**特点：** \n- **可控制吞吐量。**  \n吞吐量 = 用户代码时间/（用户代码时间+垃圾收集时间）  \n吞吐量越高，表示越高效地利用CPU，适合后台运算任务。  \n- **GC 自适应调节策略**  \n  JVM可以根据当前系统的运行情况自适应调节参数，以提供最合适的停顿时间和最大的吞吐量。\n\n**缺点：** 相比停顿时间更注重吞吐量    \n**应用场景：** 主要用于后台计算，不需要与用户进行太多交互，对暂停时间没有特别高的要求等场景，如批量处理；\n\n#### 老年代收集器（3种）\n\n##### Serial Old 收集器（串行）\nSerial Old是Serial的老年代版本，同样是一个单线程收集器。  \n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/seria.png)\n\n**特点：** 单线程，“标记-整理”算法  \n**缺点：**  暂停工作线程    \n**应用场景：** 适用于运行在Client模式下的虚拟机\n\n##### Parallel Old 收集器（并行）\n\nParallel Old是Parallel Scavenge收集器的老年代版本，多线程收集器。（JDK1.6之后出现）\n\n工作过程：  \n\n![image](http://osuskkx7k.bkt.clouddn.com/parallel%20old.png)\n\n**特点：** 多线程，“标记-整理”算法，唯一能和Parallel Scavenge收集器配合  \n**缺点：**  暂停工作线程   \n**应用场景：** 适用于注重吞吐量及CPU资源敏感的场合\n\n##### CMS 收集器（并发）\n\n**CMS（Concurrent Mark Sweep）是一种以获取最短回收停顿时间为目标的收集器。  \n第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。**  \n\n工作过程分为**4个步骤**：  \n1. **初始标记**：标记“GC-Roots”关联的对象（Stop the World）\n2. **并发标记**： 进行GC-Roots Tracing的过程，在刚才产生的集合中标记出存活对象；\n3. **重新标记**：修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录（Stop the World）\n4. **并发清除**：回收所有垃圾对象\n\n所以，**在初始标记和重新标记阶段，还是只有垃圾收集线程工作；并发标记和并发清除阶段是和用户线程并发执行的**。\n\n![image](http://osuskkx7k.bkt.clouddn.com/CMS.png)\n\n**特点：** 多线程并发执行，停顿时间短  \n**缺点：**  \n- 对CPU资源十分敏感\n- 无法处理浮动垃圾\n- 产生大量空间碎片（由于是“标记-清除”算法）  \n\n**应用场景：** 适用于大型网站或B/S的服务端，注重响应速度和用户体验。\n\n#### 通用收集器\n##### G1 收集器（并发）\nG1是目前最前沿的收集器，可处理整个GC堆，JDK1.7之后出现。  \n\n**G1是如何处理整个堆**？  \nG1将整个堆划分为多个大小相等的独立区域Region（不再是新生代老年代），然后跟踪各个Region获得其垃圾收集价值大小，并在后台维护一个优先列表，根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）。这个过程保证了在有限的时间内可以回收更多的垃圾。\n\n\n工作过程分为**4个步骤**： \n1. **初始标记**：标记“GC-Roots”关联的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象\n2. **并发标记**：根据GC-Roots进行可达性分析，找出存活对象\n3. **最终标记**：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录\n4. **筛选回收**：根据各个Region的价值回收\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/G1.png)\n\n**特点：** \n- 并行且并发  \n- 独立处理整个GC堆，不需要配合其他收集器\n- 可预测停顿时间\n- 不产生空间碎片\n\n\n**应用场景：** 面向服务器，适用于多CPU及大容量内存的机器。\n\n\n### 三、常见的参数配置\n\n- **Xms**：堆的最小值（初始）\n- **Xmx**：堆的最大值  \n（Xms、Xmx二者一样时，可避免自动扩展）\n- **Xmn**：堆中新生代的大小\n- **Xss**：每个线程的堆栈大小\n- **XX:PermSize**：永久代的大小（初始）\n- **XX:MaxPermSize**：永久代的最大值\n- **XX:NewRatio**：年轻代（包括Eden和两个Survivor区）与年老代的比值，设置为3，则年轻代与年老代所占比值为1：3，年轻代占整个堆栈的1/4\n\n- **XX:SurvivorRatio**：年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6\n\n\n\n\n\n","slug":"JVM之垃圾收集器","published":1,"updated":"2018-04-11T10:02:31.866Z","_id":"cjfqzt249000f50tcw06tofdd","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、垃圾收集器概述\"><a href=\"#一、垃圾收集器概述\" class=\"headerlink\" title=\"一、垃圾收集器概述\"></a>一、垃圾收集器概述</h3><p><strong>垃圾收集器是内存垃圾回收算法的具体实现。</strong><br>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此出现了7种收集器：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1。<br>它们以组合的形式配合工作来完成不同分代的垃圾收集工作。</p>\n<p><strong>常用组合</strong>：</p>\n<ol>\n<li>Serial/Serial Old</li>\n<li>ParNew/Serial Old</li>\n<li>ParNew/CMS</li>\n<li>Parallel Scavenge/Parallel Old</li>\n<li>G1</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/JVMtool2.png\" alt=\"image\"></p>\n<h4 id=\"Minor-GC和Full-GC\"><a href=\"#Minor-GC和Full-GC\" class=\"headerlink\" title=\"Minor GC和Full GC\"></a>Minor GC和Full GC</h4><p>Minor GC（新生代GC）：发生在新生代的GC动作，频率高，回收速度块。</p>\n<p>Full GC（老年代GC）：发生在老年代的GC动作，老年代满了后才进行，一般伴随至少一次Minor GC，频率低，回收速度慢。</p>\n<h4 id=\"垃圾收集器种类\"><a href=\"#垃圾收集器种类\" class=\"headerlink\" title=\"垃圾收集器种类\"></a>垃圾收集器种类</h4><p>目前的收集器主要有以下三种：  </p>\n<p><strong>串行收集器：</strong> 只有一条垃圾收集线程工作  </p>\n<p><strong>并行收集器：</strong> 多条垃圾收集线程并行工作，用户线程等待</p>\n<p><strong>并发收集器：</strong> 垃圾收集线程与用户线程同时执行（不一定并行，可能交替执行）</p>\n<h3 id=\"二、垃圾收集器详述\"><a href=\"#二、垃圾收集器详述\" class=\"headerlink\" title=\"二、垃圾收集器详述\"></a>二、垃圾收集器详述</h3><h4 id=\"新生代收集器（3种）\"><a href=\"#新生代收集器（3种）\" class=\"headerlink\" title=\"新生代收集器（3种）\"></a>新生代收集器（3种）</h4><h5 id=\"Serial-收集器（串行）\"><a href=\"#Serial-收集器（串行）\" class=\"headerlink\" title=\"Serial 收集器（串行）\"></a>Serial 收集器（串行）</h5><p>Serial收集器是一个单线程的收集器。<br>“单线程”：不仅只是有一条收集线程，而且必须暂停用户工作线程。 </p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/seria.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 单线程，无线程切换，简单高效，（管理内存小，停顿可以接受）<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于运行在Client模式下的虚拟机</p>\n<h5 id=\"ParNew-收集器（并行）\"><a href=\"#ParNew-收集器（并行）\" class=\"headerlink\" title=\"ParNew 收集器（并行）\"></a>ParNew 收集器（并行）</h5><p>ParNew收集器是Serial收集器的多线程版本。</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/ParNew.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程，除Serial外唯一能和CMS收集器配合<br><strong>缺点：</strong>  暂停工作线程，单线程下不如Serial<br><strong>应用场景：</strong> 适用于运行在Server模式下的虚拟机</p>\n<h5 id=\"Parallel-Scavenge-收集器（并行）\"><a href=\"#Parallel-Scavenge-收集器（并行）\" class=\"headerlink\" title=\"Parallel Scavenge 收集器（并行）\"></a>Parallel Scavenge 收集器（并行）</h5><p>Parallel Scavenge收集器被称为“吞吐量优先”收集器。</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/parallel%20scavenge.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> </p>\n<ul>\n<li><strong>可控制吞吐量。</strong><br>吞吐量 = 用户代码时间/（用户代码时间+垃圾收集时间）<br>吞吐量越高，表示越高效地利用CPU，适合后台运算任务。  </li>\n<li><strong>GC 自适应调节策略</strong><br>JVM可以根据当前系统的运行情况自适应调节参数，以提供最合适的停顿时间和最大的吞吐量。</li>\n</ul>\n<p><strong>缺点：</strong> 相比停顿时间更注重吞吐量<br><strong>应用场景：</strong> 主要用于后台计算，不需要与用户进行太多交互，对暂停时间没有特别高的要求等场景，如批量处理；</p>\n<h4 id=\"老年代收集器（3种）\"><a href=\"#老年代收集器（3种）\" class=\"headerlink\" title=\"老年代收集器（3种）\"></a>老年代收集器（3种）</h4><h5 id=\"Serial-Old-收集器（串行）\"><a href=\"#Serial-Old-收集器（串行）\" class=\"headerlink\" title=\"Serial Old 收集器（串行）\"></a>Serial Old 收集器（串行）</h5><p>Serial Old是Serial的老年代版本，同样是一个单线程收集器。  </p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/seria.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 单线程，“标记-整理”算法<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于运行在Client模式下的虚拟机</p>\n<h5 id=\"Parallel-Old-收集器（并行）\"><a href=\"#Parallel-Old-收集器（并行）\" class=\"headerlink\" title=\"Parallel Old 收集器（并行）\"></a>Parallel Old 收集器（并行）</h5><p>Parallel Old是Parallel Scavenge收集器的老年代版本，多线程收集器。（JDK1.6之后出现）</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/parallel%20old.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程，“标记-整理”算法，唯一能和Parallel Scavenge收集器配合<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于注重吞吐量及CPU资源敏感的场合</p>\n<h5 id=\"CMS-收集器（并发）\"><a href=\"#CMS-收集器（并发）\" class=\"headerlink\" title=\"CMS 收集器（并发）\"></a>CMS 收集器（并发）</h5><p><strong>CMS（Concurrent Mark Sweep）是一种以获取最短回收停顿时间为目标的收集器。<br>第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong>  </p>\n<p>工作过程分为<strong>4个步骤</strong>：  </p>\n<ol>\n<li><strong>初始标记</strong>：标记“GC-Roots”关联的对象（Stop the World）</li>\n<li><strong>并发标记</strong>： 进行GC-Roots Tracing的过程，在刚才产生的集合中标记出存活对象；</li>\n<li><strong>重新标记</strong>：修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录（Stop the World）</li>\n<li><strong>并发清除</strong>：回收所有垃圾对象</li>\n</ol>\n<p>所以，<strong>在初始标记和重新标记阶段，还是只有垃圾收集线程工作；并发标记和并发清除阶段是和用户线程并发执行的</strong>。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/CMS.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程并发执行，停顿时间短<br><strong>缺点：</strong>  </p>\n<ul>\n<li>对CPU资源十分敏感</li>\n<li>无法处理浮动垃圾</li>\n<li>产生大量空间碎片（由于是“标记-清除”算法）  </li>\n</ul>\n<p><strong>应用场景：</strong> 适用于大型网站或B/S的服务端，注重响应速度和用户体验。</p>\n<h4 id=\"通用收集器\"><a href=\"#通用收集器\" class=\"headerlink\" title=\"通用收集器\"></a>通用收集器</h4><h5 id=\"G1-收集器（并发）\"><a href=\"#G1-收集器（并发）\" class=\"headerlink\" title=\"G1 收集器（并发）\"></a>G1 收集器（并发）</h5><p>G1是目前最前沿的收集器，可处理整个GC堆，JDK1.7之后出现。  </p>\n<p><strong>G1是如何处理整个堆</strong>？<br>G1将整个堆划分为多个大小相等的独立区域Region（不再是新生代老年代），然后跟踪各个Region获得其垃圾收集价值大小，并在后台维护一个优先列表，根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）。这个过程保证了在有限的时间内可以回收更多的垃圾。</p>\n<p>工作过程分为<strong>4个步骤</strong>： </p>\n<ol>\n<li><strong>初始标记</strong>：标记“GC-Roots”关联的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象</li>\n<li><strong>并发标记</strong>：根据GC-Roots进行可达性分析，找出存活对象</li>\n<li><strong>最终标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录</li>\n<li><strong>筛选回收</strong>：根据各个Region的价值回收</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/G1.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> </p>\n<ul>\n<li>并行且并发  </li>\n<li>独立处理整个GC堆，不需要配合其他收集器</li>\n<li>可预测停顿时间</li>\n<li>不产生空间碎片</li>\n</ul>\n<p><strong>应用场景：</strong> 面向服务器，适用于多CPU及大容量内存的机器。</p>\n<h3 id=\"三、常见的参数配置\"><a href=\"#三、常见的参数配置\" class=\"headerlink\" title=\"三、常见的参数配置\"></a>三、常见的参数配置</h3><ul>\n<li><strong>Xms</strong>：堆的最小值（初始）</li>\n<li><strong>Xmx</strong>：堆的最大值<br>（Xms、Xmx二者一样时，可避免自动扩展）</li>\n<li><strong>Xmn</strong>：堆中新生代的大小</li>\n<li><strong>Xss</strong>：每个线程的堆栈大小</li>\n<li><strong>XX:PermSize</strong>：永久代的大小（初始）</li>\n<li><strong>XX:MaxPermSize</strong>：永久代的最大值</li>\n<li><p><strong>XX:NewRatio</strong>：年轻代（包括Eden和两个Survivor区）与年老代的比值，设置为3，则年轻代与年老代所占比值为1：3，年轻代占整个堆栈的1/4</p>\n</li>\n<li><p><strong>XX:SurvivorRatio</strong>：年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、垃圾收集器概述\"><a href=\"#一、垃圾收集器概述\" class=\"headerlink\" title=\"一、垃圾收集器概述\"></a>一、垃圾收集器概述</h3><p><strong>垃圾收集器是内存垃圾回收算法的具体实现。</strong><br>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此出现了7种收集器：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1。<br>它们以组合的形式配合工作来完成不同分代的垃圾收集工作。</p>\n<p><strong>常用组合</strong>：</p>\n<ol>\n<li>Serial/Serial Old</li>\n<li>ParNew/Serial Old</li>\n<li>ParNew/CMS</li>\n<li>Parallel Scavenge/Parallel Old</li>\n<li>G1</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/JVMtool2.png\" alt=\"image\"></p>\n<h4 id=\"Minor-GC和Full-GC\"><a href=\"#Minor-GC和Full-GC\" class=\"headerlink\" title=\"Minor GC和Full GC\"></a>Minor GC和Full GC</h4><p>Minor GC（新生代GC）：发生在新生代的GC动作，频率高，回收速度块。</p>\n<p>Full GC（老年代GC）：发生在老年代的GC动作，老年代满了后才进行，一般伴随至少一次Minor GC，频率低，回收速度慢。</p>\n<h4 id=\"垃圾收集器种类\"><a href=\"#垃圾收集器种类\" class=\"headerlink\" title=\"垃圾收集器种类\"></a>垃圾收集器种类</h4><p>目前的收集器主要有以下三种：  </p>\n<p><strong>串行收集器：</strong> 只有一条垃圾收集线程工作  </p>\n<p><strong>并行收集器：</strong> 多条垃圾收集线程并行工作，用户线程等待</p>\n<p><strong>并发收集器：</strong> 垃圾收集线程与用户线程同时执行（不一定并行，可能交替执行）</p>\n<h3 id=\"二、垃圾收集器详述\"><a href=\"#二、垃圾收集器详述\" class=\"headerlink\" title=\"二、垃圾收集器详述\"></a>二、垃圾收集器详述</h3><h4 id=\"新生代收集器（3种）\"><a href=\"#新生代收集器（3种）\" class=\"headerlink\" title=\"新生代收集器（3种）\"></a>新生代收集器（3种）</h4><h5 id=\"Serial-收集器（串行）\"><a href=\"#Serial-收集器（串行）\" class=\"headerlink\" title=\"Serial 收集器（串行）\"></a>Serial 收集器（串行）</h5><p>Serial收集器是一个单线程的收集器。<br>“单线程”：不仅只是有一条收集线程，而且必须暂停用户工作线程。 </p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/seria.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 单线程，无线程切换，简单高效，（管理内存小，停顿可以接受）<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于运行在Client模式下的虚拟机</p>\n<h5 id=\"ParNew-收集器（并行）\"><a href=\"#ParNew-收集器（并行）\" class=\"headerlink\" title=\"ParNew 收集器（并行）\"></a>ParNew 收集器（并行）</h5><p>ParNew收集器是Serial收集器的多线程版本。</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/ParNew.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程，除Serial外唯一能和CMS收集器配合<br><strong>缺点：</strong>  暂停工作线程，单线程下不如Serial<br><strong>应用场景：</strong> 适用于运行在Server模式下的虚拟机</p>\n<h5 id=\"Parallel-Scavenge-收集器（并行）\"><a href=\"#Parallel-Scavenge-收集器（并行）\" class=\"headerlink\" title=\"Parallel Scavenge 收集器（并行）\"></a>Parallel Scavenge 收集器（并行）</h5><p>Parallel Scavenge收集器被称为“吞吐量优先”收集器。</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/parallel%20scavenge.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> </p>\n<ul>\n<li><strong>可控制吞吐量。</strong><br>吞吐量 = 用户代码时间/（用户代码时间+垃圾收集时间）<br>吞吐量越高，表示越高效地利用CPU，适合后台运算任务。  </li>\n<li><strong>GC 自适应调节策略</strong><br>JVM可以根据当前系统的运行情况自适应调节参数，以提供最合适的停顿时间和最大的吞吐量。</li>\n</ul>\n<p><strong>缺点：</strong> 相比停顿时间更注重吞吐量<br><strong>应用场景：</strong> 主要用于后台计算，不需要与用户进行太多交互，对暂停时间没有特别高的要求等场景，如批量处理；</p>\n<h4 id=\"老年代收集器（3种）\"><a href=\"#老年代收集器（3种）\" class=\"headerlink\" title=\"老年代收集器（3种）\"></a>老年代收集器（3种）</h4><h5 id=\"Serial-Old-收集器（串行）\"><a href=\"#Serial-Old-收集器（串行）\" class=\"headerlink\" title=\"Serial Old 收集器（串行）\"></a>Serial Old 收集器（串行）</h5><p>Serial Old是Serial的老年代版本，同样是一个单线程收集器。  </p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/seria.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 单线程，“标记-整理”算法<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于运行在Client模式下的虚拟机</p>\n<h5 id=\"Parallel-Old-收集器（并行）\"><a href=\"#Parallel-Old-收集器（并行）\" class=\"headerlink\" title=\"Parallel Old 收集器（并行）\"></a>Parallel Old 收集器（并行）</h5><p>Parallel Old是Parallel Scavenge收集器的老年代版本，多线程收集器。（JDK1.6之后出现）</p>\n<p>工作过程：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/parallel%20old.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程，“标记-整理”算法，唯一能和Parallel Scavenge收集器配合<br><strong>缺点：</strong>  暂停工作线程<br><strong>应用场景：</strong> 适用于注重吞吐量及CPU资源敏感的场合</p>\n<h5 id=\"CMS-收集器（并发）\"><a href=\"#CMS-收集器（并发）\" class=\"headerlink\" title=\"CMS 收集器（并发）\"></a>CMS 收集器（并发）</h5><p><strong>CMS（Concurrent Mark Sweep）是一种以获取最短回收停顿时间为目标的收集器。<br>第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong>  </p>\n<p>工作过程分为<strong>4个步骤</strong>：  </p>\n<ol>\n<li><strong>初始标记</strong>：标记“GC-Roots”关联的对象（Stop the World）</li>\n<li><strong>并发标记</strong>： 进行GC-Roots Tracing的过程，在刚才产生的集合中标记出存活对象；</li>\n<li><strong>重新标记</strong>：修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录（Stop the World）</li>\n<li><strong>并发清除</strong>：回收所有垃圾对象</li>\n</ol>\n<p>所以，<strong>在初始标记和重新标记阶段，还是只有垃圾收集线程工作；并发标记和并发清除阶段是和用户线程并发执行的</strong>。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/CMS.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> 多线程并发执行，停顿时间短<br><strong>缺点：</strong>  </p>\n<ul>\n<li>对CPU资源十分敏感</li>\n<li>无法处理浮动垃圾</li>\n<li>产生大量空间碎片（由于是“标记-清除”算法）  </li>\n</ul>\n<p><strong>应用场景：</strong> 适用于大型网站或B/S的服务端，注重响应速度和用户体验。</p>\n<h4 id=\"通用收集器\"><a href=\"#通用收集器\" class=\"headerlink\" title=\"通用收集器\"></a>通用收集器</h4><h5 id=\"G1-收集器（并发）\"><a href=\"#G1-收集器（并发）\" class=\"headerlink\" title=\"G1 收集器（并发）\"></a>G1 收集器（并发）</h5><p>G1是目前最前沿的收集器，可处理整个GC堆，JDK1.7之后出现。  </p>\n<p><strong>G1是如何处理整个堆</strong>？<br>G1将整个堆划分为多个大小相等的独立区域Region（不再是新生代老年代），然后跟踪各个Region获得其垃圾收集价值大小，并在后台维护一个优先列表，根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）。这个过程保证了在有限的时间内可以回收更多的垃圾。</p>\n<p>工作过程分为<strong>4个步骤</strong>： </p>\n<ol>\n<li><strong>初始标记</strong>：标记“GC-Roots”关联的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象</li>\n<li><strong>并发标记</strong>：根据GC-Roots进行可达性分析，找出存活对象</li>\n<li><strong>最终标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录</li>\n<li><strong>筛选回收</strong>：根据各个Region的价值回收</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/G1.png\" alt=\"image\"></p>\n<p><strong>特点：</strong> </p>\n<ul>\n<li>并行且并发  </li>\n<li>独立处理整个GC堆，不需要配合其他收集器</li>\n<li>可预测停顿时间</li>\n<li>不产生空间碎片</li>\n</ul>\n<p><strong>应用场景：</strong> 面向服务器，适用于多CPU及大容量内存的机器。</p>\n<h3 id=\"三、常见的参数配置\"><a href=\"#三、常见的参数配置\" class=\"headerlink\" title=\"三、常见的参数配置\"></a>三、常见的参数配置</h3><ul>\n<li><strong>Xms</strong>：堆的最小值（初始）</li>\n<li><strong>Xmx</strong>：堆的最大值<br>（Xms、Xmx二者一样时，可避免自动扩展）</li>\n<li><strong>Xmn</strong>：堆中新生代的大小</li>\n<li><strong>Xss</strong>：每个线程的堆栈大小</li>\n<li><strong>XX:PermSize</strong>：永久代的大小（初始）</li>\n<li><strong>XX:MaxPermSize</strong>：永久代的最大值</li>\n<li><p><strong>XX:NewRatio</strong>：年轻代（包括Eden和两个Survivor区）与年老代的比值，设置为3，则年轻代与年老代所占比值为1：3，年轻代占整个堆栈的1/4</p>\n</li>\n<li><p><strong>XX:SurvivorRatio</strong>：年轻代中Eden区与Survivor区的大小比值。设置为4，则两个Survivor区与一个Eden区的比值为2:4，一个Survivor区占整个年轻代的1/6</p>\n</li>\n</ul>\n"},{"title":"JVM之对象创建过程","date":"2017-10-26T10:48:19.000Z","_content":"\n### 一、Java对象的创建过程\n\n在Java程序中，通常都是通过 new 关键字来创建对象，那么在虚拟机中对象是如何创建的？  \n（普通Java对象，不包含数组和Class对象）\n\n虚拟机创建对象主要经历5个步骤：**类加载检查、为对象分配内存、内存空间初始化、对象设置、执行对象<init>方法。**\n#### 1 类加载检查\n当虚拟机遇到 new 指令时，首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且**检查这个符号引用代表的类是否已被加载、解析和初始化过**。如果没有，先执行类加载过程。\n#### 2 为对象分配内存\n对象所需的内存大小在类加载完成时已经确定，因此**为对象分配内存等同于在Java堆中划分一块大小确定的内存空间**。  \n##### 两种分配方式：\n- **指针碰撞**：Java堆中的内存是完整的，将指针往空闲空间挪动一段与对象大小相等的距离\n- **空闲列表**：Java堆中的内存不是完整的，JVM维护了一个记录可用内存的列表，分配时将列表中足够大的空间划分给对象，并更新列表\n\n因此选择何种分配方式由Java堆是否完整决定，而这又由垃圾收集器是否带有压缩整理功能决定。如：\n\n- **Serial、ParNew等采用指针碰撞**\n- **CMS基于“标记-清除”采用空闲列表**\n\n##### 线程安全问题\n当处于并发情况下时，还要考虑线程安全问题。\n两种解决方案：\n- **对分配内存的动作进行同步处理**。JVM采用CAS加失败重试的方式保证原子性\n- **把内存分配的动作按照线程划分在不同的空间进行**。每个线程在Java堆中预先分配一小块内存（本地线程分配缓冲TLAB），只有TLAB用完重新分配时才同步锁定。\n#### 3 内存空间初始化\nJVM将分配到的内存空间都初始化为零值（不包括对象头）；若使用TLAB，则提前至TLAB分配时执行。\n\n这一步**保证了对象实例字段在Java代码中可以不赋初值就直接使用**，程序能访问到这些字段的数据类型所对应的零值。\n\n#### 4 对象设置\nJVM设置对象头信息，如类元数据信息、对象的哈希码、对象的GC分代年龄信息等。还有是否启用偏向锁。\n#### 5 执行对象<init>方法\n此时，对于JVM来说，对象已经产生；  \n对于Java程序来说，才刚刚开始，执行<init>方法进行初始化，一个对象才算真正创建完成。\n\n\n### 二、Java对象的初始化\n\n在Java对象初始化过程中，主要涉及三种执行对象初始化的结构，分别是 **实例变量初始化、实例代码块初始化** 以及 **构造函数初始化**。 \n\n#### 实例变量初始化与实例代码块初始化\n在定义（声明）实例变量的同时，还可以直接对实例变量进行赋值或者使用实例代码块对其进行赋值。  \n如果我们**以这两种方式为实例变量进行初始化，那么它们将在构造函数执行之前完成这些初始化操作。** 实际上，如果我们对实例变量直接赋值或者使用实例代码块赋值，那么编译器会将其中的代码放到类的构造函数中去，并且这些代码会被放在对超类构造函数的调用语句之后(Super())，构造函数本身的代码之前。\n```\npublic class Tdemo2 {\n\t//成员变量\n\tprivate int i = 1;\n\tprivate int j = 1;\n\tpublic  Tdemo2(int c){\n\t\tSystem.out.println(i);\n\t\tSystem.out.println(j);\n\t\tthis.i = c;\n\t\tSystem.out.println(i);\n\t}\n\t//代码块\n\t{\n\t\tj = j+1;\n\t}\n\t//静态代码块\n\tstatic{\n\t\tint a = 5;\n\t\tSystem.out.println(a);\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Tdemo2(3);\n\t}\n}\n```\n输出：\n```\n5\n1\n2\n3\n```\n可见执行顺序是static代码块、成员变量赋值、代码块、构造函数。\n#### 构造函数初始化\n\n**Java要求在实例化类之前，必须先实例化其超类，以保证所创建实例的完整性。**\nJava强制要求Object对象(Object是Java的顶层对象，没有超类)之外的所有对象构造函数的第一条语句必须是超类构造函数的调用语句或者是类中定义的其他的构造函数，如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用。\n\n实际上，实例化一个类的对象的过程是一个典型的递归过程。\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B.png)\n\n\n在准备实例化一个类的对象前，首先准备实例化该类的父类，如果该类的父类还有父类，那么准备实例化该类的父类的父类，依次递归直到递归到Object类。\n\n**注意：实例初始化不一定要在类初始化结束之后才开始初始化。**\n\n\n回忆一下Java中赋值顺序： \n1. 父类的静态变量赋值 \n2. 自身的静态变量赋值 \n3. 父类成员变量赋值和父类代码块赋值 \n4. 父类构造函数赋值 \n5. 自身成员变量赋值和自身块代码赋值 \n6. 自身构造函数赋值\n\n\n### 三、Java对象的创建方式\n\nJava对象的创建方式有 5 种：\n1. new 关键字\n```\nPerson p = new Person();\n```\n2. Class类的newInstance()（反射）\n```\nPerson p2 = Person.class.newInstance();\n```\n3. Constructor类的newInstance方法（反射）\n```\nConstructor c = Person.class.getConstructor();\nPerson p3 = (Person) c.newInstance();\n```\n4. clone方法（实现Cloneable接口）\n```\nPerson p4 = (Person) p3.clone();\n```\n5. 反序列化（实现Serializable接口）\n```\n//写对象\nObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(\"person.txt\"));\noutput.writeObject(p);\noutput.close();\n\n//读对象\nObjectInputStream input = new ObjectInputStream(new FileInputStream(\"person.txt\"));\nPerson p5 = (Person) input.readObject();\n```\n\n\n\n","source":"_posts/JVM之对象创建过程.md","raw":"---\ntitle: JVM之对象创建过程\ndate: 2017-10-26 18:48:19\ntags: [JVM,对象创建过程]\ncategories: 技术\n---\n\n### 一、Java对象的创建过程\n\n在Java程序中，通常都是通过 new 关键字来创建对象，那么在虚拟机中对象是如何创建的？  \n（普通Java对象，不包含数组和Class对象）\n\n虚拟机创建对象主要经历5个步骤：**类加载检查、为对象分配内存、内存空间初始化、对象设置、执行对象<init>方法。**\n#### 1 类加载检查\n当虚拟机遇到 new 指令时，首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且**检查这个符号引用代表的类是否已被加载、解析和初始化过**。如果没有，先执行类加载过程。\n#### 2 为对象分配内存\n对象所需的内存大小在类加载完成时已经确定，因此**为对象分配内存等同于在Java堆中划分一块大小确定的内存空间**。  \n##### 两种分配方式：\n- **指针碰撞**：Java堆中的内存是完整的，将指针往空闲空间挪动一段与对象大小相等的距离\n- **空闲列表**：Java堆中的内存不是完整的，JVM维护了一个记录可用内存的列表，分配时将列表中足够大的空间划分给对象，并更新列表\n\n因此选择何种分配方式由Java堆是否完整决定，而这又由垃圾收集器是否带有压缩整理功能决定。如：\n\n- **Serial、ParNew等采用指针碰撞**\n- **CMS基于“标记-清除”采用空闲列表**\n\n##### 线程安全问题\n当处于并发情况下时，还要考虑线程安全问题。\n两种解决方案：\n- **对分配内存的动作进行同步处理**。JVM采用CAS加失败重试的方式保证原子性\n- **把内存分配的动作按照线程划分在不同的空间进行**。每个线程在Java堆中预先分配一小块内存（本地线程分配缓冲TLAB），只有TLAB用完重新分配时才同步锁定。\n#### 3 内存空间初始化\nJVM将分配到的内存空间都初始化为零值（不包括对象头）；若使用TLAB，则提前至TLAB分配时执行。\n\n这一步**保证了对象实例字段在Java代码中可以不赋初值就直接使用**，程序能访问到这些字段的数据类型所对应的零值。\n\n#### 4 对象设置\nJVM设置对象头信息，如类元数据信息、对象的哈希码、对象的GC分代年龄信息等。还有是否启用偏向锁。\n#### 5 执行对象<init>方法\n此时，对于JVM来说，对象已经产生；  \n对于Java程序来说，才刚刚开始，执行<init>方法进行初始化，一个对象才算真正创建完成。\n\n\n### 二、Java对象的初始化\n\n在Java对象初始化过程中，主要涉及三种执行对象初始化的结构，分别是 **实例变量初始化、实例代码块初始化** 以及 **构造函数初始化**。 \n\n#### 实例变量初始化与实例代码块初始化\n在定义（声明）实例变量的同时，还可以直接对实例变量进行赋值或者使用实例代码块对其进行赋值。  \n如果我们**以这两种方式为实例变量进行初始化，那么它们将在构造函数执行之前完成这些初始化操作。** 实际上，如果我们对实例变量直接赋值或者使用实例代码块赋值，那么编译器会将其中的代码放到类的构造函数中去，并且这些代码会被放在对超类构造函数的调用语句之后(Super())，构造函数本身的代码之前。\n```\npublic class Tdemo2 {\n\t//成员变量\n\tprivate int i = 1;\n\tprivate int j = 1;\n\tpublic  Tdemo2(int c){\n\t\tSystem.out.println(i);\n\t\tSystem.out.println(j);\n\t\tthis.i = c;\n\t\tSystem.out.println(i);\n\t}\n\t//代码块\n\t{\n\t\tj = j+1;\n\t}\n\t//静态代码块\n\tstatic{\n\t\tint a = 5;\n\t\tSystem.out.println(a);\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Tdemo2(3);\n\t}\n}\n```\n输出：\n```\n5\n1\n2\n3\n```\n可见执行顺序是static代码块、成员变量赋值、代码块、构造函数。\n#### 构造函数初始化\n\n**Java要求在实例化类之前，必须先实例化其超类，以保证所创建实例的完整性。**\nJava强制要求Object对象(Object是Java的顶层对象，没有超类)之外的所有对象构造函数的第一条语句必须是超类构造函数的调用语句或者是类中定义的其他的构造函数，如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用。\n\n实际上，实例化一个类的对象的过程是一个典型的递归过程。\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B.png)\n\n\n在准备实例化一个类的对象前，首先准备实例化该类的父类，如果该类的父类还有父类，那么准备实例化该类的父类的父类，依次递归直到递归到Object类。\n\n**注意：实例初始化不一定要在类初始化结束之后才开始初始化。**\n\n\n回忆一下Java中赋值顺序： \n1. 父类的静态变量赋值 \n2. 自身的静态变量赋值 \n3. 父类成员变量赋值和父类代码块赋值 \n4. 父类构造函数赋值 \n5. 自身成员变量赋值和自身块代码赋值 \n6. 自身构造函数赋值\n\n\n### 三、Java对象的创建方式\n\nJava对象的创建方式有 5 种：\n1. new 关键字\n```\nPerson p = new Person();\n```\n2. Class类的newInstance()（反射）\n```\nPerson p2 = Person.class.newInstance();\n```\n3. Constructor类的newInstance方法（反射）\n```\nConstructor c = Person.class.getConstructor();\nPerson p3 = (Person) c.newInstance();\n```\n4. clone方法（实现Cloneable接口）\n```\nPerson p4 = (Person) p3.clone();\n```\n5. 反序列化（实现Serializable接口）\n```\n//写对象\nObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(\"person.txt\"));\noutput.writeObject(p);\noutput.close();\n\n//读对象\nObjectInputStream input = new ObjectInputStream(new FileInputStream(\"person.txt\"));\nPerson p5 = (Person) input.readObject();\n```\n\n\n\n","slug":"JVM之对象创建过程","published":1,"updated":"2018-04-11T10:02:31.866Z","_id":"cjfqzt249000i50tcova5lry4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、Java对象的创建过程\"><a href=\"#一、Java对象的创建过程\" class=\"headerlink\" title=\"一、Java对象的创建过程\"></a>一、Java对象的创建过程</h3><p>在Java程序中，通常都是通过 new 关键字来创建对象，那么在虚拟机中对象是如何创建的？<br>（普通Java对象，不包含数组和Class对象）</p>\n<p>虚拟机创建对象主要经历5个步骤：<strong>类加载检查、为对象分配内存、内存空间初始化、对象设置、执行对象<init>方法。</init></strong></p>\n<h4 id=\"1-类加载检查\"><a href=\"#1-类加载检查\" class=\"headerlink\" title=\"1 类加载检查\"></a>1 类加载检查</h4><p>当虚拟机遇到 new 指令时，首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且<strong>检查这个符号引用代表的类是否已被加载、解析和初始化过</strong>。如果没有，先执行类加载过程。</p>\n<h4 id=\"2-为对象分配内存\"><a href=\"#2-为对象分配内存\" class=\"headerlink\" title=\"2 为对象分配内存\"></a>2 为对象分配内存</h4><p>对象所需的内存大小在类加载完成时已经确定，因此<strong>为对象分配内存等同于在Java堆中划分一块大小确定的内存空间</strong>。  </p>\n<h5 id=\"两种分配方式：\"><a href=\"#两种分配方式：\" class=\"headerlink\" title=\"两种分配方式：\"></a>两种分配方式：</h5><ul>\n<li><strong>指针碰撞</strong>：Java堆中的内存是完整的，将指针往空闲空间挪动一段与对象大小相等的距离</li>\n<li><strong>空闲列表</strong>：Java堆中的内存不是完整的，JVM维护了一个记录可用内存的列表，分配时将列表中足够大的空间划分给对象，并更新列表</li>\n</ul>\n<p>因此选择何种分配方式由Java堆是否完整决定，而这又由垃圾收集器是否带有压缩整理功能决定。如：</p>\n<ul>\n<li><strong>Serial、ParNew等采用指针碰撞</strong></li>\n<li><strong>CMS基于“标记-清除”采用空闲列表</strong></li>\n</ul>\n<h5 id=\"线程安全问题\"><a href=\"#线程安全问题\" class=\"headerlink\" title=\"线程安全问题\"></a>线程安全问题</h5><p>当处于并发情况下时，还要考虑线程安全问题。<br>两种解决方案：</p>\n<ul>\n<li><strong>对分配内存的动作进行同步处理</strong>。JVM采用CAS加失败重试的方式保证原子性</li>\n<li><strong>把内存分配的动作按照线程划分在不同的空间进行</strong>。每个线程在Java堆中预先分配一小块内存（本地线程分配缓冲TLAB），只有TLAB用完重新分配时才同步锁定。<h4 id=\"3-内存空间初始化\"><a href=\"#3-内存空间初始化\" class=\"headerlink\" title=\"3 内存空间初始化\"></a>3 内存空间初始化</h4>JVM将分配到的内存空间都初始化为零值（不包括对象头）；若使用TLAB，则提前至TLAB分配时执行。</li>\n</ul>\n<p>这一步<strong>保证了对象实例字段在Java代码中可以不赋初值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。</p>\n<h4 id=\"4-对象设置\"><a href=\"#4-对象设置\" class=\"headerlink\" title=\"4 对象设置\"></a>4 对象设置</h4><p>JVM设置对象头信息，如类元数据信息、对象的哈希码、对象的GC分代年龄信息等。还有是否启用偏向锁。</p>\n<h4 id=\"5-执行对象方法\"><a href=\"#5-执行对象方法\" class=\"headerlink\" title=\"5 执行对象方法\"></a>5 执行对象<init>方法</init></h4><p>此时，对于JVM来说，对象已经产生；<br>对于Java程序来说，才刚刚开始，执行<init>方法进行初始化，一个对象才算真正创建完成。</init></p>\n<h3 id=\"二、Java对象的初始化\"><a href=\"#二、Java对象的初始化\" class=\"headerlink\" title=\"二、Java对象的初始化\"></a>二、Java对象的初始化</h3><p>在Java对象初始化过程中，主要涉及三种执行对象初始化的结构，分别是 <strong>实例变量初始化、实例代码块初始化</strong> 以及 <strong>构造函数初始化</strong>。 </p>\n<h4 id=\"实例变量初始化与实例代码块初始化\"><a href=\"#实例变量初始化与实例代码块初始化\" class=\"headerlink\" title=\"实例变量初始化与实例代码块初始化\"></a>实例变量初始化与实例代码块初始化</h4><p>在定义（声明）实例变量的同时，还可以直接对实例变量进行赋值或者使用实例代码块对其进行赋值。<br>如果我们<strong>以这两种方式为实例变量进行初始化，那么它们将在构造函数执行之前完成这些初始化操作。</strong> 实际上，如果我们对实例变量直接赋值或者使用实例代码块赋值，那么编译器会将其中的代码放到类的构造函数中去，并且这些代码会被放在对超类构造函数的调用语句之后(Super())，构造函数本身的代码之前。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Tdemo2 &#123;</div><div class=\"line\">\t//成员变量</div><div class=\"line\">\tprivate int i = 1;</div><div class=\"line\">\tprivate int j = 1;</div><div class=\"line\">\tpublic  Tdemo2(int c)&#123;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t\tSystem.out.println(j);</div><div class=\"line\">\t\tthis.i = c;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//代码块</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tj = j+1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//静态代码块</div><div class=\"line\">\tstatic&#123;</div><div class=\"line\">\t\tint a = 5;</div><div class=\"line\">\t\tSystem.out.println(a);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tnew Tdemo2(3);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">5</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<p>可见执行顺序是static代码块、成员变量赋值、代码块、构造函数。</p>\n<h4 id=\"构造函数初始化\"><a href=\"#构造函数初始化\" class=\"headerlink\" title=\"构造函数初始化\"></a>构造函数初始化</h4><p><strong>Java要求在实例化类之前，必须先实例化其超类，以保证所创建实例的完整性。</strong><br>Java强制要求Object对象(Object是Java的顶层对象，没有超类)之外的所有对象构造函数的第一条语句必须是超类构造函数的调用语句或者是类中定义的其他的构造函数，如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用。</p>\n<p>实际上，实例化一个类的对象的过程是一个典型的递归过程。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B.png\" alt=\"image\"></p>\n<p>在准备实例化一个类的对象前，首先准备实例化该类的父类，如果该类的父类还有父类，那么准备实例化该类的父类的父类，依次递归直到递归到Object类。</p>\n<p><strong>注意：实例初始化不一定要在类初始化结束之后才开始初始化。</strong></p>\n<p>回忆一下Java中赋值顺序： </p>\n<ol>\n<li>父类的静态变量赋值 </li>\n<li>自身的静态变量赋值 </li>\n<li>父类成员变量赋值和父类代码块赋值 </li>\n<li>父类构造函数赋值 </li>\n<li>自身成员变量赋值和自身块代码赋值 </li>\n<li>自身构造函数赋值</li>\n</ol>\n<h3 id=\"三、Java对象的创建方式\"><a href=\"#三、Java对象的创建方式\" class=\"headerlink\" title=\"三、Java对象的创建方式\"></a>三、Java对象的创建方式</h3><p>Java对象的创建方式有 5 种：</p>\n<ol>\n<li><p>new 关键字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = new Person();</div></pre></td></tr></table></figure>\n</li>\n<li><p>Class类的newInstance()（反射）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p2 = Person.class.newInstance();</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constructor类的newInstance方法（反射）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Constructor c = Person.class.getConstructor();</div><div class=\"line\">Person p3 = (Person) c.newInstance();</div></pre></td></tr></table></figure>\n</li>\n<li><p>clone方法（实现Cloneable接口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p4 = (Person) p3.clone();</div></pre></td></tr></table></figure>\n</li>\n<li><p>反序列化（实现Serializable接口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//写对象</div><div class=\"line\">ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(&quot;person.txt&quot;));</div><div class=\"line\">output.writeObject(p);</div><div class=\"line\">output.close();</div><div class=\"line\"></div><div class=\"line\">//读对象</div><div class=\"line\">ObjectInputStream input = new ObjectInputStream(new FileInputStream(&quot;person.txt&quot;));</div><div class=\"line\">Person p5 = (Person) input.readObject();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Java对象的创建过程\"><a href=\"#一、Java对象的创建过程\" class=\"headerlink\" title=\"一、Java对象的创建过程\"></a>一、Java对象的创建过程</h3><p>在Java程序中，通常都是通过 new 关键字来创建对象，那么在虚拟机中对象是如何创建的？<br>（普通Java对象，不包含数组和Class对象）</p>\n<p>虚拟机创建对象主要经历5个步骤：<strong>类加载检查、为对象分配内存、内存空间初始化、对象设置、执行对象<init>方法。</init></strong></p>\n<h4 id=\"1-类加载检查\"><a href=\"#1-类加载检查\" class=\"headerlink\" title=\"1 类加载检查\"></a>1 类加载检查</h4><p>当虚拟机遇到 new 指令时，首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且<strong>检查这个符号引用代表的类是否已被加载、解析和初始化过</strong>。如果没有，先执行类加载过程。</p>\n<h4 id=\"2-为对象分配内存\"><a href=\"#2-为对象分配内存\" class=\"headerlink\" title=\"2 为对象分配内存\"></a>2 为对象分配内存</h4><p>对象所需的内存大小在类加载完成时已经确定，因此<strong>为对象分配内存等同于在Java堆中划分一块大小确定的内存空间</strong>。  </p>\n<h5 id=\"两种分配方式：\"><a href=\"#两种分配方式：\" class=\"headerlink\" title=\"两种分配方式：\"></a>两种分配方式：</h5><ul>\n<li><strong>指针碰撞</strong>：Java堆中的内存是完整的，将指针往空闲空间挪动一段与对象大小相等的距离</li>\n<li><strong>空闲列表</strong>：Java堆中的内存不是完整的，JVM维护了一个记录可用内存的列表，分配时将列表中足够大的空间划分给对象，并更新列表</li>\n</ul>\n<p>因此选择何种分配方式由Java堆是否完整决定，而这又由垃圾收集器是否带有压缩整理功能决定。如：</p>\n<ul>\n<li><strong>Serial、ParNew等采用指针碰撞</strong></li>\n<li><strong>CMS基于“标记-清除”采用空闲列表</strong></li>\n</ul>\n<h5 id=\"线程安全问题\"><a href=\"#线程安全问题\" class=\"headerlink\" title=\"线程安全问题\"></a>线程安全问题</h5><p>当处于并发情况下时，还要考虑线程安全问题。<br>两种解决方案：</p>\n<ul>\n<li><strong>对分配内存的动作进行同步处理</strong>。JVM采用CAS加失败重试的方式保证原子性</li>\n<li><strong>把内存分配的动作按照线程划分在不同的空间进行</strong>。每个线程在Java堆中预先分配一小块内存（本地线程分配缓冲TLAB），只有TLAB用完重新分配时才同步锁定。<h4 id=\"3-内存空间初始化\"><a href=\"#3-内存空间初始化\" class=\"headerlink\" title=\"3 内存空间初始化\"></a>3 内存空间初始化</h4>JVM将分配到的内存空间都初始化为零值（不包括对象头）；若使用TLAB，则提前至TLAB分配时执行。</li>\n</ul>\n<p>这一步<strong>保证了对象实例字段在Java代码中可以不赋初值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。</p>\n<h4 id=\"4-对象设置\"><a href=\"#4-对象设置\" class=\"headerlink\" title=\"4 对象设置\"></a>4 对象设置</h4><p>JVM设置对象头信息，如类元数据信息、对象的哈希码、对象的GC分代年龄信息等。还有是否启用偏向锁。</p>\n<h4 id=\"5-执行对象方法\"><a href=\"#5-执行对象方法\" class=\"headerlink\" title=\"5 执行对象方法\"></a>5 执行对象<init>方法</init></h4><p>此时，对于JVM来说，对象已经产生；<br>对于Java程序来说，才刚刚开始，执行<init>方法进行初始化，一个对象才算真正创建完成。</init></p>\n<h3 id=\"二、Java对象的初始化\"><a href=\"#二、Java对象的初始化\" class=\"headerlink\" title=\"二、Java对象的初始化\"></a>二、Java对象的初始化</h3><p>在Java对象初始化过程中，主要涉及三种执行对象初始化的结构，分别是 <strong>实例变量初始化、实例代码块初始化</strong> 以及 <strong>构造函数初始化</strong>。 </p>\n<h4 id=\"实例变量初始化与实例代码块初始化\"><a href=\"#实例变量初始化与实例代码块初始化\" class=\"headerlink\" title=\"实例变量初始化与实例代码块初始化\"></a>实例变量初始化与实例代码块初始化</h4><p>在定义（声明）实例变量的同时，还可以直接对实例变量进行赋值或者使用实例代码块对其进行赋值。<br>如果我们<strong>以这两种方式为实例变量进行初始化，那么它们将在构造函数执行之前完成这些初始化操作。</strong> 实际上，如果我们对实例变量直接赋值或者使用实例代码块赋值，那么编译器会将其中的代码放到类的构造函数中去，并且这些代码会被放在对超类构造函数的调用语句之后(Super())，构造函数本身的代码之前。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Tdemo2 &#123;</div><div class=\"line\">\t//成员变量</div><div class=\"line\">\tprivate int i = 1;</div><div class=\"line\">\tprivate int j = 1;</div><div class=\"line\">\tpublic  Tdemo2(int c)&#123;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t\tSystem.out.println(j);</div><div class=\"line\">\t\tthis.i = c;</div><div class=\"line\">\t\tSystem.out.println(i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//代码块</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\tj = j+1;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//静态代码块</div><div class=\"line\">\tstatic&#123;</div><div class=\"line\">\t\tint a = 5;</div><div class=\"line\">\t\tSystem.out.println(a);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tnew Tdemo2(3);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">5</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<p>可见执行顺序是static代码块、成员变量赋值、代码块、构造函数。</p>\n<h4 id=\"构造函数初始化\"><a href=\"#构造函数初始化\" class=\"headerlink\" title=\"构造函数初始化\"></a>构造函数初始化</h4><p><strong>Java要求在实例化类之前，必须先实例化其超类，以保证所创建实例的完整性。</strong><br>Java强制要求Object对象(Object是Java的顶层对象，没有超类)之外的所有对象构造函数的第一条语句必须是超类构造函数的调用语句或者是类中定义的其他的构造函数，如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用。</p>\n<p>实际上，实例化一个类的对象的过程是一个典型的递归过程。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%80%92%E5%BD%92%E8%BF%87%E7%A8%8B.png\" alt=\"image\"></p>\n<p>在准备实例化一个类的对象前，首先准备实例化该类的父类，如果该类的父类还有父类，那么准备实例化该类的父类的父类，依次递归直到递归到Object类。</p>\n<p><strong>注意：实例初始化不一定要在类初始化结束之后才开始初始化。</strong></p>\n<p>回忆一下Java中赋值顺序： </p>\n<ol>\n<li>父类的静态变量赋值 </li>\n<li>自身的静态变量赋值 </li>\n<li>父类成员变量赋值和父类代码块赋值 </li>\n<li>父类构造函数赋值 </li>\n<li>自身成员变量赋值和自身块代码赋值 </li>\n<li>自身构造函数赋值</li>\n</ol>\n<h3 id=\"三、Java对象的创建方式\"><a href=\"#三、Java对象的创建方式\" class=\"headerlink\" title=\"三、Java对象的创建方式\"></a>三、Java对象的创建方式</h3><p>Java对象的创建方式有 5 种：</p>\n<ol>\n<li><p>new 关键字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = new Person();</div></pre></td></tr></table></figure>\n</li>\n<li><p>Class类的newInstance()（反射）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p2 = Person.class.newInstance();</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constructor类的newInstance方法（反射）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Constructor c = Person.class.getConstructor();</div><div class=\"line\">Person p3 = (Person) c.newInstance();</div></pre></td></tr></table></figure>\n</li>\n<li><p>clone方法（实现Cloneable接口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p4 = (Person) p3.clone();</div></pre></td></tr></table></figure>\n</li>\n<li><p>反序列化（实现Serializable接口）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//写对象</div><div class=\"line\">ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(&quot;person.txt&quot;));</div><div class=\"line\">output.writeObject(p);</div><div class=\"line\">output.close();</div><div class=\"line\"></div><div class=\"line\">//读对象</div><div class=\"line\">ObjectInputStream input = new ObjectInputStream(new FileInputStream(&quot;person.txt&quot;));</div><div class=\"line\">Person p5 = (Person) input.readObject();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Java(spring)实现Mysql的定时备份与还原","date":"2017-12-25T11:23:12.000Z","_content":"### 一、数据库的定时备份\n\n#### 备份命令\nMysql的备份指令：\n\n1. 指定数据库：\n```\nmysqldump -h localhost -uroot -proot  tuser>d:\\user_2017-12-25_15-42-10.sql\t\n```\ntuser：数据库名  \nuser_2017-12-25_15-42-10.sql：文件名\n\n2. 指定数据库中的多个表：\n\n```\nmysqldump -h localhost -uroot -proot --databases tuser --tables t_user t_user2>d:\\user_2017-12-25_15-42-two.sql \n```\n在 --tables 之后加上所需备份的表名\n\n#### 定时（Spring-Task）\n了解了mysql的备份命令，那么如何实现定时呢？  \n**这里采用Spring的定时任务来实现，基于注解的方式。**\n\n主要有两点注意：\n\n##### 1. Spring.xml中开启定时任务注解的配置：\n```\n <!--开启定时任务注解-->\n<task:annotation-driven />\n```\n注意在头部引入task的标签及描述\n\n```\n     xmlns:task=\"http://www.springframework.org/schema/task\"\n     http://www.springframework.org/schema/task\n     http://www.springframework.org/schema/task/spring-task-4.0.xsd\n```\n##### 2.在相应的方法中添加注解@Scheduled\n\n```\n    @Scheduled(cron=\"0/5 * *  * * ? \")   //每5秒执行一次\n    public void task1(){\n        System.out.println(\"北京时间：\"+new Date());\n    }\n\n```\n注意(cron=\"0/5 * *  * * ? \")  表达式\n\n```\ncron=\"0/5 * *  * * ? \"   表示每隔5s执行一次\ncron=\" * * 0/1 * * ? \"   表示每隔1小时执行一次\n\n关于cronExpression的配置可以百度\n```\n\n对数据库  tuser  中的两张表 t_user 和 t_user2 进行备份:  \n代码如下：\n\n```\n //定时备份方案\n    @Scheduled(cron=\"0/5 * *  * * ? \")   //每5秒执行一次  @Scheduled(cron=\" * * 0/1 * * ? \") 每小时一次\n    public void back(){\n        System.out.println(\"现在时间是\"+new Date());\n        Runtime runtime = Runtime.getRuntime();  //获取Runtime实例\n        String user = \"root\";\n        String password = \"root\";\n        String database1 = \"tuser\"; // 需要备份的数据库名\n        String table1 = \"t_user\";\n        String table2 = \"t_user2\";\n        Date currentDate = new Date();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\n        String sdfDate = sdf.format(currentDate);\n        String filepath = \"d:\\\\time_\" + sdfDate + \".sql\"; // 备份的路径地址\n        //执行命令\n        String stmt = \"mysqldump  -h localhost -u \"+user+\" -p\"+password+\" --databases \"+database1+\" --tables \"+table1+\" \"+table2 +\" > \"+filepath;   \n        System.out.println(stmt);\n        try {\n            String[] command = { \"cmd\", \"/c\", stmt};\n            Process process = runtime.exec(command);\n            InputStream input = process.getInputStream();\n            System.out.println(IOUtils.toString(input, \"UTF-8\"));\n            //若有错误信息则输出\n            InputStream errorStream = process.getErrorStream();\n            System.out.println(IOUtils.toString(errorStream, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n### 二、数据库的还原\n#### 还原命令\n可以通过两种方式来进行还原操作。\n##### 1. mysql 利用sql文件还原数据库\n```\nmysql -h localhost -uroot -proot tuser< D:\\user_2017-12-25_15-42-10.sql\n```\n##### 2. source 命令  \n这也是导入sql文件的方式，登录mysql之后，输入：\n```\nsource d:/game_product2018-01-02_10-41-30.sql\n```\n注意反斜杠的方向，“source d:\\ab.sql” 这样会执行失败。  \n**注：在Navicat中无法使用 source 命令**\n\n#### 还原\n\n在代码中采用第一种方式实现还原操作\n\n\n```\n    public void restore() {\n        String user = \"root\";\n        String password = \"root\";\n        String database = \"tuser\"; // 需要备份的数据库名\n        System.out.println(\"现在时间是\" + new Date());\n        Runtime runtime = Runtime.getRuntime();\n\n        String cmd = \"mysql  -h localhost\" + \" -u \" + user + \" -p\" + password + \" \" + database;\n        System.out.println(cmd);\n        try {\n            String filePath =  \"D:\\\\user_2017-12-25_15-42-10.sql\"; // sql文件路径\n            String stmt = cmd + \" < \" + filePath;\n            String[] command = {\"cmd\", \"/c\", stmt};\n            Process process = runtime.exec(command);\n            //若有错误信息则输出\n            InputStream errorStream = process.getErrorStream();\n            System.out.println(IOUtils.toString(errorStream, \"utf-8\"));\n            //等待操作\n            int processComplete = process.waitFor();\n            if (processComplete == 0) {\n                System.out.println(\"还原成功.\");\n            } else {\n                throw new RuntimeException(\"还原数据库失败.\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n","source":"_posts/Java(spring)实现Mysql的定时备份与还原.md","raw":"---\ntitle: Java(spring)实现Mysql的定时备份与还原\ndate: 2017-12-25 19:23:12\ntags: [spring定时任务,Mysql备份还原]\ncategories: 技术\n---\n### 一、数据库的定时备份\n\n#### 备份命令\nMysql的备份指令：\n\n1. 指定数据库：\n```\nmysqldump -h localhost -uroot -proot  tuser>d:\\user_2017-12-25_15-42-10.sql\t\n```\ntuser：数据库名  \nuser_2017-12-25_15-42-10.sql：文件名\n\n2. 指定数据库中的多个表：\n\n```\nmysqldump -h localhost -uroot -proot --databases tuser --tables t_user t_user2>d:\\user_2017-12-25_15-42-two.sql \n```\n在 --tables 之后加上所需备份的表名\n\n#### 定时（Spring-Task）\n了解了mysql的备份命令，那么如何实现定时呢？  \n**这里采用Spring的定时任务来实现，基于注解的方式。**\n\n主要有两点注意：\n\n##### 1. Spring.xml中开启定时任务注解的配置：\n```\n <!--开启定时任务注解-->\n<task:annotation-driven />\n```\n注意在头部引入task的标签及描述\n\n```\n     xmlns:task=\"http://www.springframework.org/schema/task\"\n     http://www.springframework.org/schema/task\n     http://www.springframework.org/schema/task/spring-task-4.0.xsd\n```\n##### 2.在相应的方法中添加注解@Scheduled\n\n```\n    @Scheduled(cron=\"0/5 * *  * * ? \")   //每5秒执行一次\n    public void task1(){\n        System.out.println(\"北京时间：\"+new Date());\n    }\n\n```\n注意(cron=\"0/5 * *  * * ? \")  表达式\n\n```\ncron=\"0/5 * *  * * ? \"   表示每隔5s执行一次\ncron=\" * * 0/1 * * ? \"   表示每隔1小时执行一次\n\n关于cronExpression的配置可以百度\n```\n\n对数据库  tuser  中的两张表 t_user 和 t_user2 进行备份:  \n代码如下：\n\n```\n //定时备份方案\n    @Scheduled(cron=\"0/5 * *  * * ? \")   //每5秒执行一次  @Scheduled(cron=\" * * 0/1 * * ? \") 每小时一次\n    public void back(){\n        System.out.println(\"现在时间是\"+new Date());\n        Runtime runtime = Runtime.getRuntime();  //获取Runtime实例\n        String user = \"root\";\n        String password = \"root\";\n        String database1 = \"tuser\"; // 需要备份的数据库名\n        String table1 = \"t_user\";\n        String table2 = \"t_user2\";\n        Date currentDate = new Date();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\n        String sdfDate = sdf.format(currentDate);\n        String filepath = \"d:\\\\time_\" + sdfDate + \".sql\"; // 备份的路径地址\n        //执行命令\n        String stmt = \"mysqldump  -h localhost -u \"+user+\" -p\"+password+\" --databases \"+database1+\" --tables \"+table1+\" \"+table2 +\" > \"+filepath;   \n        System.out.println(stmt);\n        try {\n            String[] command = { \"cmd\", \"/c\", stmt};\n            Process process = runtime.exec(command);\n            InputStream input = process.getInputStream();\n            System.out.println(IOUtils.toString(input, \"UTF-8\"));\n            //若有错误信息则输出\n            InputStream errorStream = process.getErrorStream();\n            System.out.println(IOUtils.toString(errorStream, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n```\n### 二、数据库的还原\n#### 还原命令\n可以通过两种方式来进行还原操作。\n##### 1. mysql 利用sql文件还原数据库\n```\nmysql -h localhost -uroot -proot tuser< D:\\user_2017-12-25_15-42-10.sql\n```\n##### 2. source 命令  \n这也是导入sql文件的方式，登录mysql之后，输入：\n```\nsource d:/game_product2018-01-02_10-41-30.sql\n```\n注意反斜杠的方向，“source d:\\ab.sql” 这样会执行失败。  \n**注：在Navicat中无法使用 source 命令**\n\n#### 还原\n\n在代码中采用第一种方式实现还原操作\n\n\n```\n    public void restore() {\n        String user = \"root\";\n        String password = \"root\";\n        String database = \"tuser\"; // 需要备份的数据库名\n        System.out.println(\"现在时间是\" + new Date());\n        Runtime runtime = Runtime.getRuntime();\n\n        String cmd = \"mysql  -h localhost\" + \" -u \" + user + \" -p\" + password + \" \" + database;\n        System.out.println(cmd);\n        try {\n            String filePath =  \"D:\\\\user_2017-12-25_15-42-10.sql\"; // sql文件路径\n            String stmt = cmd + \" < \" + filePath;\n            String[] command = {\"cmd\", \"/c\", stmt};\n            Process process = runtime.exec(command);\n            //若有错误信息则输出\n            InputStream errorStream = process.getErrorStream();\n            System.out.println(IOUtils.toString(errorStream, \"utf-8\"));\n            //等待操作\n            int processComplete = process.waitFor();\n            if (processComplete == 0) {\n                System.out.println(\"还原成功.\");\n            } else {\n                throw new RuntimeException(\"还原数据库失败.\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```\n","slug":"Java(spring)实现Mysql的定时备份与还原","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt24q000m50tc2i8bs967","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、数据库的定时备份\"><a href=\"#一、数据库的定时备份\" class=\"headerlink\" title=\"一、数据库的定时备份\"></a>一、数据库的定时备份</h3><h4 id=\"备份命令\"><a href=\"#备份命令\" class=\"headerlink\" title=\"备份命令\"></a>备份命令</h4><p>Mysql的备份指令：</p>\n<ol>\n<li>指定数据库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -h localhost -uroot -proot  tuser&gt;d:\\user_2017-12-25_15-42-10.sql</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>tuser：数据库名<br>user_2017-12-25_15-42-10.sql：文件名</p>\n<ol>\n<li>指定数据库中的多个表：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -h localhost -uroot -proot --databases tuser --tables t_user t_user2&gt;d:\\user_2017-12-25_15-42-two.sql</div></pre></td></tr></table></figure>\n<p>在 –tables 之后加上所需备份的表名</p>\n<h4 id=\"定时（Spring-Task）\"><a href=\"#定时（Spring-Task）\" class=\"headerlink\" title=\"定时（Spring-Task）\"></a>定时（Spring-Task）</h4><p>了解了mysql的备份命令，那么如何实现定时呢？<br><strong>这里采用Spring的定时任务来实现，基于注解的方式。</strong></p>\n<p>主要有两点注意：</p>\n<h5 id=\"1-Spring-xml中开启定时任务注解的配置：\"><a href=\"#1-Spring-xml中开启定时任务注解的配置：\" class=\"headerlink\" title=\"1. Spring.xml中开启定时任务注解的配置：\"></a>1. Spring.xml中开启定时任务注解的配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!--开启定时任务注解--&gt;</div><div class=\"line\">&lt;task:annotation-driven /&gt;</div></pre></td></tr></table></figure>\n<p>注意在头部引入task的标签及描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class=\"line\">http://www.springframework.org/schema/task</div><div class=\"line\">http://www.springframework.org/schema/task/spring-task-4.0.xsd</div></pre></td></tr></table></figure>\n<h5 id=\"2-在相应的方法中添加注解-Scheduled\"><a href=\"#2-在相应的方法中添加注解-Scheduled\" class=\"headerlink\" title=\"2.在相应的方法中添加注解@Scheduled\"></a>2.在相应的方法中添加注解@Scheduled</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Scheduled(cron=&quot;0/5 * *  * * ? &quot;)   //每5秒执行一次</div><div class=\"line\">public void task1()&#123;</div><div class=\"line\">    System.out.println(&quot;北京时间：&quot;+new Date());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意(cron=”0/5 <em> </em>  <em> </em> ? “)  表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cron=&quot;0/5 * *  * * ? &quot;   表示每隔5s执行一次</div><div class=\"line\">cron=&quot; * * 0/1 * * ? &quot;   表示每隔1小时执行一次</div><div class=\"line\"></div><div class=\"line\">关于cronExpression的配置可以百度</div></pre></td></tr></table></figure>\n<p>对数据库  tuser  中的两张表 t_user 和 t_user2 进行备份:<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">//定时备份方案</div><div class=\"line\">   @Scheduled(cron=&quot;0/5 * *  * * ? &quot;)   //每5秒执行一次  @Scheduled(cron=&quot; * * 0/1 * * ? &quot;) 每小时一次</div><div class=\"line\">   public void back()&#123;</div><div class=\"line\">       System.out.println(&quot;现在时间是&quot;+new Date());</div><div class=\"line\">       Runtime runtime = Runtime.getRuntime();  //获取Runtime实例</div><div class=\"line\">       String user = &quot;root&quot;;</div><div class=\"line\">       String password = &quot;root&quot;;</div><div class=\"line\">       String database1 = &quot;tuser&quot;; // 需要备份的数据库名</div><div class=\"line\">       String table1 = &quot;t_user&quot;;</div><div class=\"line\">       String table2 = &quot;t_user2&quot;;</div><div class=\"line\">       Date currentDate = new Date();</div><div class=\"line\">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd_HH-mm-ss&quot;);</div><div class=\"line\">       String sdfDate = sdf.format(currentDate);</div><div class=\"line\">       String filepath = &quot;d:\\\\time_&quot; + sdfDate + &quot;.sql&quot;; // 备份的路径地址</div><div class=\"line\">       //执行命令</div><div class=\"line\">       String stmt = &quot;mysqldump  -h localhost -u &quot;+user+&quot; -p&quot;+password+&quot; --databases &quot;+database1+&quot; --tables &quot;+table1+&quot; &quot;+table2 +&quot; &gt; &quot;+filepath;   </div><div class=\"line\">       System.out.println(stmt);</div><div class=\"line\">       try &#123;</div><div class=\"line\">           String[] command = &#123; &quot;cmd&quot;, &quot;/c&quot;, stmt&#125;;</div><div class=\"line\">           Process process = runtime.exec(command);</div><div class=\"line\">           InputStream input = process.getInputStream();</div><div class=\"line\">           System.out.println(IOUtils.toString(input, &quot;UTF-8&quot;));</div><div class=\"line\">           //若有错误信息则输出</div><div class=\"line\">           InputStream errorStream = process.getErrorStream();</div><div class=\"line\">           System.out.println(IOUtils.toString(errorStream, &quot;UTF-8&quot;));</div><div class=\"line\">       &#125; catch (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、数据库的还原\"><a href=\"#二、数据库的还原\" class=\"headerlink\" title=\"二、数据库的还原\"></a>二、数据库的还原</h3><h4 id=\"还原命令\"><a href=\"#还原命令\" class=\"headerlink\" title=\"还原命令\"></a>还原命令</h4><p>可以通过两种方式来进行还原操作。</p>\n<h5 id=\"1-mysql-利用sql文件还原数据库\"><a href=\"#1-mysql-利用sql文件还原数据库\" class=\"headerlink\" title=\"1. mysql 利用sql文件还原数据库\"></a>1. mysql 利用sql文件还原数据库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -h localhost -uroot -proot tuser&lt; D:\\user_2017-12-25_15-42-10.sql</div></pre></td></tr></table></figure>\n<h5 id=\"2-source-命令\"><a href=\"#2-source-命令\" class=\"headerlink\" title=\"2. source 命令\"></a>2. source 命令</h5><p>这也是导入sql文件的方式，登录mysql之后，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source d:/game_product2018-01-02_10-41-30.sql</div></pre></td></tr></table></figure></p>\n<p>注意反斜杠的方向，“source d:\\ab.sql” 这样会执行失败。<br><strong>注：在Navicat中无法使用 source 命令</strong></p>\n<h4 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h4><p>在代码中采用第一种方式实现还原操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void restore() &#123;</div><div class=\"line\">    String user = &quot;root&quot;;</div><div class=\"line\">    String password = &quot;root&quot;;</div><div class=\"line\">    String database = &quot;tuser&quot;; // 需要备份的数据库名</div><div class=\"line\">    System.out.println(&quot;现在时间是&quot; + new Date());</div><div class=\"line\">    Runtime runtime = Runtime.getRuntime();</div><div class=\"line\"></div><div class=\"line\">    String cmd = &quot;mysql  -h localhost&quot; + &quot; -u &quot; + user + &quot; -p&quot; + password + &quot; &quot; + database;</div><div class=\"line\">    System.out.println(cmd);</div><div class=\"line\">    try &#123;</div><div class=\"line\">        String filePath =  &quot;D:\\\\user_2017-12-25_15-42-10.sql&quot;; // sql文件路径</div><div class=\"line\">        String stmt = cmd + &quot; &lt; &quot; + filePath;</div><div class=\"line\">        String[] command = &#123;&quot;cmd&quot;, &quot;/c&quot;, stmt&#125;;</div><div class=\"line\">        Process process = runtime.exec(command);</div><div class=\"line\">        //若有错误信息则输出</div><div class=\"line\">        InputStream errorStream = process.getErrorStream();</div><div class=\"line\">        System.out.println(IOUtils.toString(errorStream, &quot;utf-8&quot;));</div><div class=\"line\">        //等待操作</div><div class=\"line\">        int processComplete = process.waitFor();</div><div class=\"line\">        if (processComplete == 0) &#123;</div><div class=\"line\">            System.out.println(&quot;还原成功.&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            throw new RuntimeException(&quot;还原数据库失败.&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据库的定时备份\"><a href=\"#一、数据库的定时备份\" class=\"headerlink\" title=\"一、数据库的定时备份\"></a>一、数据库的定时备份</h3><h4 id=\"备份命令\"><a href=\"#备份命令\" class=\"headerlink\" title=\"备份命令\"></a>备份命令</h4><p>Mysql的备份指令：</p>\n<ol>\n<li>指定数据库：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -h localhost -uroot -proot  tuser&gt;d:\\user_2017-12-25_15-42-10.sql</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>tuser：数据库名<br>user_2017-12-25_15-42-10.sql：文件名</p>\n<ol>\n<li>指定数据库中的多个表：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqldump -h localhost -uroot -proot --databases tuser --tables t_user t_user2&gt;d:\\user_2017-12-25_15-42-two.sql</div></pre></td></tr></table></figure>\n<p>在 –tables 之后加上所需备份的表名</p>\n<h4 id=\"定时（Spring-Task）\"><a href=\"#定时（Spring-Task）\" class=\"headerlink\" title=\"定时（Spring-Task）\"></a>定时（Spring-Task）</h4><p>了解了mysql的备份命令，那么如何实现定时呢？<br><strong>这里采用Spring的定时任务来实现，基于注解的方式。</strong></p>\n<p>主要有两点注意：</p>\n<h5 id=\"1-Spring-xml中开启定时任务注解的配置：\"><a href=\"#1-Spring-xml中开启定时任务注解的配置：\" class=\"headerlink\" title=\"1. Spring.xml中开启定时任务注解的配置：\"></a>1. Spring.xml中开启定时任务注解的配置：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!--开启定时任务注解--&gt;</div><div class=\"line\">&lt;task:annotation-driven /&gt;</div></pre></td></tr></table></figure>\n<p>注意在头部引入task的标签及描述</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class=\"line\">http://www.springframework.org/schema/task</div><div class=\"line\">http://www.springframework.org/schema/task/spring-task-4.0.xsd</div></pre></td></tr></table></figure>\n<h5 id=\"2-在相应的方法中添加注解-Scheduled\"><a href=\"#2-在相应的方法中添加注解-Scheduled\" class=\"headerlink\" title=\"2.在相应的方法中添加注解@Scheduled\"></a>2.在相应的方法中添加注解@Scheduled</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Scheduled(cron=&quot;0/5 * *  * * ? &quot;)   //每5秒执行一次</div><div class=\"line\">public void task1()&#123;</div><div class=\"line\">    System.out.println(&quot;北京时间：&quot;+new Date());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意(cron=”0/5 <em> </em>  <em> </em> ? “)  表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cron=&quot;0/5 * *  * * ? &quot;   表示每隔5s执行一次</div><div class=\"line\">cron=&quot; * * 0/1 * * ? &quot;   表示每隔1小时执行一次</div><div class=\"line\"></div><div class=\"line\">关于cronExpression的配置可以百度</div></pre></td></tr></table></figure>\n<p>对数据库  tuser  中的两张表 t_user 和 t_user2 进行备份:<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">//定时备份方案</div><div class=\"line\">   @Scheduled(cron=&quot;0/5 * *  * * ? &quot;)   //每5秒执行一次  @Scheduled(cron=&quot; * * 0/1 * * ? &quot;) 每小时一次</div><div class=\"line\">   public void back()&#123;</div><div class=\"line\">       System.out.println(&quot;现在时间是&quot;+new Date());</div><div class=\"line\">       Runtime runtime = Runtime.getRuntime();  //获取Runtime实例</div><div class=\"line\">       String user = &quot;root&quot;;</div><div class=\"line\">       String password = &quot;root&quot;;</div><div class=\"line\">       String database1 = &quot;tuser&quot;; // 需要备份的数据库名</div><div class=\"line\">       String table1 = &quot;t_user&quot;;</div><div class=\"line\">       String table2 = &quot;t_user2&quot;;</div><div class=\"line\">       Date currentDate = new Date();</div><div class=\"line\">       SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd_HH-mm-ss&quot;);</div><div class=\"line\">       String sdfDate = sdf.format(currentDate);</div><div class=\"line\">       String filepath = &quot;d:\\\\time_&quot; + sdfDate + &quot;.sql&quot;; // 备份的路径地址</div><div class=\"line\">       //执行命令</div><div class=\"line\">       String stmt = &quot;mysqldump  -h localhost -u &quot;+user+&quot; -p&quot;+password+&quot; --databases &quot;+database1+&quot; --tables &quot;+table1+&quot; &quot;+table2 +&quot; &gt; &quot;+filepath;   </div><div class=\"line\">       System.out.println(stmt);</div><div class=\"line\">       try &#123;</div><div class=\"line\">           String[] command = &#123; &quot;cmd&quot;, &quot;/c&quot;, stmt&#125;;</div><div class=\"line\">           Process process = runtime.exec(command);</div><div class=\"line\">           InputStream input = process.getInputStream();</div><div class=\"line\">           System.out.println(IOUtils.toString(input, &quot;UTF-8&quot;));</div><div class=\"line\">           //若有错误信息则输出</div><div class=\"line\">           InputStream errorStream = process.getErrorStream();</div><div class=\"line\">           System.out.println(IOUtils.toString(errorStream, &quot;UTF-8&quot;));</div><div class=\"line\">       &#125; catch (IOException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、数据库的还原\"><a href=\"#二、数据库的还原\" class=\"headerlink\" title=\"二、数据库的还原\"></a>二、数据库的还原</h3><h4 id=\"还原命令\"><a href=\"#还原命令\" class=\"headerlink\" title=\"还原命令\"></a>还原命令</h4><p>可以通过两种方式来进行还原操作。</p>\n<h5 id=\"1-mysql-利用sql文件还原数据库\"><a href=\"#1-mysql-利用sql文件还原数据库\" class=\"headerlink\" title=\"1. mysql 利用sql文件还原数据库\"></a>1. mysql 利用sql文件还原数据库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -h localhost -uroot -proot tuser&lt; D:\\user_2017-12-25_15-42-10.sql</div></pre></td></tr></table></figure>\n<h5 id=\"2-source-命令\"><a href=\"#2-source-命令\" class=\"headerlink\" title=\"2. source 命令\"></a>2. source 命令</h5><p>这也是导入sql文件的方式，登录mysql之后，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source d:/game_product2018-01-02_10-41-30.sql</div></pre></td></tr></table></figure></p>\n<p>注意反斜杠的方向，“source d:\\ab.sql” 这样会执行失败。<br><strong>注：在Navicat中无法使用 source 命令</strong></p>\n<h4 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h4><p>在代码中采用第一种方式实现还原操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void restore() &#123;</div><div class=\"line\">    String user = &quot;root&quot;;</div><div class=\"line\">    String password = &quot;root&quot;;</div><div class=\"line\">    String database = &quot;tuser&quot;; // 需要备份的数据库名</div><div class=\"line\">    System.out.println(&quot;现在时间是&quot; + new Date());</div><div class=\"line\">    Runtime runtime = Runtime.getRuntime();</div><div class=\"line\"></div><div class=\"line\">    String cmd = &quot;mysql  -h localhost&quot; + &quot; -u &quot; + user + &quot; -p&quot; + password + &quot; &quot; + database;</div><div class=\"line\">    System.out.println(cmd);</div><div class=\"line\">    try &#123;</div><div class=\"line\">        String filePath =  &quot;D:\\\\user_2017-12-25_15-42-10.sql&quot;; // sql文件路径</div><div class=\"line\">        String stmt = cmd + &quot; &lt; &quot; + filePath;</div><div class=\"line\">        String[] command = &#123;&quot;cmd&quot;, &quot;/c&quot;, stmt&#125;;</div><div class=\"line\">        Process process = runtime.exec(command);</div><div class=\"line\">        //若有错误信息则输出</div><div class=\"line\">        InputStream errorStream = process.getErrorStream();</div><div class=\"line\">        System.out.println(IOUtils.toString(errorStream, &quot;utf-8&quot;));</div><div class=\"line\">        //等待操作</div><div class=\"line\">        int processComplete = process.waitFor();</div><div class=\"line\">        if (processComplete == 0) &#123;</div><div class=\"line\">            System.out.println(&quot;还原成功.&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            throw new RuntimeException(&quot;还原数据库失败.&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; catch (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"JS特效","date":"2017-08-07T05:15:25.000Z","_content":"\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","source":"_posts/JS特效.md","raw":"---\ntitle: JS特效\ndate: 2017-08-7 13:15:25\ncategories: 技术\n---\n\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","slug":"JS特效","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt24s000o50tcfitfyxhe","content":"<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n","site":{"data":{}},"excerpt":"","more":"<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n<script src=\"/js/src/china.js\"></script>\n<script src=\"/js/src/api.js\"></script>\n<script src=\"/js/src/bmap.js\"></script>\n\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n"},{"title":"JVM之类加载机制","date":"2017-10-24T11:34:18.000Z","_content":"\n### 一、类加载机制\n\n虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被JVM直接使用的Java类型，这就是虚拟机的**类加载机制**。\n\n#### 类加载的时机\n那么类到底什么时候会加载呢？（初始化）  \n**当对一个类进行主动引用的时候**。\n##### 主动引用\n主动引用有5种情况：\n1. new实例化对象、读取或设置一个类的静态字段时、调用一个类的静态方法时\n2. 使用java.lang.reflect包的方法对类进行反射调用时\n3. 初始化一个类时，父类还没初始化，则先触发父类的初始化\n4. 虚拟机启动时，初始化包含main()方法的主类\n5. 使用JDK1.7的动态语言支持的时候，如java.lang.invoke.MethodHandle实例\n\n##### 被动引用\n被动引用有以下几种情况：\n1. 子类调用父类的静态变量，子类不会被初始化，只有父类会被初始化。（只有定义静态字段的类才会被初始化）\n2. 通过数组来定义引用类，不会初始化\n3. 访问类的final常量(编译期静态常量)，不会初始化\n4. 通过类名获取Class对象，不会触发类的初始化(其余两种getClass()和Class.forName()会)\n```\n//类名.class获取Class对象\nClass clazz = A.class;\n```\n\n### 二、类加载过程\n\n#### 类的生命周期 \n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg.png)\n\n\n**类的生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。** 验证、准备、解析这三个阶段称为连接。\n解析阶段的顺序不是确定的，可以在初始化之后开始。\n\n**类加载过程**包括**加载、验证、准备、解析、初始化**。\n#### 加载  \nJVM完成以下3件事：\n1. 通过一个类的全限定名来获取定义此类的二进制字节流（不一定是Class文件）。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。\n\n\n注：\n- 数组类本身不通过类加载器创建，由虚拟机直接创建\n- 内存中实例化的Class对象并不是在堆中，存放于方法区（HotSpot虚拟机）\n#### 验证  \n验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求。\n主要完成以下4个检验动作：\n1. 文件格式验证：如魔数、版本号、常量类型....\n2. 元数据验证：这个类是否有父类？是不是抽象类？是否继承了不允许被继承的类？\n3. 字节码验证：对类的方法体进行校验分析，确定程序语义是合法、符合逻辑的。\n4. 符号引用验证：（发生在解析阶段）符号引用中通过字符串描述的全限定名是否能找到对应的类？...\n\n验证阶段是一个很重要但不一定是必要的阶段。\n\n#### 准备  \n**准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。**（这里的类变量仅为Static修饰的变量，不包括实例变量，实例变量是在对象实例化时随着对象分配在堆中）\n\n假设一个类变量定义为：\n```\npublic static int value = 666;\n```\n那么在准备阶段过后，初始值为0，而不是666，因为把value赋值为666的动作在初始化阶段才会执行。\n\n但是下面这种情况除外：\n\n```\npublic static final int value = 666;\n```\n当用final修饰时，会在准备阶段赋值为666。\n\n#### 解析\n**解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程。**  \n\n**符号引用**：定义在Java虚拟机规范的Class文件格式中（与虚拟机内存布局无关）  \n**直接引用**：直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。（与虚拟机内存布局相关）\n\n#### 初始化\n类初始化阶段是类加载过程的最后一步。**初始化阶段才真正开始执行类中定义的Java程序代码。**\n\n在准备阶段，类变量被赋了初始值，在初始化阶段才会真正赋值。或者说，初始化阶段是执行类构造器<clinit>()方法的过程。\n\n##### <clinit>()方法\n- <clinit>()方法是编译器自动收集类中的所有变量的赋值动作和静态语句块（static{}）中的语句合并产生的，顺序由源文件顺序决定。\n- <clinit>()方法与类的构造函数不同（实例构造器<init>()），它不需要显示地调用父类构造器，虚拟机保证子类<clinit>()方法执行之前，父类<clinit>()方法已经执行完毕。因此，JVM中第一个执行的<clinit>()方法的类是java.lang.Object。\n- <clinit>()方法对于类或接口来说不是必须的，一个类没有静态语句块或者没有对变量的赋值操作，可以没有<clinit>()方法\n- 接口中有变量初始化赋值的操作时，会生成<clinit>()方法。但接口不需要执行父接口的<clinit>()方法。接口的实现类在初始化时也不要=会执行接口的<clinit>()方法。\n- 虚拟机保证一个类的<clinit>()方法会在多线程情况下加锁、同步。只有一个线程会执行<clinit>()方法成功。\n\n### 三、类加载器\n\n在加载阶段中，**“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作的实现是由类加载器来完成的。**\n这个动作在JVM外部实现，以便让应用程序自己决定如何去获取所需要的类。\n\n**简而言之，类加载器用于实现类的加载动作。**\n\n只有由同一个类加载器加载的两个类才相等。若同一个Class文件由不同的类加载器加载，则不相等。\n\n\n#### 3种类加载器\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png)\n\n- **启动类加载器（Bootstrap ClassLoader）**：负责加载<JAVA_HOME>\\lib目录中，或者被-Xbootclasspath参数所指定的路径中，并且被虚拟机识别的如rt.jar等类库\n- **扩展类加载器（Extension ClassLoader）**：加载<JAVA_HOME>\\lib\\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库\n- **应用程序类加载器（Application ClassLoader**）：加载用户类路径（ClassPath）上指定的类库，也叫系统类加载器，程序默认的类加载器\n\n#### 双亲委派模型\n\n工作过程：**如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父加载器无法完成这个加载请求时，子加载器才会自己去加载。**\n\n\n双亲委派模型有什么好处？  \n\n保证了Java程序的稳定运行。\n例如，java.lang.Object存放在rt.jar中，无论哪一个类加载器加载这个类，最终都会委派给启动类加载器进行加载，**因此Object类在程序的各种类加载器环境中都是同一个类。**\n\n\n\n\n","source":"_posts/JVM之类加载机制.md","raw":"---\ntitle: JVM之类加载机制\ndate: 2017-10-24 19:34:18\ntags: [JVM,类加载机制]\ncategories: 技术\n---\n\n### 一、类加载机制\n\n虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被JVM直接使用的Java类型，这就是虚拟机的**类加载机制**。\n\n#### 类加载的时机\n那么类到底什么时候会加载呢？（初始化）  \n**当对一个类进行主动引用的时候**。\n##### 主动引用\n主动引用有5种情况：\n1. new实例化对象、读取或设置一个类的静态字段时、调用一个类的静态方法时\n2. 使用java.lang.reflect包的方法对类进行反射调用时\n3. 初始化一个类时，父类还没初始化，则先触发父类的初始化\n4. 虚拟机启动时，初始化包含main()方法的主类\n5. 使用JDK1.7的动态语言支持的时候，如java.lang.invoke.MethodHandle实例\n\n##### 被动引用\n被动引用有以下几种情况：\n1. 子类调用父类的静态变量，子类不会被初始化，只有父类会被初始化。（只有定义静态字段的类才会被初始化）\n2. 通过数组来定义引用类，不会初始化\n3. 访问类的final常量(编译期静态常量)，不会初始化\n4. 通过类名获取Class对象，不会触发类的初始化(其余两种getClass()和Class.forName()会)\n```\n//类名.class获取Class对象\nClass clazz = A.class;\n```\n\n### 二、类加载过程\n\n#### 类的生命周期 \n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg.png)\n\n\n**类的生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。** 验证、准备、解析这三个阶段称为连接。\n解析阶段的顺序不是确定的，可以在初始化之后开始。\n\n**类加载过程**包括**加载、验证、准备、解析、初始化**。\n#### 加载  \nJVM完成以下3件事：\n1. 通过一个类的全限定名来获取定义此类的二进制字节流（不一定是Class文件）。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。\n\n\n注：\n- 数组类本身不通过类加载器创建，由虚拟机直接创建\n- 内存中实例化的Class对象并不是在堆中，存放于方法区（HotSpot虚拟机）\n#### 验证  \n验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求。\n主要完成以下4个检验动作：\n1. 文件格式验证：如魔数、版本号、常量类型....\n2. 元数据验证：这个类是否有父类？是不是抽象类？是否继承了不允许被继承的类？\n3. 字节码验证：对类的方法体进行校验分析，确定程序语义是合法、符合逻辑的。\n4. 符号引用验证：（发生在解析阶段）符号引用中通过字符串描述的全限定名是否能找到对应的类？...\n\n验证阶段是一个很重要但不一定是必要的阶段。\n\n#### 准备  \n**准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。**（这里的类变量仅为Static修饰的变量，不包括实例变量，实例变量是在对象实例化时随着对象分配在堆中）\n\n假设一个类变量定义为：\n```\npublic static int value = 666;\n```\n那么在准备阶段过后，初始值为0，而不是666，因为把value赋值为666的动作在初始化阶段才会执行。\n\n但是下面这种情况除外：\n\n```\npublic static final int value = 666;\n```\n当用final修饰时，会在准备阶段赋值为666。\n\n#### 解析\n**解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程。**  \n\n**符号引用**：定义在Java虚拟机规范的Class文件格式中（与虚拟机内存布局无关）  \n**直接引用**：直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。（与虚拟机内存布局相关）\n\n#### 初始化\n类初始化阶段是类加载过程的最后一步。**初始化阶段才真正开始执行类中定义的Java程序代码。**\n\n在准备阶段，类变量被赋了初始值，在初始化阶段才会真正赋值。或者说，初始化阶段是执行类构造器<clinit>()方法的过程。\n\n##### <clinit>()方法\n- <clinit>()方法是编译器自动收集类中的所有变量的赋值动作和静态语句块（static{}）中的语句合并产生的，顺序由源文件顺序决定。\n- <clinit>()方法与类的构造函数不同（实例构造器<init>()），它不需要显示地调用父类构造器，虚拟机保证子类<clinit>()方法执行之前，父类<clinit>()方法已经执行完毕。因此，JVM中第一个执行的<clinit>()方法的类是java.lang.Object。\n- <clinit>()方法对于类或接口来说不是必须的，一个类没有静态语句块或者没有对变量的赋值操作，可以没有<clinit>()方法\n- 接口中有变量初始化赋值的操作时，会生成<clinit>()方法。但接口不需要执行父接口的<clinit>()方法。接口的实现类在初始化时也不要=会执行接口的<clinit>()方法。\n- 虚拟机保证一个类的<clinit>()方法会在多线程情况下加锁、同步。只有一个线程会执行<clinit>()方法成功。\n\n### 三、类加载器\n\n在加载阶段中，**“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作的实现是由类加载器来完成的。**\n这个动作在JVM外部实现，以便让应用程序自己决定如何去获取所需要的类。\n\n**简而言之，类加载器用于实现类的加载动作。**\n\n只有由同一个类加载器加载的两个类才相等。若同一个Class文件由不同的类加载器加载，则不相等。\n\n\n#### 3种类加载器\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png)\n\n- **启动类加载器（Bootstrap ClassLoader）**：负责加载<JAVA_HOME>\\lib目录中，或者被-Xbootclasspath参数所指定的路径中，并且被虚拟机识别的如rt.jar等类库\n- **扩展类加载器（Extension ClassLoader）**：加载<JAVA_HOME>\\lib\\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库\n- **应用程序类加载器（Application ClassLoader**）：加载用户类路径（ClassPath）上指定的类库，也叫系统类加载器，程序默认的类加载器\n\n#### 双亲委派模型\n\n工作过程：**如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父加载器无法完成这个加载请求时，子加载器才会自己去加载。**\n\n\n双亲委派模型有什么好处？  \n\n保证了Java程序的稳定运行。\n例如，java.lang.Object存放在rt.jar中，无论哪一个类加载器加载这个类，最终都会委派给启动类加载器进行加载，**因此Object类在程序的各种类加载器环境中都是同一个类。**\n\n\n\n\n","slug":"JVM之类加载机制","published":1,"updated":"2018-04-11T10:02:31.866Z","_id":"cjfqzt24v000r50tcmoox52b7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、类加载机制\"><a href=\"#一、类加载机制\" class=\"headerlink\" title=\"一、类加载机制\"></a>一、类加载机制</h3><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被JVM直接使用的Java类型，这就是虚拟机的<strong>类加载机制</strong>。</p>\n<h4 id=\"类加载的时机\"><a href=\"#类加载的时机\" class=\"headerlink\" title=\"类加载的时机\"></a>类加载的时机</h4><p>那么类到底什么时候会加载呢？（初始化）<br><strong>当对一个类进行主动引用的时候</strong>。</p>\n<h5 id=\"主动引用\"><a href=\"#主动引用\" class=\"headerlink\" title=\"主动引用\"></a>主动引用</h5><p>主动引用有5种情况：</p>\n<ol>\n<li>new实例化对象、读取或设置一个类的静态字段时、调用一个类的静态方法时</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用时</li>\n<li>初始化一个类时，父类还没初始化，则先触发父类的初始化</li>\n<li>虚拟机启动时，初始化包含main()方法的主类</li>\n<li>使用JDK1.7的动态语言支持的时候，如java.lang.invoke.MethodHandle实例</li>\n</ol>\n<h5 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h5><p>被动引用有以下几种情况：</p>\n<ol>\n<li>子类调用父类的静态变量，子类不会被初始化，只有父类会被初始化。（只有定义静态字段的类才会被初始化）</li>\n<li>通过数组来定义引用类，不会初始化</li>\n<li>访问类的final常量(编译期静态常量)，不会初始化</li>\n<li>通过类名获取Class对象，不会触发类的初始化(其余两种getClass()和Class.forName()会)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//类名.class获取Class对象</div><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"二、类加载过程\"><a href=\"#二、类加载过程\" class=\"headerlink\" title=\"二、类加载过程\"></a>二、类加载过程</h3><h4 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg.png\" alt=\"image\"></p>\n<p><strong>类的生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。</strong> 验证、准备、解析这三个阶段称为连接。<br>解析阶段的顺序不是确定的，可以在初始化之后开始。</p>\n<p><strong>类加载过程</strong>包括<strong>加载、验证、准备、解析、初始化</strong>。</p>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>JVM完成以下3件事：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流（不一定是Class文件）。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<p>注：</p>\n<ul>\n<li>数组类本身不通过类加载器创建，由虚拟机直接创建</li>\n<li>内存中实例化的Class对象并不是在堆中，存放于方法区（HotSpot虚拟机）<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4>验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求。<br>主要完成以下4个检验动作：</li>\n</ul>\n<ol>\n<li>文件格式验证：如魔数、版本号、常量类型….</li>\n<li>元数据验证：这个类是否有父类？是不是抽象类？是否继承了不允许被继承的类？</li>\n<li>字节码验证：对类的方法体进行校验分析，确定程序语义是合法、符合逻辑的。</li>\n<li>符号引用验证：（发生在解析阶段）符号引用中通过字符串描述的全限定名是否能找到对应的类？…</li>\n</ol>\n<p>验证阶段是一个很重要但不一定是必要的阶段。</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</strong>（这里的类变量仅为Static修饰的变量，不包括实例变量，实例变量是在对象实例化时随着对象分配在堆中）</p>\n<p>假设一个类变量定义为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int value = 666;</div></pre></td></tr></table></figure></p>\n<p>那么在准备阶段过后，初始值为0，而不是666，因为把value赋值为666的动作在初始化阶段才会执行。</p>\n<p>但是下面这种情况除外：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int value = 666;</div></pre></td></tr></table></figure>\n<p>当用final修饰时，会在准备阶段赋值为666。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p><strong>解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程。</strong>  </p>\n<p><strong>符号引用</strong>：定义在Java虚拟机规范的Class文件格式中（与虚拟机内存布局无关）<br><strong>直接引用</strong>：直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。（与虚拟机内存布局相关）</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>类初始化阶段是类加载过程的最后一步。<strong>初始化阶段才真正开始执行类中定义的Java程序代码。</strong></p>\n<p>在准备阶段，类变量被赋了初始值，在初始化阶段才会真正赋值。或者说，初始化阶段是执行类构造器<clinit>()方法的过程。</clinit></p>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"()方法\"></a><clinit>()方法</clinit></h5><ul>\n<li><clinit>()方法是编译器自动收集类中的所有变量的赋值动作和静态语句块（static{}）中的语句合并产生的，顺序由源文件顺序决定。</clinit></li>\n<li><clinit>()方法与类的构造函数不同（实例构造器<init>()），它不需要显示地调用父类构造器，虚拟机保证子类<clinit>()方法执行之前，父类<clinit>()方法已经执行完毕。因此，JVM中第一个执行的<clinit>()方法的类是java.lang.Object。</clinit></clinit></clinit></init></clinit></li>\n<li><clinit>()方法对于类或接口来说不是必须的，一个类没有静态语句块或者没有对变量的赋值操作，可以没有<clinit>()方法</clinit></clinit></li>\n<li>接口中有变量初始化赋值的操作时，会生成<clinit>()方法。但接口不需要执行父接口的<clinit>()方法。接口的实现类在初始化时也不要=会执行接口的<clinit>()方法。</clinit></clinit></clinit></li>\n<li>虚拟机保证一个类的<clinit>()方法会在多线程情况下加锁、同步。只有一个线程会执行<clinit>()方法成功。</clinit></clinit></li>\n</ul>\n<h3 id=\"三、类加载器\"><a href=\"#三、类加载器\" class=\"headerlink\" title=\"三、类加载器\"></a>三、类加载器</h3><p>在加载阶段中，<strong>“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作的实现是由类加载器来完成的。</strong><br>这个动作在JVM外部实现，以便让应用程序自己决定如何去获取所需要的类。</p>\n<p><strong>简而言之，类加载器用于实现类的加载动作。</strong></p>\n<p>只有由同一个类加载器加载的两个类才相等。若同一个Class文件由不同的类加载器加载，则不相等。</p>\n<h4 id=\"3种类加载器\"><a href=\"#3种类加载器\" class=\"headerlink\" title=\"3种类加载器\"></a>3种类加载器</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png\" alt=\"image\"></p>\n<ul>\n<li><strong>启动类加载器（Bootstrap ClassLoader）</strong>：负责加载<java_home>\\lib目录中，或者被-Xbootclasspath参数所指定的路径中，并且被虚拟机识别的如rt.jar等类库</java_home></li>\n<li><strong>扩展类加载器（Extension ClassLoader）</strong>：加载<java_home>\\lib\\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库</java_home></li>\n<li><strong>应用程序类加载器（Application ClassLoader</strong>）：加载用户类路径（ClassPath）上指定的类库，也叫系统类加载器，程序默认的类加载器</li>\n</ul>\n<h4 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h4><p>工作过程：<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父加载器无法完成这个加载请求时，子加载器才会自己去加载。</strong></p>\n<p>双亲委派模型有什么好处？  </p>\n<p>保证了Java程序的稳定运行。<br>例如，java.lang.Object存放在rt.jar中，无论哪一个类加载器加载这个类，最终都会委派给启动类加载器进行加载，<strong>因此Object类在程序的各种类加载器环境中都是同一个类。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、类加载机制\"><a href=\"#一、类加载机制\" class=\"headerlink\" title=\"一、类加载机制\"></a>一、类加载机制</h3><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被JVM直接使用的Java类型，这就是虚拟机的<strong>类加载机制</strong>。</p>\n<h4 id=\"类加载的时机\"><a href=\"#类加载的时机\" class=\"headerlink\" title=\"类加载的时机\"></a>类加载的时机</h4><p>那么类到底什么时候会加载呢？（初始化）<br><strong>当对一个类进行主动引用的时候</strong>。</p>\n<h5 id=\"主动引用\"><a href=\"#主动引用\" class=\"headerlink\" title=\"主动引用\"></a>主动引用</h5><p>主动引用有5种情况：</p>\n<ol>\n<li>new实例化对象、读取或设置一个类的静态字段时、调用一个类的静态方法时</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用时</li>\n<li>初始化一个类时，父类还没初始化，则先触发父类的初始化</li>\n<li>虚拟机启动时，初始化包含main()方法的主类</li>\n<li>使用JDK1.7的动态语言支持的时候，如java.lang.invoke.MethodHandle实例</li>\n</ol>\n<h5 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h5><p>被动引用有以下几种情况：</p>\n<ol>\n<li>子类调用父类的静态变量，子类不会被初始化，只有父类会被初始化。（只有定义静态字段的类才会被初始化）</li>\n<li>通过数组来定义引用类，不会初始化</li>\n<li>访问类的final常量(编译期静态常量)，不会初始化</li>\n<li>通过类名获取Class对象，不会触发类的初始化(其余两种getClass()和Class.forName()会)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//类名.class获取Class对象</div><div class=\"line\">Class clazz = A.class;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"二、类加载过程\"><a href=\"#二、类加载过程\" class=\"headerlink\" title=\"二、类加载过程\"></a>二、类加载过程</h3><h4 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.jpg.png\" alt=\"image\"></p>\n<p><strong>类的生命周期包括：加载、验证、准备、解析、初始化、使用和卸载7个阶段。</strong> 验证、准备、解析这三个阶段称为连接。<br>解析阶段的顺序不是确定的，可以在初始化之后开始。</p>\n<p><strong>类加载过程</strong>包括<strong>加载、验证、准备、解析、初始化</strong>。</p>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>JVM完成以下3件事：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流（不一定是Class文件）。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<p>注：</p>\n<ul>\n<li>数组类本身不通过类加载器创建，由虚拟机直接创建</li>\n<li>内存中实例化的Class对象并不是在堆中，存放于方法区（HotSpot虚拟机）<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4>验证的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求。<br>主要完成以下4个检验动作：</li>\n</ul>\n<ol>\n<li>文件格式验证：如魔数、版本号、常量类型….</li>\n<li>元数据验证：这个类是否有父类？是不是抽象类？是否继承了不允许被继承的类？</li>\n<li>字节码验证：对类的方法体进行校验分析，确定程序语义是合法、符合逻辑的。</li>\n<li>符号引用验证：（发生在解析阶段）符号引用中通过字符串描述的全限定名是否能找到对应的类？…</li>\n</ol>\n<p>验证阶段是一个很重要但不一定是必要的阶段。</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。</strong>（这里的类变量仅为Static修饰的变量，不包括实例变量，实例变量是在对象实例化时随着对象分配在堆中）</p>\n<p>假设一个类变量定义为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int value = 666;</div></pre></td></tr></table></figure></p>\n<p>那么在准备阶段过后，初始值为0，而不是666，因为把value赋值为666的动作在初始化阶段才会执行。</p>\n<p>但是下面这种情况除外：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int value = 666;</div></pre></td></tr></table></figure>\n<p>当用final修饰时，会在准备阶段赋值为666。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p><strong>解析阶段是虚拟机将常量池中的符号引用替换为直接引用的过程。</strong>  </p>\n<p><strong>符号引用</strong>：定义在Java虚拟机规范的Class文件格式中（与虚拟机内存布局无关）<br><strong>直接引用</strong>：直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。（与虚拟机内存布局相关）</p>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>类初始化阶段是类加载过程的最后一步。<strong>初始化阶段才真正开始执行类中定义的Java程序代码。</strong></p>\n<p>在准备阶段，类变量被赋了初始值，在初始化阶段才会真正赋值。或者说，初始化阶段是执行类构造器<clinit>()方法的过程。</clinit></p>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"()方法\"></a><clinit>()方法</clinit></h5><ul>\n<li><clinit>()方法是编译器自动收集类中的所有变量的赋值动作和静态语句块（static{}）中的语句合并产生的，顺序由源文件顺序决定。</clinit></li>\n<li><clinit>()方法与类的构造函数不同（实例构造器<init>()），它不需要显示地调用父类构造器，虚拟机保证子类<clinit>()方法执行之前，父类<clinit>()方法已经执行完毕。因此，JVM中第一个执行的<clinit>()方法的类是java.lang.Object。</clinit></clinit></clinit></init></clinit></li>\n<li><clinit>()方法对于类或接口来说不是必须的，一个类没有静态语句块或者没有对变量的赋值操作，可以没有<clinit>()方法</clinit></clinit></li>\n<li>接口中有变量初始化赋值的操作时，会生成<clinit>()方法。但接口不需要执行父接口的<clinit>()方法。接口的实现类在初始化时也不要=会执行接口的<clinit>()方法。</clinit></clinit></clinit></li>\n<li>虚拟机保证一个类的<clinit>()方法会在多线程情况下加锁、同步。只有一个线程会执行<clinit>()方法成功。</clinit></clinit></li>\n</ul>\n<h3 id=\"三、类加载器\"><a href=\"#三、类加载器\" class=\"headerlink\" title=\"三、类加载器\"></a>三、类加载器</h3><p>在加载阶段中，<strong>“通过一个类的全限定名来获取定义此类的二进制字节流”这个动作的实现是由类加载器来完成的。</strong><br>这个动作在JVM外部实现，以便让应用程序自己决定如何去获取所需要的类。</p>\n<p><strong>简而言之，类加载器用于实现类的加载动作。</strong></p>\n<p>只有由同一个类加载器加载的两个类才相等。若同一个Class文件由不同的类加载器加载，则不相等。</p>\n<h4 id=\"3种类加载器\"><a href=\"#3种类加载器\" class=\"headerlink\" title=\"3种类加载器\"></a>3种类加载器</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png\" alt=\"image\"></p>\n<ul>\n<li><strong>启动类加载器（Bootstrap ClassLoader）</strong>：负责加载<java_home>\\lib目录中，或者被-Xbootclasspath参数所指定的路径中，并且被虚拟机识别的如rt.jar等类库</java_home></li>\n<li><strong>扩展类加载器（Extension ClassLoader）</strong>：加载<java_home>\\lib\\ext目录中的，或通过java.ext.dirs系统变量指定路径中的类库</java_home></li>\n<li><strong>应用程序类加载器（Application ClassLoader</strong>）：加载用户类路径（ClassPath）上指定的类库，也叫系统类加载器，程序默认的类加载器</li>\n</ul>\n<h4 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h4><p>工作过程：<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父加载器无法完成这个加载请求时，子加载器才会自己去加载。</strong></p>\n<p>双亲委派模型有什么好处？  </p>\n<p>保证了Java程序的稳定运行。<br>例如，java.lang.Object存放在rt.jar中，无论哪一个类加载器加载这个类，最终都会委派给启动类加载器进行加载，<strong>因此Object类在程序的各种类加载器环境中都是同一个类。</strong></p>\n"},{"title":"Java并发之Condition的实现分析","date":"2017-12-01T07:42:18.000Z","_content":"### 一、Condition的概念\n\n#### 介绍\n回忆synchronized关键字，它配合Object的wait()、notify()系列方法可以实现等待/通知模式。\n\n对于Lock，通过Condition也可以实现等待/通知模式。\n\n\n\nCondition是一个接口。  \nCondition接口的实现类是Lock（AQS）中的ConditionObject。  \nLock接口中有个 newCondition()方法，通过这个方法可以获得Condition对象（其实就是ConditionObject）。  \n因此，**通过Lock对象可以获得Condition对象。**\n```\nLock lock  = new ReentrantLock();\nCondition c1 = lock.newCondition();\nCondition c2 = lock.newCondition();\n```\n\n\n\n### 二、Condition的实现分析\n\n#### 实现\n\nConditionObject类是AQS的内部类，实现了Condition接口。\n\n```\npublic class ConditionObject implements Condition, java.io.Serializable {\n        private transient Node firstWaiter;\n        private transient Node lastWaiter;\n        ...\n```\n可以看到，等待队列和同步队列一样，使用的都是同步器AQS中的节点类Node。\n同样拥有首节点和尾节点，\n每个Condition对象都包含着一个FIFO队列。  \n结构图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/condition.jpg)\n\n#### 等待\n\n调用Condition的await()方法会使线程进入等待队列，并释放锁，线程状态变为等待状态。\n```\npublic final void await() throws InterruptedException {\n            if (Thread.interrupted())\n                throw new InterruptedException();\n            Node node = addConditionWaiter();\n            //释放同步状态（锁）\n            int savedState = fullyRelease(node);\n            int interruptMode = 0;\n            //判断节点是否放入同步对列\n            while (!isOnSyncQueue(node)) {\n                //阻塞\n                LockSupport.park(this);\n                //如果已经中断了，则退出\n                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                    break;\n            }\n            if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n                interruptMode = REINTERRUPT;\n            if (node.nextWaiter != null) // clean up if cancelled\n                unlinkCancelledWaiters();\n            if (interruptMode != 0)\n                reportInterruptAfterWait(interruptMode);\n        }\n```\n\n分析上述方法的大概过程：\n1. 将当前线程创建为节点，加入等待队列\n2. 释放锁，唤醒同步队列中的后继节点\n3. while循环判断节点是否放入同步队列：\n\n- 没有放入，则阻塞，继续while循环（如果已经中断了，则退出）\n- 放入，则退出while循环，执行后面的判断\n4. 退出while说明节点已经在同步队列中，调用acquireQueued()方法加入同步状态竞争。\n5. 竞争到锁后从await()方法返回，即退出该方法。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/enterCon.png)\n\n**addConditionWaiter()方法：**\n```\nprivate Node addConditionWaiter() {\n            Node t = lastWaiter;\n            if (t != null && t.waitStatus != Node.CONDITION) {\n                //清除条件队列中所有状态不为Condition的节点\n                unlinkCancelledWaiters();\n                t = lastWaiter;\n            }\n            //将该线程创建节点，放入等待队列\n            Node node = new Node(Thread.currentThread(), Node.CONDITION);\n            if (t == null)\n                firstWaiter = node;\n            else\n                t.nextWaiter = node;\n            lastWaiter = node;\n            return node;\n        }\n```\n\n过程分析：同步队列的首节点移动到等待队列。加入尾节点之前会清除所有状态不为Condition的节点。\n\n\n---\n#### 通知\n调用Condition的signal()方法，可以唤醒等待队列的首节点（等待时间最长），唤醒之前会将该节点移动到同步队列中。\n\n```\npublic final void signal() {\n            //判断是否获取了锁\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                doSignal(first);\n        }\n```\n过程：\n1. 先判断当前线程是否获取了锁\n2. 然后对首节点调用doSignal()方法\n\n```\nprivate void doSignal(Node first) {\n            do {\n                if ( (firstWaiter = first.nextWaiter) == null)\n                    lastWaiter = null;\n                first.nextWaiter = null;\n            } while (!transferForSignal(first) &&\n                     (first = firstWaiter) != null);\n        }\n```\n过程：\n1. 修改首节点\n2. 调用transferForSignal()方法将节点移动到同步队列\n\n\n```\nfinal boolean transferForSignal(Node node) {\n        //将节点状态变为0   \n        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n            return false;\n        //将该节点加入同步队列\n        Node p = enq(node);\n        int ws = p.waitStatus;\n        //如果结点p的状态为cancel 或者修改waitStatus失败，则直接唤醒\n        if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n            LockSupport.unpark(node.thread);\n        return true;\n    }\n```\n调用同步器的enq方法，将节点移动到同步队列，\n满足条件后使用LockSupport唤醒该线程。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/signalcon.png)\n\n\n---\n当Condition调用signalAll()方法：\n```\npublic final void signalAll() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                doSignalAll(first);\n        }\nprivate void doSignalAll(Node first) {\n            lastWaiter = firstWaiter = null;\n            do {\n                Node next = first.nextWaiter;\n                first.nextWaiter = null;\n                transferForSignal(first);\n                first = next;\n            } while (first != null);\n        }\n```\n可以看到doSignalAll()方法使用了do-while循环来唤醒每一个等待队列中的节点，直到first为null时，停止循环。\n\n一句话总结signalAll()的作用：**将等待队列中的全部节点移动到同步队列中，并唤醒每个节点的线程。**\n\n\n#### 总结\n整个过程可以分为三步：\n\n第一步：一个线程获取锁后，通过调用Condition的await()方法，会将当前线程先加入到等待队列中，并释放锁。然后就在await()中的一个while循环中判断节点是否已经在同步队列，是则尝试获取锁，否则一直阻塞。\n\n\n第二步：当线程调用signal()方法后，程序首先检查当前线程是否获取了锁，然后通过doSignal(Node first)方法将节点移动到同步队列，并唤醒节点中的线程。\n\n\n第三步：被唤醒的线程，将从await()中的while循环中退出来，然后调用acquireQueued()方法竞争同步状态。竞争成功则退出await()方法，继续执行。\n\n","source":"_posts/Java并发之Condition的实现分析.md","raw":"---\ntitle: Java并发之Condition的实现分析\ndate: 2017-12-1 15:42:18\ntags: [并发,Condition]\ncategories: 技术\n---\n### 一、Condition的概念\n\n#### 介绍\n回忆synchronized关键字，它配合Object的wait()、notify()系列方法可以实现等待/通知模式。\n\n对于Lock，通过Condition也可以实现等待/通知模式。\n\n\n\nCondition是一个接口。  \nCondition接口的实现类是Lock（AQS）中的ConditionObject。  \nLock接口中有个 newCondition()方法，通过这个方法可以获得Condition对象（其实就是ConditionObject）。  \n因此，**通过Lock对象可以获得Condition对象。**\n```\nLock lock  = new ReentrantLock();\nCondition c1 = lock.newCondition();\nCondition c2 = lock.newCondition();\n```\n\n\n\n### 二、Condition的实现分析\n\n#### 实现\n\nConditionObject类是AQS的内部类，实现了Condition接口。\n\n```\npublic class ConditionObject implements Condition, java.io.Serializable {\n        private transient Node firstWaiter;\n        private transient Node lastWaiter;\n        ...\n```\n可以看到，等待队列和同步队列一样，使用的都是同步器AQS中的节点类Node。\n同样拥有首节点和尾节点，\n每个Condition对象都包含着一个FIFO队列。  \n结构图：\n\n![image](http://osuskkx7k.bkt.clouddn.com/condition.jpg)\n\n#### 等待\n\n调用Condition的await()方法会使线程进入等待队列，并释放锁，线程状态变为等待状态。\n```\npublic final void await() throws InterruptedException {\n            if (Thread.interrupted())\n                throw new InterruptedException();\n            Node node = addConditionWaiter();\n            //释放同步状态（锁）\n            int savedState = fullyRelease(node);\n            int interruptMode = 0;\n            //判断节点是否放入同步对列\n            while (!isOnSyncQueue(node)) {\n                //阻塞\n                LockSupport.park(this);\n                //如果已经中断了，则退出\n                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                    break;\n            }\n            if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n                interruptMode = REINTERRUPT;\n            if (node.nextWaiter != null) // clean up if cancelled\n                unlinkCancelledWaiters();\n            if (interruptMode != 0)\n                reportInterruptAfterWait(interruptMode);\n        }\n```\n\n分析上述方法的大概过程：\n1. 将当前线程创建为节点，加入等待队列\n2. 释放锁，唤醒同步队列中的后继节点\n3. while循环判断节点是否放入同步队列：\n\n- 没有放入，则阻塞，继续while循环（如果已经中断了，则退出）\n- 放入，则退出while循环，执行后面的判断\n4. 退出while说明节点已经在同步队列中，调用acquireQueued()方法加入同步状态竞争。\n5. 竞争到锁后从await()方法返回，即退出该方法。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/enterCon.png)\n\n**addConditionWaiter()方法：**\n```\nprivate Node addConditionWaiter() {\n            Node t = lastWaiter;\n            if (t != null && t.waitStatus != Node.CONDITION) {\n                //清除条件队列中所有状态不为Condition的节点\n                unlinkCancelledWaiters();\n                t = lastWaiter;\n            }\n            //将该线程创建节点，放入等待队列\n            Node node = new Node(Thread.currentThread(), Node.CONDITION);\n            if (t == null)\n                firstWaiter = node;\n            else\n                t.nextWaiter = node;\n            lastWaiter = node;\n            return node;\n        }\n```\n\n过程分析：同步队列的首节点移动到等待队列。加入尾节点之前会清除所有状态不为Condition的节点。\n\n\n---\n#### 通知\n调用Condition的signal()方法，可以唤醒等待队列的首节点（等待时间最长），唤醒之前会将该节点移动到同步队列中。\n\n```\npublic final void signal() {\n            //判断是否获取了锁\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                doSignal(first);\n        }\n```\n过程：\n1. 先判断当前线程是否获取了锁\n2. 然后对首节点调用doSignal()方法\n\n```\nprivate void doSignal(Node first) {\n            do {\n                if ( (firstWaiter = first.nextWaiter) == null)\n                    lastWaiter = null;\n                first.nextWaiter = null;\n            } while (!transferForSignal(first) &&\n                     (first = firstWaiter) != null);\n        }\n```\n过程：\n1. 修改首节点\n2. 调用transferForSignal()方法将节点移动到同步队列\n\n\n```\nfinal boolean transferForSignal(Node node) {\n        //将节点状态变为0   \n        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n            return false;\n        //将该节点加入同步队列\n        Node p = enq(node);\n        int ws = p.waitStatus;\n        //如果结点p的状态为cancel 或者修改waitStatus失败，则直接唤醒\n        if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n            LockSupport.unpark(node.thread);\n        return true;\n    }\n```\n调用同步器的enq方法，将节点移动到同步队列，\n满足条件后使用LockSupport唤醒该线程。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/signalcon.png)\n\n\n---\n当Condition调用signalAll()方法：\n```\npublic final void signalAll() {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            if (first != null)\n                doSignalAll(first);\n        }\nprivate void doSignalAll(Node first) {\n            lastWaiter = firstWaiter = null;\n            do {\n                Node next = first.nextWaiter;\n                first.nextWaiter = null;\n                transferForSignal(first);\n                first = next;\n            } while (first != null);\n        }\n```\n可以看到doSignalAll()方法使用了do-while循环来唤醒每一个等待队列中的节点，直到first为null时，停止循环。\n\n一句话总结signalAll()的作用：**将等待队列中的全部节点移动到同步队列中，并唤醒每个节点的线程。**\n\n\n#### 总结\n整个过程可以分为三步：\n\n第一步：一个线程获取锁后，通过调用Condition的await()方法，会将当前线程先加入到等待队列中，并释放锁。然后就在await()中的一个while循环中判断节点是否已经在同步队列，是则尝试获取锁，否则一直阻塞。\n\n\n第二步：当线程调用signal()方法后，程序首先检查当前线程是否获取了锁，然后通过doSignal(Node first)方法将节点移动到同步队列，并唤醒节点中的线程。\n\n\n第三步：被唤醒的线程，将从await()中的while循环中退出来，然后调用acquireQueued()方法竞争同步状态。竞争成功则退出await()方法，继续执行。\n\n","slug":"Java并发之Condition的实现分析","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt24x000t50tckfdkhp0o","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、Condition的概念\"><a href=\"#一、Condition的概念\" class=\"headerlink\" title=\"一、Condition的概念\"></a>一、Condition的概念</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>回忆synchronized关键字，它配合Object的wait()、notify()系列方法可以实现等待/通知模式。</p>\n<p>对于Lock，通过Condition也可以实现等待/通知模式。</p>\n<p>Condition是一个接口。<br>Condition接口的实现类是Lock（AQS）中的ConditionObject。<br>Lock接口中有个 newCondition()方法，通过这个方法可以获得Condition对象（其实就是ConditionObject）。<br>因此，<strong>通过Lock对象可以获得Condition对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lock lock  = new ReentrantLock();</div><div class=\"line\">Condition c1 = lock.newCondition();</div><div class=\"line\">Condition c2 = lock.newCondition();</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、Condition的实现分析\"><a href=\"#二、Condition的实现分析\" class=\"headerlink\" title=\"二、Condition的实现分析\"></a>二、Condition的实现分析</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>ConditionObject类是AQS的内部类，实现了Condition接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ConditionObject implements Condition, java.io.Serializable &#123;</div><div class=\"line\">        private transient Node firstWaiter;</div><div class=\"line\">        private transient Node lastWaiter;</div><div class=\"line\">        ...</div></pre></td></tr></table></figure>\n<p>可以看到，等待队列和同步队列一样，使用的都是同步器AQS中的节点类Node。<br>同样拥有首节点和尾节点，<br>每个Condition对象都包含着一个FIFO队列。<br>结构图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/condition.jpg\" alt=\"image\"></p>\n<h4 id=\"等待\"><a href=\"#等待\" class=\"headerlink\" title=\"等待\"></a>等待</h4><p>调用Condition的await()方法会使线程进入等待队列，并释放锁，线程状态变为等待状态。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void await() throws InterruptedException &#123;</div><div class=\"line\">            if (Thread.interrupted())</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">            Node node = addConditionWaiter();</div><div class=\"line\">            //释放同步状态（锁）</div><div class=\"line\">            int savedState = fullyRelease(node);</div><div class=\"line\">            int interruptMode = 0;</div><div class=\"line\">            //判断节点是否放入同步对列</div><div class=\"line\">            while (!isOnSyncQueue(node)) &#123;</div><div class=\"line\">                //阻塞</div><div class=\"line\">                LockSupport.park(this);</div><div class=\"line\">                //如果已经中断了，则退出</div><div class=\"line\">                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class=\"line\">                interruptMode = REINTERRUPT;</div><div class=\"line\">            if (node.nextWaiter != null) // clean up if cancelled</div><div class=\"line\">                unlinkCancelledWaiters();</div><div class=\"line\">            if (interruptMode != 0)</div><div class=\"line\">                reportInterruptAfterWait(interruptMode);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>分析上述方法的大概过程：</p>\n<ol>\n<li>将当前线程创建为节点，加入等待队列</li>\n<li>释放锁，唤醒同步队列中的后继节点</li>\n<li>while循环判断节点是否放入同步队列：</li>\n</ol>\n<ul>\n<li>没有放入，则阻塞，继续while循环（如果已经中断了，则退出）</li>\n<li>放入，则退出while循环，执行后面的判断</li>\n</ul>\n<ol>\n<li>退出while说明节点已经在同步队列中，调用acquireQueued()方法加入同步状态竞争。</li>\n<li>竞争到锁后从await()方法返回，即退出该方法。  </li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/enterCon.png\" alt=\"image\"></p>\n<p><strong>addConditionWaiter()方法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addConditionWaiter() &#123;</div><div class=\"line\">            Node t = lastWaiter;</div><div class=\"line\">            if (t != null &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</div><div class=\"line\">                //清除条件队列中所有状态不为Condition的节点</div><div class=\"line\">                unlinkCancelledWaiters();</div><div class=\"line\">                t = lastWaiter;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //将该线程创建节点，放入等待队列</div><div class=\"line\">            Node node = new Node(Thread.currentThread(), Node.CONDITION);</div><div class=\"line\">            if (t == null)</div><div class=\"line\">                firstWaiter = node;</div><div class=\"line\">            else</div><div class=\"line\">                t.nextWaiter = node;</div><div class=\"line\">            lastWaiter = node;</div><div class=\"line\">            return node;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>过程分析：同步队列的首节点移动到等待队列。加入尾节点之前会清除所有状态不为Condition的节点。</p>\n<hr>\n<h4 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h4><p>调用Condition的signal()方法，可以唤醒等待队列的首节点（等待时间最长），唤醒之前会将该节点移动到同步队列中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signal() &#123;</div><div class=\"line\">            //判断是否获取了锁</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            Node first = firstWaiter;</div><div class=\"line\">            if (first != null)</div><div class=\"line\">                doSignal(first);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>过程：</p>\n<ol>\n<li>先判断当前线程是否获取了锁</li>\n<li>然后对首节点调用doSignal()方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doSignal(Node first) &#123;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                if ( (firstWaiter = first.nextWaiter) == null)</div><div class=\"line\">                    lastWaiter = null;</div><div class=\"line\">                first.nextWaiter = null;</div><div class=\"line\">            &#125; while (!transferForSignal(first) &amp;&amp;</div><div class=\"line\">                     (first = firstWaiter) != null);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>过程：</p>\n<ol>\n<li>修改首节点</li>\n<li>调用transferForSignal()方法将节点移动到同步队列</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean transferForSignal(Node node) &#123;</div><div class=\"line\">        //将节点状态变为0   </div><div class=\"line\">        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))</div><div class=\"line\">            return false;</div><div class=\"line\">        //将该节点加入同步队列</div><div class=\"line\">        Node p = enq(node);</div><div class=\"line\">        int ws = p.waitStatus;</div><div class=\"line\">        //如果结点p的状态为cancel 或者修改waitStatus失败，则直接唤醒</div><div class=\"line\">        if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</div><div class=\"line\">            LockSupport.unpark(node.thread);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用同步器的enq方法，将节点移动到同步队列，<br>满足条件后使用LockSupport唤醒该线程。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/signalcon.png\" alt=\"image\"></p>\n<hr>\n<p>当Condition调用signalAll()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signalAll() &#123;</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            Node first = firstWaiter;</div><div class=\"line\">            if (first != null)</div><div class=\"line\">                doSignalAll(first);</div><div class=\"line\">        &#125;</div><div class=\"line\">private void doSignalAll(Node first) &#123;</div><div class=\"line\">            lastWaiter = firstWaiter = null;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                Node next = first.nextWaiter;</div><div class=\"line\">                first.nextWaiter = null;</div><div class=\"line\">                transferForSignal(first);</div><div class=\"line\">                first = next;</div><div class=\"line\">            &#125; while (first != null);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到doSignalAll()方法使用了do-while循环来唤醒每一个等待队列中的节点，直到first为null时，停止循环。</p>\n<p>一句话总结signalAll()的作用：<strong>将等待队列中的全部节点移动到同步队列中，并唤醒每个节点的线程。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>整个过程可以分为三步：</p>\n<p>第一步：一个线程获取锁后，通过调用Condition的await()方法，会将当前线程先加入到等待队列中，并释放锁。然后就在await()中的一个while循环中判断节点是否已经在同步队列，是则尝试获取锁，否则一直阻塞。</p>\n<p>第二步：当线程调用signal()方法后，程序首先检查当前线程是否获取了锁，然后通过doSignal(Node first)方法将节点移动到同步队列，并唤醒节点中的线程。</p>\n<p>第三步：被唤醒的线程，将从await()中的while循环中退出来，然后调用acquireQueued()方法竞争同步状态。竞争成功则退出await()方法，继续执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Condition的概念\"><a href=\"#一、Condition的概念\" class=\"headerlink\" title=\"一、Condition的概念\"></a>一、Condition的概念</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>回忆synchronized关键字，它配合Object的wait()、notify()系列方法可以实现等待/通知模式。</p>\n<p>对于Lock，通过Condition也可以实现等待/通知模式。</p>\n<p>Condition是一个接口。<br>Condition接口的实现类是Lock（AQS）中的ConditionObject。<br>Lock接口中有个 newCondition()方法，通过这个方法可以获得Condition对象（其实就是ConditionObject）。<br>因此，<strong>通过Lock对象可以获得Condition对象。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lock lock  = new ReentrantLock();</div><div class=\"line\">Condition c1 = lock.newCondition();</div><div class=\"line\">Condition c2 = lock.newCondition();</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、Condition的实现分析\"><a href=\"#二、Condition的实现分析\" class=\"headerlink\" title=\"二、Condition的实现分析\"></a>二、Condition的实现分析</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>ConditionObject类是AQS的内部类，实现了Condition接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ConditionObject implements Condition, java.io.Serializable &#123;</div><div class=\"line\">        private transient Node firstWaiter;</div><div class=\"line\">        private transient Node lastWaiter;</div><div class=\"line\">        ...</div></pre></td></tr></table></figure>\n<p>可以看到，等待队列和同步队列一样，使用的都是同步器AQS中的节点类Node。<br>同样拥有首节点和尾节点，<br>每个Condition对象都包含着一个FIFO队列。<br>结构图：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/condition.jpg\" alt=\"image\"></p>\n<h4 id=\"等待\"><a href=\"#等待\" class=\"headerlink\" title=\"等待\"></a>等待</h4><p>调用Condition的await()方法会使线程进入等待队列，并释放锁，线程状态变为等待状态。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void await() throws InterruptedException &#123;</div><div class=\"line\">            if (Thread.interrupted())</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">            Node node = addConditionWaiter();</div><div class=\"line\">            //释放同步状态（锁）</div><div class=\"line\">            int savedState = fullyRelease(node);</div><div class=\"line\">            int interruptMode = 0;</div><div class=\"line\">            //判断节点是否放入同步对列</div><div class=\"line\">            while (!isOnSyncQueue(node)) &#123;</div><div class=\"line\">                //阻塞</div><div class=\"line\">                LockSupport.park(this);</div><div class=\"line\">                //如果已经中断了，则退出</div><div class=\"line\">                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class=\"line\">                interruptMode = REINTERRUPT;</div><div class=\"line\">            if (node.nextWaiter != null) // clean up if cancelled</div><div class=\"line\">                unlinkCancelledWaiters();</div><div class=\"line\">            if (interruptMode != 0)</div><div class=\"line\">                reportInterruptAfterWait(interruptMode);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>分析上述方法的大概过程：</p>\n<ol>\n<li>将当前线程创建为节点，加入等待队列</li>\n<li>释放锁，唤醒同步队列中的后继节点</li>\n<li>while循环判断节点是否放入同步队列：</li>\n</ol>\n<ul>\n<li>没有放入，则阻塞，继续while循环（如果已经中断了，则退出）</li>\n<li>放入，则退出while循环，执行后面的判断</li>\n</ul>\n<ol>\n<li>退出while说明节点已经在同步队列中，调用acquireQueued()方法加入同步状态竞争。</li>\n<li>竞争到锁后从await()方法返回，即退出该方法。  </li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/enterCon.png\" alt=\"image\"></p>\n<p><strong>addConditionWaiter()方法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addConditionWaiter() &#123;</div><div class=\"line\">            Node t = lastWaiter;</div><div class=\"line\">            if (t != null &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</div><div class=\"line\">                //清除条件队列中所有状态不为Condition的节点</div><div class=\"line\">                unlinkCancelledWaiters();</div><div class=\"line\">                t = lastWaiter;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //将该线程创建节点，放入等待队列</div><div class=\"line\">            Node node = new Node(Thread.currentThread(), Node.CONDITION);</div><div class=\"line\">            if (t == null)</div><div class=\"line\">                firstWaiter = node;</div><div class=\"line\">            else</div><div class=\"line\">                t.nextWaiter = node;</div><div class=\"line\">            lastWaiter = node;</div><div class=\"line\">            return node;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>过程分析：同步队列的首节点移动到等待队列。加入尾节点之前会清除所有状态不为Condition的节点。</p>\n<hr>\n<h4 id=\"通知\"><a href=\"#通知\" class=\"headerlink\" title=\"通知\"></a>通知</h4><p>调用Condition的signal()方法，可以唤醒等待队列的首节点（等待时间最长），唤醒之前会将该节点移动到同步队列中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signal() &#123;</div><div class=\"line\">            //判断是否获取了锁</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            Node first = firstWaiter;</div><div class=\"line\">            if (first != null)</div><div class=\"line\">                doSignal(first);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>过程：</p>\n<ol>\n<li>先判断当前线程是否获取了锁</li>\n<li>然后对首节点调用doSignal()方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doSignal(Node first) &#123;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                if ( (firstWaiter = first.nextWaiter) == null)</div><div class=\"line\">                    lastWaiter = null;</div><div class=\"line\">                first.nextWaiter = null;</div><div class=\"line\">            &#125; while (!transferForSignal(first) &amp;&amp;</div><div class=\"line\">                     (first = firstWaiter) != null);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>过程：</p>\n<ol>\n<li>修改首节点</li>\n<li>调用transferForSignal()方法将节点移动到同步队列</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean transferForSignal(Node node) &#123;</div><div class=\"line\">        //将节点状态变为0   </div><div class=\"line\">        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))</div><div class=\"line\">            return false;</div><div class=\"line\">        //将该节点加入同步队列</div><div class=\"line\">        Node p = enq(node);</div><div class=\"line\">        int ws = p.waitStatus;</div><div class=\"line\">        //如果结点p的状态为cancel 或者修改waitStatus失败，则直接唤醒</div><div class=\"line\">        if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</div><div class=\"line\">            LockSupport.unpark(node.thread);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用同步器的enq方法，将节点移动到同步队列，<br>满足条件后使用LockSupport唤醒该线程。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/signalcon.png\" alt=\"image\"></p>\n<hr>\n<p>当Condition调用signalAll()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signalAll() &#123;</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            Node first = firstWaiter;</div><div class=\"line\">            if (first != null)</div><div class=\"line\">                doSignalAll(first);</div><div class=\"line\">        &#125;</div><div class=\"line\">private void doSignalAll(Node first) &#123;</div><div class=\"line\">            lastWaiter = firstWaiter = null;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                Node next = first.nextWaiter;</div><div class=\"line\">                first.nextWaiter = null;</div><div class=\"line\">                transferForSignal(first);</div><div class=\"line\">                first = next;</div><div class=\"line\">            &#125; while (first != null);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到doSignalAll()方法使用了do-while循环来唤醒每一个等待队列中的节点，直到first为null时，停止循环。</p>\n<p>一句话总结signalAll()的作用：<strong>将等待队列中的全部节点移动到同步队列中，并唤醒每个节点的线程。</strong></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>整个过程可以分为三步：</p>\n<p>第一步：一个线程获取锁后，通过调用Condition的await()方法，会将当前线程先加入到等待队列中，并释放锁。然后就在await()中的一个while循环中判断节点是否已经在同步队列，是则尝试获取锁，否则一直阻塞。</p>\n<p>第二步：当线程调用signal()方法后，程序首先检查当前线程是否获取了锁，然后通过doSignal(Node first)方法将节点移动到同步队列，并唤醒节点中的线程。</p>\n<p>第三步：被唤醒的线程，将从await()中的while循环中退出来，然后调用acquireQueued()方法竞争同步状态。竞争成功则退出await()方法，继续执行。</p>\n"},{"title":"Java并发之Executor框架","date":"2017-11-22T08:42:18.000Z","_content":"### 一、Executor框架的介绍\n\nJava中的线程既是工作单元又是执行机制。JDK1.5开始，把工作单元与执行机制分离开来。**工作单元为Runnable（Thread实现该接口）和Callable，执行机制就是Executor框架。** 使用Executor框架时不用显式的创建线程Thread。\n\nExecutor框架由三部分组成：  \n- **任务**：Runnable或Callable  \n- **任务的执行**：ExecutorService接口及其实现。  \n- **异步计算的结果**：Future接口或其实现类FutureTask\n\n\n#### Executor的结构\n\n![image](http://osuskkx7k.bkt.clouddn.com/Executor1.png)\n\n\n\n#### **Executor接口**\n```\npublic interface Executor {\n        void execute(Runnable command);\n}\n```\n**Executor接口中只有一个execute()方法，用来执行已经提交的Runnable实例，可见即使是Callable实例，最后也会被封装成Runnable来执行。**\n\n\n\n\n#### **ExecutorService接口**\n\n\n```\npublic interface ExecutorService extends Executor {\n        void shutdown();\n        List<Runnable> shutdownNow();\n        <T> Future<T> submit(Callable<T> task);\n        <T> Future<T> submit(Runnable task, T result);\n        Future<?> submit(Runnable task);\n        ....\n    }\n```\n**ExecutorService扩展了Executor接口，添加了许多方法用于服务、管理和关闭线程池。**\nsubmit()方法最终执行时也是调用了execute()方法。\n\nExecutorService接口有两个实现类，ThreadPoolExecutor（核心）和ScheduledThreadPoolExecutor（定时执行）。\n\n\n#### **Executors工具类**\n\n**Executors工具类中包含了许多静态工厂方法。采用了多方法静态工厂模式。** 本质是根据不同的输入创建出不同类型的对象。\n\n\n\n通过Executors工具类可以创建3种类型的线程池，即3种ThreadPoolExecutor对象。实质是创建ThreadPoolExecutor时传入的参数不同。\n\n\n### 二、3种常用线程池\n\n#### FixedThreadPool\n**FixedThreadPool是固定大小的线程池。内部线程可重用。**  \nExecutors工具类中的静态方法：\n```\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n```\n\n**特点**：\n1. 参数corePoolSize和maximumPoolSize大小都是nThreads，说明最大线程数就是核心线程数，所以线程大小固定\n2. 参数keepAliveTime为0L，说明不会有空闲的线程\n3. 参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。\n\n**应用场景**：需要限制线程数量，适用于负载较重的服务器\n\n![image](http://osuskkx7k.bkt.clouddn.com/fixed.png)\n\n**工作过程**：\n1. 当前线程数小于corePoolSize，创建新线程执行任务\n2. 当前线程数等于corePoolSize，任务加入阻塞队列\n3. 线程反复执行阻塞队列中的任务\n\n#### SingleThreadExecutor\n\n**SingleThreadExecutor是只有一个线程的线程池。**\n\n\n```\npublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n```\n**特点**：\n1. 参数corePoolSize和maximumPoolSize大小都是1，说明线程数固定为1\n2. 参数keepAliveTime为0L，说明不会有空闲的线程\n3. 参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。\n\n**应用场景**：**适用于执行的任务需要保证顺序；并且在任意时间点，不会有多个线程是活动的场景。**\n\n![image](http://osuskkx7k.bkt.clouddn.com/single1.png)\n\n**工作过程**：\n1. 当前线程数小于1，创建一个唯一的线程执行任务\n2. 当前线程数等于1，任务加入阻塞队列\n3. 这个唯一的线程反复执行阻塞队列中的任务\n\n#### CachedThreadPool\n**CachedThreadPool是一个根据需要创建线程的线程池。**\n\n\n```\npublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n```\n**特点**：\n1. 参数corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE（2147483647），说明可创建的线程数巨大，且都是可销毁的\n2. 参数keepAliveTime为60L，说明空闲的线程等待时间最长60s\n3. 参数BlockingQueue是一个没有容量的阻塞队列SynchronousQueue，说明任务会一直被线程执行。\n\n**应用场景**：**大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者负载较轻的服务器。  \n注：使用时需控制并发的任务数，否则创建大量的线程可能导致严重的性能问题。**\n\n![image](http://osuskkx7k.bkt.clouddn.com/cached1.png)\n\n**工作过程**：\n1. 首先执行SynchronousQueue.offer()，如果有空闲的线程在执行SynchronousQueue.poll()，表示配对成功，任务交给空闲线程执行。\n2. 初始化时，如果没有空闲的线程，那么创建一个新的线程执行任务。\n3. 步骤2中的线程任务完成后，会执行SynchronousQueue.poll()等待60s，若没有任务提交，则该空闲线程销毁。\n \nSynchronousQueue队列的每个插入操作都要等待一个移除操作，因此是没有容量的队列。\n\n\n---\n\n除上述3种常用线程池外，Executors还可以创建以下几种线程池。\n\n\n**newScheduledThreadPool**：可以定时或周期性执行任务的线程池（线程数目指定）\n\n**newSingleThreadScheduledExecutor：** 可以定时或周期性执行任务的线程池。只有一个线程。\n","source":"_posts/Java并发之Executor框架.md","raw":"---\ntitle: Java并发之Executor框架\ndate: 2017-11-22 16:42:18\ntags: [并发,Executor框架]\ncategories: 技术\n---\n### 一、Executor框架的介绍\n\nJava中的线程既是工作单元又是执行机制。JDK1.5开始，把工作单元与执行机制分离开来。**工作单元为Runnable（Thread实现该接口）和Callable，执行机制就是Executor框架。** 使用Executor框架时不用显式的创建线程Thread。\n\nExecutor框架由三部分组成：  \n- **任务**：Runnable或Callable  \n- **任务的执行**：ExecutorService接口及其实现。  \n- **异步计算的结果**：Future接口或其实现类FutureTask\n\n\n#### Executor的结构\n\n![image](http://osuskkx7k.bkt.clouddn.com/Executor1.png)\n\n\n\n#### **Executor接口**\n```\npublic interface Executor {\n        void execute(Runnable command);\n}\n```\n**Executor接口中只有一个execute()方法，用来执行已经提交的Runnable实例，可见即使是Callable实例，最后也会被封装成Runnable来执行。**\n\n\n\n\n#### **ExecutorService接口**\n\n\n```\npublic interface ExecutorService extends Executor {\n        void shutdown();\n        List<Runnable> shutdownNow();\n        <T> Future<T> submit(Callable<T> task);\n        <T> Future<T> submit(Runnable task, T result);\n        Future<?> submit(Runnable task);\n        ....\n    }\n```\n**ExecutorService扩展了Executor接口，添加了许多方法用于服务、管理和关闭线程池。**\nsubmit()方法最终执行时也是调用了execute()方法。\n\nExecutorService接口有两个实现类，ThreadPoolExecutor（核心）和ScheduledThreadPoolExecutor（定时执行）。\n\n\n#### **Executors工具类**\n\n**Executors工具类中包含了许多静态工厂方法。采用了多方法静态工厂模式。** 本质是根据不同的输入创建出不同类型的对象。\n\n\n\n通过Executors工具类可以创建3种类型的线程池，即3种ThreadPoolExecutor对象。实质是创建ThreadPoolExecutor时传入的参数不同。\n\n\n### 二、3种常用线程池\n\n#### FixedThreadPool\n**FixedThreadPool是固定大小的线程池。内部线程可重用。**  \nExecutors工具类中的静态方法：\n```\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n```\n\n**特点**：\n1. 参数corePoolSize和maximumPoolSize大小都是nThreads，说明最大线程数就是核心线程数，所以线程大小固定\n2. 参数keepAliveTime为0L，说明不会有空闲的线程\n3. 参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。\n\n**应用场景**：需要限制线程数量，适用于负载较重的服务器\n\n![image](http://osuskkx7k.bkt.clouddn.com/fixed.png)\n\n**工作过程**：\n1. 当前线程数小于corePoolSize，创建新线程执行任务\n2. 当前线程数等于corePoolSize，任务加入阻塞队列\n3. 线程反复执行阻塞队列中的任务\n\n#### SingleThreadExecutor\n\n**SingleThreadExecutor是只有一个线程的线程池。**\n\n\n```\npublic static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n```\n**特点**：\n1. 参数corePoolSize和maximumPoolSize大小都是1，说明线程数固定为1\n2. 参数keepAliveTime为0L，说明不会有空闲的线程\n3. 参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。\n\n**应用场景**：**适用于执行的任务需要保证顺序；并且在任意时间点，不会有多个线程是活动的场景。**\n\n![image](http://osuskkx7k.bkt.clouddn.com/single1.png)\n\n**工作过程**：\n1. 当前线程数小于1，创建一个唯一的线程执行任务\n2. 当前线程数等于1，任务加入阻塞队列\n3. 这个唯一的线程反复执行阻塞队列中的任务\n\n#### CachedThreadPool\n**CachedThreadPool是一个根据需要创建线程的线程池。**\n\n\n```\npublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n```\n**特点**：\n1. 参数corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE（2147483647），说明可创建的线程数巨大，且都是可销毁的\n2. 参数keepAliveTime为60L，说明空闲的线程等待时间最长60s\n3. 参数BlockingQueue是一个没有容量的阻塞队列SynchronousQueue，说明任务会一直被线程执行。\n\n**应用场景**：**大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者负载较轻的服务器。  \n注：使用时需控制并发的任务数，否则创建大量的线程可能导致严重的性能问题。**\n\n![image](http://osuskkx7k.bkt.clouddn.com/cached1.png)\n\n**工作过程**：\n1. 首先执行SynchronousQueue.offer()，如果有空闲的线程在执行SynchronousQueue.poll()，表示配对成功，任务交给空闲线程执行。\n2. 初始化时，如果没有空闲的线程，那么创建一个新的线程执行任务。\n3. 步骤2中的线程任务完成后，会执行SynchronousQueue.poll()等待60s，若没有任务提交，则该空闲线程销毁。\n \nSynchronousQueue队列的每个插入操作都要等待一个移除操作，因此是没有容量的队列。\n\n\n---\n\n除上述3种常用线程池外，Executors还可以创建以下几种线程池。\n\n\n**newScheduledThreadPool**：可以定时或周期性执行任务的线程池（线程数目指定）\n\n**newSingleThreadScheduledExecutor：** 可以定时或周期性执行任务的线程池。只有一个线程。\n","slug":"Java并发之Executor框架","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt24z000v50tc54rb46tg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、Executor框架的介绍\"><a href=\"#一、Executor框架的介绍\" class=\"headerlink\" title=\"一、Executor框架的介绍\"></a>一、Executor框架的介绍</h3><p>Java中的线程既是工作单元又是执行机制。JDK1.5开始，把工作单元与执行机制分离开来。<strong>工作单元为Runnable（Thread实现该接口）和Callable，执行机制就是Executor框架。</strong> 使用Executor框架时不用显式的创建线程Thread。</p>\n<p>Executor框架由三部分组成：  </p>\n<ul>\n<li><strong>任务</strong>：Runnable或Callable  </li>\n<li><strong>任务的执行</strong>：ExecutorService接口及其实现。  </li>\n<li><strong>异步计算的结果</strong>：Future接口或其实现类FutureTask</li>\n</ul>\n<h4 id=\"Executor的结构\"><a href=\"#Executor的结构\" class=\"headerlink\" title=\"Executor的结构\"></a>Executor的结构</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/Executor1.png\" alt=\"image\"></p>\n<h4 id=\"Executor接口\"><a href=\"#Executor接口\" class=\"headerlink\" title=\"Executor接口\"></a><strong>Executor接口</strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Executor &#123;</div><div class=\"line\">        void execute(Runnable command);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Executor接口中只有一个execute()方法，用来执行已经提交的Runnable实例，可见即使是Callable实例，最后也会被封装成Runnable来执行。</strong></p>\n<h4 id=\"ExecutorService接口\"><a href=\"#ExecutorService接口\" class=\"headerlink\" title=\"ExecutorService接口\"></a><strong>ExecutorService接口</strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ExecutorService extends Executor &#123;</div><div class=\"line\">        void shutdown();</div><div class=\"line\">        List&lt;Runnable&gt; shutdownNow();</div><div class=\"line\">        &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</div><div class=\"line\">        &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</div><div class=\"line\">        Future&lt;?&gt; submit(Runnable task);</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>ExecutorService扩展了Executor接口，添加了许多方法用于服务、管理和关闭线程池。</strong><br>submit()方法最终执行时也是调用了execute()方法。</p>\n<p>ExecutorService接口有两个实现类，ThreadPoolExecutor（核心）和ScheduledThreadPoolExecutor（定时执行）。</p>\n<h4 id=\"Executors工具类\"><a href=\"#Executors工具类\" class=\"headerlink\" title=\"Executors工具类\"></a><strong>Executors工具类</strong></h4><p><strong>Executors工具类中包含了许多静态工厂方法。采用了多方法静态工厂模式。</strong> 本质是根据不同的输入创建出不同类型的对象。</p>\n<p>通过Executors工具类可以创建3种类型的线程池，即3种ThreadPoolExecutor对象。实质是创建ThreadPoolExecutor时传入的参数不同。</p>\n<h3 id=\"二、3种常用线程池\"><a href=\"#二、3种常用线程池\" class=\"headerlink\" title=\"二、3种常用线程池\"></a>二、3种常用线程池</h3><h4 id=\"FixedThreadPool\"><a href=\"#FixedThreadPool\" class=\"headerlink\" title=\"FixedThreadPool\"></a>FixedThreadPool</h4><p><strong>FixedThreadPool是固定大小的线程池。内部线程可重用。</strong><br>Executors工具类中的静态方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</div><div class=\"line\">        return new ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                      0L, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize和maximumPoolSize大小都是nThreads，说明最大线程数就是核心线程数，所以线程大小固定</li>\n<li>参数keepAliveTime为0L，说明不会有空闲的线程</li>\n<li>参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。</li>\n</ol>\n<p><strong>应用场景</strong>：需要限制线程数量，适用于负载较重的服务器</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/fixed.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>当前线程数小于corePoolSize，创建新线程执行任务</li>\n<li>当前线程数等于corePoolSize，任务加入阻塞队列</li>\n<li>线程反复执行阻塞队列中的任务</li>\n</ol>\n<h4 id=\"SingleThreadExecutor\"><a href=\"#SingleThreadExecutor\" class=\"headerlink\" title=\"SingleThreadExecutor\"></a>SingleThreadExecutor</h4><p><strong>SingleThreadExecutor是只有一个线程的线程池。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</div><div class=\"line\">        return new FinalizableDelegatedExecutorService</div><div class=\"line\">            (new ThreadPoolExecutor(1, 1,</div><div class=\"line\">                                    0L, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize和maximumPoolSize大小都是1，说明线程数固定为1</li>\n<li>参数keepAliveTime为0L，说明不会有空闲的线程</li>\n<li>参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。</li>\n</ol>\n<p><strong>应用场景</strong>：<strong>适用于执行的任务需要保证顺序；并且在任意时间点，不会有多个线程是活动的场景。</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/single1.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>当前线程数小于1，创建一个唯一的线程执行任务</li>\n<li>当前线程数等于1，任务加入阻塞队列</li>\n<li>这个唯一的线程反复执行阻塞队列中的任务</li>\n</ol>\n<h4 id=\"CachedThreadPool\"><a href=\"#CachedThreadPool\" class=\"headerlink\" title=\"CachedThreadPool\"></a>CachedThreadPool</h4><p><strong>CachedThreadPool是一个根据需要创建线程的线程池。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newCachedThreadPool() &#123;</div><div class=\"line\">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</div><div class=\"line\">                                      60L, TimeUnit.SECONDS,</div><div class=\"line\">                                      new SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE（2147483647），说明可创建的线程数巨大，且都是可销毁的</li>\n<li>参数keepAliveTime为60L，说明空闲的线程等待时间最长60s</li>\n<li>参数BlockingQueue是一个没有容量的阻塞队列SynchronousQueue，说明任务会一直被线程执行。</li>\n</ol>\n<p><strong>应用场景</strong>：<strong>大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者负载较轻的服务器。<br>注：使用时需控制并发的任务数，否则创建大量的线程可能导致严重的性能问题。</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/cached1.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>首先执行SynchronousQueue.offer()，如果有空闲的线程在执行SynchronousQueue.poll()，表示配对成功，任务交给空闲线程执行。</li>\n<li>初始化时，如果没有空闲的线程，那么创建一个新的线程执行任务。</li>\n<li>步骤2中的线程任务完成后，会执行SynchronousQueue.poll()等待60s，若没有任务提交，则该空闲线程销毁。</li>\n</ol>\n<p>SynchronousQueue队列的每个插入操作都要等待一个移除操作，因此是没有容量的队列。</p>\n<hr>\n<p>除上述3种常用线程池外，Executors还可以创建以下几种线程池。</p>\n<p><strong>newScheduledThreadPool</strong>：可以定时或周期性执行任务的线程池（线程数目指定）</p>\n<p><strong>newSingleThreadScheduledExecutor：</strong> 可以定时或周期性执行任务的线程池。只有一个线程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Executor框架的介绍\"><a href=\"#一、Executor框架的介绍\" class=\"headerlink\" title=\"一、Executor框架的介绍\"></a>一、Executor框架的介绍</h3><p>Java中的线程既是工作单元又是执行机制。JDK1.5开始，把工作单元与执行机制分离开来。<strong>工作单元为Runnable（Thread实现该接口）和Callable，执行机制就是Executor框架。</strong> 使用Executor框架时不用显式的创建线程Thread。</p>\n<p>Executor框架由三部分组成：  </p>\n<ul>\n<li><strong>任务</strong>：Runnable或Callable  </li>\n<li><strong>任务的执行</strong>：ExecutorService接口及其实现。  </li>\n<li><strong>异步计算的结果</strong>：Future接口或其实现类FutureTask</li>\n</ul>\n<h4 id=\"Executor的结构\"><a href=\"#Executor的结构\" class=\"headerlink\" title=\"Executor的结构\"></a>Executor的结构</h4><p><img src=\"http://osuskkx7k.bkt.clouddn.com/Executor1.png\" alt=\"image\"></p>\n<h4 id=\"Executor接口\"><a href=\"#Executor接口\" class=\"headerlink\" title=\"Executor接口\"></a><strong>Executor接口</strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Executor &#123;</div><div class=\"line\">        void execute(Runnable command);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Executor接口中只有一个execute()方法，用来执行已经提交的Runnable实例，可见即使是Callable实例，最后也会被封装成Runnable来执行。</strong></p>\n<h4 id=\"ExecutorService接口\"><a href=\"#ExecutorService接口\" class=\"headerlink\" title=\"ExecutorService接口\"></a><strong>ExecutorService接口</strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ExecutorService extends Executor &#123;</div><div class=\"line\">        void shutdown();</div><div class=\"line\">        List&lt;Runnable&gt; shutdownNow();</div><div class=\"line\">        &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</div><div class=\"line\">        &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</div><div class=\"line\">        Future&lt;?&gt; submit(Runnable task);</div><div class=\"line\">        ....</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>ExecutorService扩展了Executor接口，添加了许多方法用于服务、管理和关闭线程池。</strong><br>submit()方法最终执行时也是调用了execute()方法。</p>\n<p>ExecutorService接口有两个实现类，ThreadPoolExecutor（核心）和ScheduledThreadPoolExecutor（定时执行）。</p>\n<h4 id=\"Executors工具类\"><a href=\"#Executors工具类\" class=\"headerlink\" title=\"Executors工具类\"></a><strong>Executors工具类</strong></h4><p><strong>Executors工具类中包含了许多静态工厂方法。采用了多方法静态工厂模式。</strong> 本质是根据不同的输入创建出不同类型的对象。</p>\n<p>通过Executors工具类可以创建3种类型的线程池，即3种ThreadPoolExecutor对象。实质是创建ThreadPoolExecutor时传入的参数不同。</p>\n<h3 id=\"二、3种常用线程池\"><a href=\"#二、3种常用线程池\" class=\"headerlink\" title=\"二、3种常用线程池\"></a>二、3种常用线程池</h3><h4 id=\"FixedThreadPool\"><a href=\"#FixedThreadPool\" class=\"headerlink\" title=\"FixedThreadPool\"></a>FixedThreadPool</h4><p><strong>FixedThreadPool是固定大小的线程池。内部线程可重用。</strong><br>Executors工具类中的静态方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</div><div class=\"line\">        return new ThreadPoolExecutor(nThreads, nThreads,</div><div class=\"line\">                                      0L, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize和maximumPoolSize大小都是nThreads，说明最大线程数就是核心线程数，所以线程大小固定</li>\n<li>参数keepAliveTime为0L，说明不会有空闲的线程</li>\n<li>参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。</li>\n</ol>\n<p><strong>应用场景</strong>：需要限制线程数量，适用于负载较重的服务器</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/fixed.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>当前线程数小于corePoolSize，创建新线程执行任务</li>\n<li>当前线程数等于corePoolSize，任务加入阻塞队列</li>\n<li>线程反复执行阻塞队列中的任务</li>\n</ol>\n<h4 id=\"SingleThreadExecutor\"><a href=\"#SingleThreadExecutor\" class=\"headerlink\" title=\"SingleThreadExecutor\"></a>SingleThreadExecutor</h4><p><strong>SingleThreadExecutor是只有一个线程的线程池。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newSingleThreadExecutor() &#123;</div><div class=\"line\">        return new FinalizableDelegatedExecutorService</div><div class=\"line\">            (new ThreadPoolExecutor(1, 1,</div><div class=\"line\">                                    0L, TimeUnit.MILLISECONDS,</div><div class=\"line\">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize和maximumPoolSize大小都是1，说明线程数固定为1</li>\n<li>参数keepAliveTime为0L，说明不会有空闲的线程</li>\n<li>参数BlockingQueue是无界队列LinkedBlockingQueue，说明任务会一直放入，不会采用饱和策略。</li>\n</ol>\n<p><strong>应用场景</strong>：<strong>适用于执行的任务需要保证顺序；并且在任意时间点，不会有多个线程是活动的场景。</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/single1.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>当前线程数小于1，创建一个唯一的线程执行任务</li>\n<li>当前线程数等于1，任务加入阻塞队列</li>\n<li>这个唯一的线程反复执行阻塞队列中的任务</li>\n</ol>\n<h4 id=\"CachedThreadPool\"><a href=\"#CachedThreadPool\" class=\"headerlink\" title=\"CachedThreadPool\"></a>CachedThreadPool</h4><p><strong>CachedThreadPool是一个根据需要创建线程的线程池。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static ExecutorService newCachedThreadPool() &#123;</div><div class=\"line\">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</div><div class=\"line\">                                      60L, TimeUnit.SECONDS,</div><div class=\"line\">                                      new SynchronousQueue&lt;Runnable&gt;());</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>参数corePoolSize为0，maximumPoolSize为Integer.MAX_VALUE（2147483647），说明可创建的线程数巨大，且都是可销毁的</li>\n<li>参数keepAliveTime为60L，说明空闲的线程等待时间最长60s</li>\n<li>参数BlockingQueue是一个没有容量的阻塞队列SynchronousQueue，说明任务会一直被线程执行。</li>\n</ol>\n<p><strong>应用场景</strong>：<strong>大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者负载较轻的服务器。<br>注：使用时需控制并发的任务数，否则创建大量的线程可能导致严重的性能问题。</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/cached1.png\" alt=\"image\"></p>\n<p><strong>工作过程</strong>：</p>\n<ol>\n<li>首先执行SynchronousQueue.offer()，如果有空闲的线程在执行SynchronousQueue.poll()，表示配对成功，任务交给空闲线程执行。</li>\n<li>初始化时，如果没有空闲的线程，那么创建一个新的线程执行任务。</li>\n<li>步骤2中的线程任务完成后，会执行SynchronousQueue.poll()等待60s，若没有任务提交，则该空闲线程销毁。</li>\n</ol>\n<p>SynchronousQueue队列的每个插入操作都要等待一个移除操作，因此是没有容量的队列。</p>\n<hr>\n<p>除上述3种常用线程池外，Executors还可以创建以下几种线程池。</p>\n<p><strong>newScheduledThreadPool</strong>：可以定时或周期性执行任务的线程池（线程数目指定）</p>\n<p><strong>newSingleThreadScheduledExecutor：</strong> 可以定时或周期性执行任务的线程池。只有一个线程。</p>\n"},{"title":"在Hexo发布博客的MarkDown文件中引入JS代码","date":"2017-08-07T07:05:05.000Z","_content":"## 前言 ##\n上周困扰了两天的问题终于得到解决，于是就打算写点东西，也当作一次记录。\n\n从题目可以看出，问题就是——**如何在Hexo发布博客的Md文件中引入JS代码**，来实现你想要的特效。\n之所以会提出这个问题，是源于一个简单的想法，单纯地想在某一篇博客中引入echarts（一个纯 Javascript 的图表库）特效，实质上就是引入它的JS代码。\n\n那么就详细讲解一下引入echarts来实现特效的过程。\n## 下载##\n首先，在[echarts下载页面](http://echarts.baidu.com/download.html) 中下载相应的版本，我这里下载的是完整版（echarts.min.js）。\n文件下载完成后，将其放入下图所示文件夹当中\n![WithYou](http://osuskkx7k.bkt.clouddn.com/js%E5%AD%98%E5%82%A8.PNG)\n\n我的博客使用的是next主题，打开themes文件夹中的next文件夹，再依次打开source、js、src文件夹，就可以看到许多js文件，将echarts.min.js放入即可。\n## 使用##\n在文件引入后（src就是指向刚刚存入js文件的目录），那么你就可以在你的博客中引用这个js文件来达到特定的效果。\n引用的方式很简单，只需一行代码：\n\n`<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>`\n\n在引用js文件后，那么你只要在md文件中添加相应的js代码片段即可，这里贴出我使用的js代码片段\n\n```\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n```\n 文章末尾有博客链接。\n 在这个页面中所展现的特效中还引入了其他的js文件，如china.js、api.js、bmap.js等，例如api.js是百度地图的js代码，当然你可以引入任何你想要引用的js文件。  \n## 详细##\n至于bmap.js文件可以在[github](https://github.com/ecomfe/echarts/tree/master/extension/bmap)下载，下载之后打开echarts-master文件夹，找到extension中的bamp.js,如下图所示:\n![WithYou](http://osuskkx7k.bkt.clouddn.com/1.PNG)\n\n\nECharts使用参考（其中有china.js的介绍）：\n\n- [ECharts 实现地图散点图（上）](http://efe.baidu.com/blog/echarts-map-tutorial/)\n- [ECharts 实现地图散点图（下）](http://efe.baidu.com/blog/echarts-map-tutorial-2/)\n\n这里要注意一个问题，就是引入bmap.js后，地图并不显示，想要使用百度地图，还要去[百度地图开放平台](http://lbsyun.baidu.com/index.php?title=jspopular)申请一个密钥，申请成功后在页面中引入，但是经过多次尝试，直接在md文件中引入并不起作用，如下：\n\n` <script src=\"http://api.map.baidu.com/api?v=2.0&ak=？（你的密钥）\"></script>`\n\n   由此想到在script标签中嵌入了网页链接，md可能不能识别（只是猜测），于是想着将这个链接所指向的js转为文件引入试试。直接点击链接，跳转到如下页面：\n   \n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A61.PNG)\n\n可以看到标记处同样为一个链接，再次从浏览器打开，出现如下：  \n\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A62.PNG)\n\n在你眼前呈现的是全屏的js代码，这就是我们所需要的js文件，即百度地图的js代码，将它全选保存为js文件，这里命名为api.js。\n然后在md中引入它即可使用，这样我们就能取得和百度地图类似的效果。\n\n下面贴出完整的文章代码，即md文件：\n```\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n    <script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n    <script src=\"/js/src/china.js\"></script>\n    <script src=\"/js/src/api.js\"></script>\n    <script src=\"/js/src/bmap.js\"></script>\n    \n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n    </script>\n```\n特效如下图所示：\n\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%89%B9%E6%95%882.PNG)\n\n欢迎访问博客页面查看效果：[Youngforzy](https://youngforzy.github.io/2017/08/07/index/#more)\n## 问题##\n<font size=\"4\">这里其实有个问题，就是特效虽然展现出来，但是在网页端还是无法实现地图的缩放，而在手机端和ipad中都可以进行地图的缩放，目前这个问题还未能得到解决，待日后解决再补充。</font>\n## 总结##\n以上就是在MarkDown中插入js代码的过程。","source":"_posts/Hexo发布博客的MarkDown文件中引入JS代码.md","raw":"---\ntitle: 在Hexo发布博客的MarkDown文件中引入JS代码\ndate: 2017-08-7 15:05:05\ntags: [Hexo,MarkDown]\ncategories: 技术\n---\n## 前言 ##\n上周困扰了两天的问题终于得到解决，于是就打算写点东西，也当作一次记录。\n\n从题目可以看出，问题就是——**如何在Hexo发布博客的Md文件中引入JS代码**，来实现你想要的特效。\n之所以会提出这个问题，是源于一个简单的想法，单纯地想在某一篇博客中引入echarts（一个纯 Javascript 的图表库）特效，实质上就是引入它的JS代码。\n\n那么就详细讲解一下引入echarts来实现特效的过程。\n## 下载##\n首先，在[echarts下载页面](http://echarts.baidu.com/download.html) 中下载相应的版本，我这里下载的是完整版（echarts.min.js）。\n文件下载完成后，将其放入下图所示文件夹当中\n![WithYou](http://osuskkx7k.bkt.clouddn.com/js%E5%AD%98%E5%82%A8.PNG)\n\n我的博客使用的是next主题，打开themes文件夹中的next文件夹，再依次打开source、js、src文件夹，就可以看到许多js文件，将echarts.min.js放入即可。\n## 使用##\n在文件引入后（src就是指向刚刚存入js文件的目录），那么你就可以在你的博客中引用这个js文件来达到特定的效果。\n引用的方式很简单，只需一行代码：\n\n`<script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>`\n\n在引用js文件后，那么你只要在md文件中添加相应的js代码片段即可，这里贴出我使用的js代码片段\n\n```\n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n</script>\n```\n 文章末尾有博客链接。\n 在这个页面中所展现的特效中还引入了其他的js文件，如china.js、api.js、bmap.js等，例如api.js是百度地图的js代码，当然你可以引入任何你想要引用的js文件。  \n## 详细##\n至于bmap.js文件可以在[github](https://github.com/ecomfe/echarts/tree/master/extension/bmap)下载，下载之后打开echarts-master文件夹，找到extension中的bamp.js,如下图所示:\n![WithYou](http://osuskkx7k.bkt.clouddn.com/1.PNG)\n\n\nECharts使用参考（其中有china.js的介绍）：\n\n- [ECharts 实现地图散点图（上）](http://efe.baidu.com/blog/echarts-map-tutorial/)\n- [ECharts 实现地图散点图（下）](http://efe.baidu.com/blog/echarts-map-tutorial-2/)\n\n这里要注意一个问题，就是引入bmap.js后，地图并不显示，想要使用百度地图，还要去[百度地图开放平台](http://lbsyun.baidu.com/index.php?title=jspopular)申请一个密钥，申请成功后在页面中引入，但是经过多次尝试，直接在md文件中引入并不起作用，如下：\n\n` <script src=\"http://api.map.baidu.com/api?v=2.0&ak=？（你的密钥）\"></script>`\n\n   由此想到在script标签中嵌入了网页链接，md可能不能识别（只是猜测），于是想着将这个链接所指向的js转为文件引入试试。直接点击链接，跳转到如下页面：\n   \n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A61.PNG)\n\n可以看到标记处同样为一个链接，再次从浏览器打开，出现如下：  \n\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A62.PNG)\n\n在你眼前呈现的是全屏的js代码，这就是我们所需要的js文件，即百度地图的js代码，将它全选保存为js文件，这里命名为api.js。\n然后在md中引入它即可使用，这样我们就能取得和百度地图类似的效果。\n\n下面贴出完整的文章代码，即md文件：\n```\n<div id=\"map-wrap\" style=\"height: 500px;width:800px;\"></div>\n\n    <script type=\"text/javascript\" src=\"/js/src/echarts.min.js\"></script>\n    <script src=\"/js/src/china.js\"></script>\n    <script src=\"/js/src/api.js\"></script>\n    <script src=\"/js/src/bmap.js\"></script>\n    \n<script>\nvar bmapChart=echarts.init(document.getElementById(\"map-wrap\"));var data=[{name:\"上海\",value:299},{name:\"厦门\",value:245},{name:\"丰城\",value:120},{name:\"南昌\",value:160},{name:\"张家界\",value:128},{name:\"长沙\",value:75},{name:\"杭州\",value:90},{name:\"福州\",value:90},{name:\"深圳\",value:90},{name:\"武汉\",value:73}];var geoCoordMap={\"厦门\":[118.105,24.443],\"上海\":[121.399,31.321],\"丰城\":[115.801,28.201],\"南昌\":[115.856,28.691],\"张家界\":[110.489,29.118],\"福州\":[119.3,26.08],\"长沙\":[113,28.21],\"杭州\":[120.16,30.28],\"深圳\":[114.06,22.55],\"武汉\":[114.31,30.52]};var convertData=function(data){var res=[];for(var i=0;i<data.length;i++){var geoCoord=geoCoordMap[data[i].name];if(geoCoord){res.push({name:data[i].name,value:geoCoord.concat(data[i].value)})}}return res};option={title:{text:\"我们的足迹 - Our footprints\",subtext:\"一步一个脚印，让时光见证\",sublink:\"#\",left:\"center\"},tooltip:{trigger:\"item\"},bmap:{center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:{styleJson:[{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"land\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#f3f3f3\"}},{\"featureType\":\"railway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"highway\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fdfdfd\"}},{\"featureType\":\"highway\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"arterial\",\"elementType\":\"geometry.fill\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"green\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"subway\",\"elementType\":\"all\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"manmade\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"local\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"arterial\",\"elementType\":\"labels\",\"stylers\":{\"visibility\":\"off\"}},{\"featureType\":\"boundary\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#fefefe\"}},{\"featureType\":\"building\",\"elementType\":\"all\",\"stylers\":{\"color\":\"#d1d1d1\"}},{\"featureType\":\"label\",\"elementType\":\"labels.text.fill\",\"stylers\":{\"color\":\"#999999\"}}]}},series:[{name:\"footmark\",type:\"scatter\",coordinateSystem:\"bmap\",data:convertData(data),symbolSize:function(val){return val[2]/10},label:{normal:{formatter:\"{b}\",position:\"right\",show:false},emphasis:{show:true}},itemStyle:{normal:{color:\"#60C0DD\"}}},{name:\"I miss you\",type:\"effectScatter\",coordinateSystem:\"bmap\",data:convertData(data.sort(function(a,b){return b.value-a.value}).slice(0,2)),symbolSize:function(val){return val[2]/10},showEffectOn:\"render\",rippleEffect:{brushType:\"stroke\"},hoverAnimation:true,label:{normal:{formatter:\"{b}\",position:\"right\",show:true}},itemStyle:{normal:{color:\"purple\",shadowBlur:10,shadowColor:\"#333\"}},zlevel:1}]};bmapChart.setOption(option);\n    </script>\n```\n特效如下图所示：\n\n![WithYou](http://osuskkx7k.bkt.clouddn.com/%E7%89%B9%E6%95%882.PNG)\n\n欢迎访问博客页面查看效果：[Youngforzy](https://youngforzy.github.io/2017/08/07/index/#more)\n## 问题##\n<font size=\"4\">这里其实有个问题，就是特效虽然展现出来，但是在网页端还是无法实现地图的缩放，而在手机端和ipad中都可以进行地图的缩放，目前这个问题还未能得到解决，待日后解决再补充。</font>\n## 总结##\n以上就是在MarkDown中插入js代码的过程。","slug":"Hexo发布博客的MarkDown文件中引入JS代码","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt254000z50tcsf091wph","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上周困扰了两天的问题终于得到解决，于是就打算写点东西，也当作一次记录。</p>\n<p>从题目可以看出，问题就是——<strong>如何在Hexo发布博客的Md文件中引入JS代码</strong>，来实现你想要的特效。<br>之所以会提出这个问题，是源于一个简单的想法，单纯地想在某一篇博客中引入echarts（一个纯 Javascript 的图表库）特效，实质上就是引入它的JS代码。</p>\n<p>那么就详细讲解一下引入echarts来实现特效的过程。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>首先，在<a href=\"http://echarts.baidu.com/download.html\" target=\"_blank\" rel=\"external\">echarts下载页面</a> 中下载相应的版本，我这里下载的是完整版（echarts.min.js）。<br>文件下载完成后，将其放入下图所示文件夹当中<br><img src=\"http://osuskkx7k.bkt.clouddn.com/js%E5%AD%98%E5%82%A8.PNG\" alt=\"WithYou\"></p>\n<p>我的博客使用的是next主题，打开themes文件夹中的next文件夹，再依次打开source、js、src文件夹，就可以看到许多js文件，将echarts.min.js放入即可。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在文件引入后（src就是指向刚刚存入js文件的目录），那么你就可以在你的博客中引用这个js文件来达到特定的效果。<br>引用的方式很简单，只需一行代码：</p>\n<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/echarts.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>在引用js文件后，那么你只要在md文件中添加相应的js代码片段即可，这里贴出我使用的js代码片段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var bmapChart=echarts.init(document.getElementById(&quot;map-wrap&quot;));var data=[&#123;name:&quot;上海&quot;,value:299&#125;,&#123;name:&quot;厦门&quot;,value:245&#125;,&#123;name:&quot;丰城&quot;,value:120&#125;,&#123;name:&quot;南昌&quot;,value:160&#125;,&#123;name:&quot;张家界&quot;,value:128&#125;,&#123;name:&quot;长沙&quot;,value:75&#125;,&#123;name:&quot;杭州&quot;,value:90&#125;,&#123;name:&quot;福州&quot;,value:90&#125;,&#123;name:&quot;深圳&quot;,value:90&#125;,&#123;name:&quot;武汉&quot;,value:73&#125;];var geoCoordMap=&#123;&quot;厦门&quot;:[118.105,24.443],&quot;上海&quot;:[121.399,31.321],&quot;丰城&quot;:[115.801,28.201],&quot;南昌&quot;:[115.856,28.691],&quot;张家界&quot;:[110.489,29.118],&quot;福州&quot;:[119.3,26.08],&quot;长沙&quot;:[113,28.21],&quot;杭州&quot;:[120.16,30.28],&quot;深圳&quot;:[114.06,22.55],&quot;武汉&quot;:[114.31,30.52]&#125;;var convertData=function(data)&#123;var res=[];for(var i=0;i&lt;data.length;i++)&#123;var geoCoord=geoCoordMap[data[i].name];if(geoCoord)&#123;res.push(&#123;name:data[i].name,value:geoCoord.concat(data[i].value)&#125;)&#125;&#125;return res&#125;;option=&#123;title:&#123;text:&quot;我们的足迹 - Our footprints&quot;,subtext:&quot;一步一个脚印，让时光见证&quot;,sublink:&quot;#&quot;,left:&quot;center&quot;&#125;,tooltip:&#123;trigger:&quot;item&quot;&#125;,bmap:&#123;center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:&#123;styleJson:[&#123;&quot;featureType&quot;:&quot;water&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;land&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#f3f3f3&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;railway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fdfdfd&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;poi&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;green&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;subway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;manmade&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;local&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;boundary&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;building&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;label&quot;,&quot;elementType&quot;:&quot;labels.text.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#999999&quot;&#125;&#125;]&#125;&#125;,series:[&#123;name:&quot;footmark&quot;,type:&quot;scatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data),symbolSize:function(val)&#123;return val[2]/10&#125;,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:false&#125;,emphasis:&#123;show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;#60C0DD&quot;&#125;&#125;&#125;,&#123;name:&quot;I miss you&quot;,type:&quot;effectScatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data.sort(function(a,b)&#123;return b.value-a.value&#125;).slice(0,2)),symbolSize:function(val)&#123;return val[2]/10&#125;,showEffectOn:&quot;render&quot;,rippleEffect:&#123;brushType:&quot;stroke&quot;&#125;,hoverAnimation:true,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;purple&quot;,shadowBlur:10,shadowColor:&quot;#333&quot;&#125;&#125;,zlevel:1&#125;]&#125;;bmapChart.setOption(option);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p> 文章末尾有博客链接。<br> 在这个页面中所展现的特效中还引入了其他的js文件，如china.js、api.js、bmap.js等，例如api.js是百度地图的js代码，当然你可以引入任何你想要引用的js文件。  </p>\n<h2 id=\"详细\"><a href=\"#详细\" class=\"headerlink\" title=\"详细\"></a>详细</h2><p>至于bmap.js文件可以在<a href=\"https://github.com/ecomfe/echarts/tree/master/extension/bmap\" target=\"_blank\" rel=\"external\">github</a>下载，下载之后打开echarts-master文件夹，找到extension中的bamp.js,如下图所示:<br><img src=\"http://osuskkx7k.bkt.clouddn.com/1.PNG\" alt=\"WithYou\"></p>\n<p>ECharts使用参考（其中有china.js的介绍）：</p>\n<ul>\n<li><a href=\"http://efe.baidu.com/blog/echarts-map-tutorial/\" target=\"_blank\" rel=\"external\">ECharts 实现地图散点图（上）</a></li>\n<li><a href=\"http://efe.baidu.com/blog/echarts-map-tutorial-2/\" target=\"_blank\" rel=\"external\">ECharts 实现地图散点图（下）</a></li>\n</ul>\n<p>这里要注意一个问题，就是引入bmap.js后，地图并不显示，想要使用百度地图，还要去<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\" target=\"_blank\" rel=\"external\">百度地图开放平台</a>申请一个密钥，申请成功后在页面中引入，但是经过多次尝试，直接在md文件中引入并不起作用，如下：</p>\n<p><code>&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=？（你的密钥）&quot;&gt;&lt;/script&gt;</code></p>\n<p>   由此想到在script标签中嵌入了网页链接，md可能不能识别（只是猜测），于是想着将这个链接所指向的js转为文件引入试试。直接点击链接，跳转到如下页面：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A61.PNG\" alt=\"WithYou\"></p>\n<p>可以看到标记处同样为一个链接，再次从浏览器打开，出现如下：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A62.PNG\" alt=\"WithYou\"></p>\n<p>在你眼前呈现的是全屏的js代码，这就是我们所需要的js文件，即百度地图的js代码，将它全选保存为js文件，这里命名为api.js。<br>然后在md中引入它即可使用，这样我们就能取得和百度地图类似的效果。</p>\n<p>下面贴出完整的文章代码，即md文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;map-wrap&quot; style=&quot;height: 500px;width:800px;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/echarts.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/china.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/api.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/bmap.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var bmapChart=echarts.init(document.getElementById(&quot;map-wrap&quot;));var data=[&#123;name:&quot;上海&quot;,value:299&#125;,&#123;name:&quot;厦门&quot;,value:245&#125;,&#123;name:&quot;丰城&quot;,value:120&#125;,&#123;name:&quot;南昌&quot;,value:160&#125;,&#123;name:&quot;张家界&quot;,value:128&#125;,&#123;name:&quot;长沙&quot;,value:75&#125;,&#123;name:&quot;杭州&quot;,value:90&#125;,&#123;name:&quot;福州&quot;,value:90&#125;,&#123;name:&quot;深圳&quot;,value:90&#125;,&#123;name:&quot;武汉&quot;,value:73&#125;];var geoCoordMap=&#123;&quot;厦门&quot;:[118.105,24.443],&quot;上海&quot;:[121.399,31.321],&quot;丰城&quot;:[115.801,28.201],&quot;南昌&quot;:[115.856,28.691],&quot;张家界&quot;:[110.489,29.118],&quot;福州&quot;:[119.3,26.08],&quot;长沙&quot;:[113,28.21],&quot;杭州&quot;:[120.16,30.28],&quot;深圳&quot;:[114.06,22.55],&quot;武汉&quot;:[114.31,30.52]&#125;;var convertData=function(data)&#123;var res=[];for(var i=0;i&lt;data.length;i++)&#123;var geoCoord=geoCoordMap[data[i].name];if(geoCoord)&#123;res.push(&#123;name:data[i].name,value:geoCoord.concat(data[i].value)&#125;)&#125;&#125;return res&#125;;option=&#123;title:&#123;text:&quot;我们的足迹 - Our footprints&quot;,subtext:&quot;一步一个脚印，让时光见证&quot;,sublink:&quot;#&quot;,left:&quot;center&quot;&#125;,tooltip:&#123;trigger:&quot;item&quot;&#125;,bmap:&#123;center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:&#123;styleJson:[&#123;&quot;featureType&quot;:&quot;water&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;land&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#f3f3f3&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;railway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fdfdfd&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;poi&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;green&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;subway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;manmade&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;local&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;boundary&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;building&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;label&quot;,&quot;elementType&quot;:&quot;labels.text.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#999999&quot;&#125;&#125;]&#125;&#125;,series:[&#123;name:&quot;footmark&quot;,type:&quot;scatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data),symbolSize:function(val)&#123;return val[2]/10&#125;,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:false&#125;,emphasis:&#123;show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;#60C0DD&quot;&#125;&#125;&#125;,&#123;name:&quot;I miss you&quot;,type:&quot;effectScatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data.sort(function(a,b)&#123;return b.value-a.value&#125;).slice(0,2)),symbolSize:function(val)&#123;return val[2]/10&#125;,showEffectOn:&quot;render&quot;,rippleEffect:&#123;brushType:&quot;stroke&quot;&#125;,hoverAnimation:true,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;purple&quot;,shadowBlur:10,shadowColor:&quot;#333&quot;&#125;&#125;,zlevel:1&#125;]&#125;;bmapChart.setOption(option);</div><div class=\"line\">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>特效如下图所示：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%89%B9%E6%95%882.PNG\" alt=\"WithYou\"></p>\n<p>欢迎访问博客页面查看效果：<a href=\"https://youngforzy.github.io/2017/08/07/index/#more\" target=\"_blank\" rel=\"external\">Youngforzy</a></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><font size=\"4\">这里其实有个问题，就是特效虽然展现出来，但是在网页端还是无法实现地图的缩放，而在手机端和ipad中都可以进行地图的缩放，目前这个问题还未能得到解决，待日后解决再补充。</font></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是在MarkDown中插入js代码的过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上周困扰了两天的问题终于得到解决，于是就打算写点东西，也当作一次记录。</p>\n<p>从题目可以看出，问题就是——<strong>如何在Hexo发布博客的Md文件中引入JS代码</strong>，来实现你想要的特效。<br>之所以会提出这个问题，是源于一个简单的想法，单纯地想在某一篇博客中引入echarts（一个纯 Javascript 的图表库）特效，实质上就是引入它的JS代码。</p>\n<p>那么就详细讲解一下引入echarts来实现特效的过程。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>首先，在<a href=\"http://echarts.baidu.com/download.html\" target=\"_blank\" rel=\"external\">echarts下载页面</a> 中下载相应的版本，我这里下载的是完整版（echarts.min.js）。<br>文件下载完成后，将其放入下图所示文件夹当中<br><img src=\"http://osuskkx7k.bkt.clouddn.com/js%E5%AD%98%E5%82%A8.PNG\" alt=\"WithYou\"></p>\n<p>我的博客使用的是next主题，打开themes文件夹中的next文件夹，再依次打开source、js、src文件夹，就可以看到许多js文件，将echarts.min.js放入即可。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在文件引入后（src就是指向刚刚存入js文件的目录），那么你就可以在你的博客中引用这个js文件来达到特定的效果。<br>引用的方式很简单，只需一行代码：</p>\n<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/echarts.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<p>在引用js文件后，那么你只要在md文件中添加相应的js代码片段即可，这里贴出我使用的js代码片段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var bmapChart=echarts.init(document.getElementById(&quot;map-wrap&quot;));var data=[&#123;name:&quot;上海&quot;,value:299&#125;,&#123;name:&quot;厦门&quot;,value:245&#125;,&#123;name:&quot;丰城&quot;,value:120&#125;,&#123;name:&quot;南昌&quot;,value:160&#125;,&#123;name:&quot;张家界&quot;,value:128&#125;,&#123;name:&quot;长沙&quot;,value:75&#125;,&#123;name:&quot;杭州&quot;,value:90&#125;,&#123;name:&quot;福州&quot;,value:90&#125;,&#123;name:&quot;深圳&quot;,value:90&#125;,&#123;name:&quot;武汉&quot;,value:73&#125;];var geoCoordMap=&#123;&quot;厦门&quot;:[118.105,24.443],&quot;上海&quot;:[121.399,31.321],&quot;丰城&quot;:[115.801,28.201],&quot;南昌&quot;:[115.856,28.691],&quot;张家界&quot;:[110.489,29.118],&quot;福州&quot;:[119.3,26.08],&quot;长沙&quot;:[113,28.21],&quot;杭州&quot;:[120.16,30.28],&quot;深圳&quot;:[114.06,22.55],&quot;武汉&quot;:[114.31,30.52]&#125;;var convertData=function(data)&#123;var res=[];for(var i=0;i&lt;data.length;i++)&#123;var geoCoord=geoCoordMap[data[i].name];if(geoCoord)&#123;res.push(&#123;name:data[i].name,value:geoCoord.concat(data[i].value)&#125;)&#125;&#125;return res&#125;;option=&#123;title:&#123;text:&quot;我们的足迹 - Our footprints&quot;,subtext:&quot;一步一个脚印，让时光见证&quot;,sublink:&quot;#&quot;,left:&quot;center&quot;&#125;,tooltip:&#123;trigger:&quot;item&quot;&#125;,bmap:&#123;center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:&#123;styleJson:[&#123;&quot;featureType&quot;:&quot;water&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;land&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#f3f3f3&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;railway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fdfdfd&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;poi&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;green&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;subway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;manmade&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;local&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;boundary&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;building&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;label&quot;,&quot;elementType&quot;:&quot;labels.text.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#999999&quot;&#125;&#125;]&#125;&#125;,series:[&#123;name:&quot;footmark&quot;,type:&quot;scatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data),symbolSize:function(val)&#123;return val[2]/10&#125;,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:false&#125;,emphasis:&#123;show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;#60C0DD&quot;&#125;&#125;&#125;,&#123;name:&quot;I miss you&quot;,type:&quot;effectScatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data.sort(function(a,b)&#123;return b.value-a.value&#125;).slice(0,2)),symbolSize:function(val)&#123;return val[2]/10&#125;,showEffectOn:&quot;render&quot;,rippleEffect:&#123;brushType:&quot;stroke&quot;&#125;,hoverAnimation:true,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;purple&quot;,shadowBlur:10,shadowColor:&quot;#333&quot;&#125;&#125;,zlevel:1&#125;]&#125;;bmapChart.setOption(option);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p> 文章末尾有博客链接。<br> 在这个页面中所展现的特效中还引入了其他的js文件，如china.js、api.js、bmap.js等，例如api.js是百度地图的js代码，当然你可以引入任何你想要引用的js文件。  </p>\n<h2 id=\"详细\"><a href=\"#详细\" class=\"headerlink\" title=\"详细\"></a>详细</h2><p>至于bmap.js文件可以在<a href=\"https://github.com/ecomfe/echarts/tree/master/extension/bmap\" target=\"_blank\" rel=\"external\">github</a>下载，下载之后打开echarts-master文件夹，找到extension中的bamp.js,如下图所示:<br><img src=\"http://osuskkx7k.bkt.clouddn.com/1.PNG\" alt=\"WithYou\"></p>\n<p>ECharts使用参考（其中有china.js的介绍）：</p>\n<ul>\n<li><a href=\"http://efe.baidu.com/blog/echarts-map-tutorial/\" target=\"_blank\" rel=\"external\">ECharts 实现地图散点图（上）</a></li>\n<li><a href=\"http://efe.baidu.com/blog/echarts-map-tutorial-2/\" target=\"_blank\" rel=\"external\">ECharts 实现地图散点图（下）</a></li>\n</ul>\n<p>这里要注意一个问题，就是引入bmap.js后，地图并不显示，想要使用百度地图，还要去<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\" target=\"_blank\" rel=\"external\">百度地图开放平台</a>申请一个密钥，申请成功后在页面中引入，但是经过多次尝试，直接在md文件中引入并不起作用，如下：</p>\n<p><code>&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=？（你的密钥）&quot;&gt;&lt;/script&gt;</code></p>\n<p>   由此想到在script标签中嵌入了网页链接，md可能不能识别（只是猜测），于是想着将这个链接所指向的js转为文件引入试试。直接点击链接，跳转到如下页面：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A61.PNG\" alt=\"WithYou\"></p>\n<p>可以看到标记处同样为一个链接，再次从浏览器打开，出现如下：  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%99%BE%E5%BA%A62.PNG\" alt=\"WithYou\"></p>\n<p>在你眼前呈现的是全屏的js代码，这就是我们所需要的js文件，即百度地图的js代码，将它全选保存为js文件，这里命名为api.js。<br>然后在md中引入它即可使用，这样我们就能取得和百度地图类似的效果。</p>\n<p>下面贴出完整的文章代码，即md文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;map-wrap&quot; style=&quot;height: 500px;width:800px;&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/echarts.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/china.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/api.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;/js/src/bmap.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var bmapChart=echarts.init(document.getElementById(&quot;map-wrap&quot;));var data=[&#123;name:&quot;上海&quot;,value:299&#125;,&#123;name:&quot;厦门&quot;,value:245&#125;,&#123;name:&quot;丰城&quot;,value:120&#125;,&#123;name:&quot;南昌&quot;,value:160&#125;,&#123;name:&quot;张家界&quot;,value:128&#125;,&#123;name:&quot;长沙&quot;,value:75&#125;,&#123;name:&quot;杭州&quot;,value:90&#125;,&#123;name:&quot;福州&quot;,value:90&#125;,&#123;name:&quot;深圳&quot;,value:90&#125;,&#123;name:&quot;武汉&quot;,value:73&#125;];var geoCoordMap=&#123;&quot;厦门&quot;:[118.105,24.443],&quot;上海&quot;:[121.399,31.321],&quot;丰城&quot;:[115.801,28.201],&quot;南昌&quot;:[115.856,28.691],&quot;张家界&quot;:[110.489,29.118],&quot;福州&quot;:[119.3,26.08],&quot;长沙&quot;:[113,28.21],&quot;杭州&quot;:[120.16,30.28],&quot;深圳&quot;:[114.06,22.55],&quot;武汉&quot;:[114.31,30.52]&#125;;var convertData=function(data)&#123;var res=[];for(var i=0;i&lt;data.length;i++)&#123;var geoCoord=geoCoordMap[data[i].name];if(geoCoord)&#123;res.push(&#123;name:data[i].name,value:geoCoord.concat(data[i].value)&#125;)&#125;&#125;return res&#125;;option=&#123;title:&#123;text:&quot;我们的足迹 - Our footprints&quot;,subtext:&quot;一步一个脚印，让时光见证&quot;,sublink:&quot;#&quot;,left:&quot;center&quot;&#125;,tooltip:&#123;trigger:&quot;item&quot;&#125;,bmap:&#123;center:[106.320439,32.58783],zoom:5,roam:true,mapStyle:&#123;styleJson:[&#123;&quot;featureType&quot;:&quot;water&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;land&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#f3f3f3&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;railway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fdfdfd&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;highway&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;geometry.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;poi&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;green&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;subway&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;manmade&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;local&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;arterial&quot;,&quot;elementType&quot;:&quot;labels&quot;,&quot;stylers&quot;:&#123;&quot;visibility&quot;:&quot;off&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;boundary&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#fefefe&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;building&quot;,&quot;elementType&quot;:&quot;all&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#d1d1d1&quot;&#125;&#125;,&#123;&quot;featureType&quot;:&quot;label&quot;,&quot;elementType&quot;:&quot;labels.text.fill&quot;,&quot;stylers&quot;:&#123;&quot;color&quot;:&quot;#999999&quot;&#125;&#125;]&#125;&#125;,series:[&#123;name:&quot;footmark&quot;,type:&quot;scatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data),symbolSize:function(val)&#123;return val[2]/10&#125;,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:false&#125;,emphasis:&#123;show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;#60C0DD&quot;&#125;&#125;&#125;,&#123;name:&quot;I miss you&quot;,type:&quot;effectScatter&quot;,coordinateSystem:&quot;bmap&quot;,data:convertData(data.sort(function(a,b)&#123;return b.value-a.value&#125;).slice(0,2)),symbolSize:function(val)&#123;return val[2]/10&#125;,showEffectOn:&quot;render&quot;,rippleEffect:&#123;brushType:&quot;stroke&quot;&#125;,hoverAnimation:true,label:&#123;normal:&#123;formatter:&quot;&#123;b&#125;&quot;,position:&quot;right&quot;,show:true&#125;&#125;,itemStyle:&#123;normal:&#123;color:&quot;purple&quot;,shadowBlur:10,shadowColor:&quot;#333&quot;&#125;&#125;,zlevel:1&#125;]&#125;;bmapChart.setOption(option);</div><div class=\"line\">    &lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>特效如下图所示：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%89%B9%E6%95%882.PNG\" alt=\"WithYou\"></p>\n<p>欢迎访问博客页面查看效果：<a href=\"https://youngforzy.github.io/2017/08/07/index/#more\" target=\"_blank\" rel=\"external\">Youngforzy</a></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p><font size=\"4\">这里其实有个问题，就是特效虽然展现出来，但是在网页端还是无法实现地图的缩放，而在手机端和ipad中都可以进行地图的缩放，目前这个问题还未能得到解决，待日后解决再补充。</font></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是在MarkDown中插入js代码的过程。</p>\n"},{"title":"Java并发工具类之CyclicBarrier","date":"2017-12-08T10:42:18.000Z","_content":"### 一、CyclicBarrier的概念\n\nCyclicBarrier的意思是可循环使用的屏障。**它可以让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有阻塞的线程才会继续执行。**\n\n它就好像一道关卡，只有所有的部队（线程）都到了才能放行。\n\n![image](http://osuskkx7k.bkt.clouddn.com/cycle.png)\n\n\n### 二、CyclicBarrier的实现分析\n\n**部分源码：**\n```\npublic class CyclicBarrier {\n    \n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition trip = lock.newCondition();\n    private final int parties;\n    private final Runnable barrierCommand;\n    private Generation generation = new Generation();\n    private int count;\n    private static class Generation {\n        boolean broken = false;\n    }\n    ....\n}\n```\n可以看到，**CyclicBarrier是基于ReentrantLock和Condition实现的。**\n- parties 表示拦截线程的数量\n- barrierCommand 表示所有线程到达屏障后优先执行的命令\n- Generation 表示屏障循环利用\n\n#### 构造函数\nCyclicBarrier有两个构造函数：\n\n```\npublic CyclicBarrier(int parties) {\n        this(parties, null);\n    }\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n        if (parties <= 0) throw new IllegalArgumentException();\n        this.parties = parties;\n        this.count = parties;\n        this.barrierCommand = barrierAction;\n    }\n```\n第一个构造函数调用的其实也是第二个构造函数，只是第二个参数barrierAction为null。这个参数其实是一个线程任务命令，用于在所有线程到达屏障时，优先执行该线程任务，方便处理更加复杂的业务场景。\n\n#### await()方法：\n每当一个线程调用await()方法表示该线程到达屏障，\n\n```\npublic int await() throws InterruptedException, BrokenBarrierException {\n        try {\n            return dowait(false, 0L);\n        } catch (TimeoutException toe) {\n            throw new Error(toe); \n        }\n    }\n```\n进入dowait()方法：\n\n```\nprivate int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            final Generation g = generation;\n            \n            //当前generation“已损坏”，抛出异常\n            if (g.broken)\n                throw new BrokenBarrierException();\n                \n            //如果线程中断，终止CyclicBarrier\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            //每当线程进入，计数-1\n            int index = --count;\n            if (index == 0) {  //计数为0时，进入\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)   //如果有barrierCommand，则优先执行该任务\n                        command.run();\n                    ranAction = true;\n                    nextGeneration();//唤醒所有等待线程，并更新generation\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n            // loop until tripped, broken, interrupted, or timed out\n            //自旋\n            for (;;) {\n                try {\n                    if (!timed)//如果不是超时等待，则调用Condition.await()方法等待\n                        trip.await();\n                    else if (nanos > 0L)//超时等待，调用Condition.awaitNanos()方法等待\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    //如果等待过程中，线程被中断，则执行下面的函数。\n                    if (g == generation && ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                    }\n                }\n                \n                //当前generation“已损坏”，抛出异常\n                if (g.broken)\n                    throw new BrokenBarrierException();\n                    \n                //generation已经更新，返回index\n                if (g != generation)\n                    return index;\n\n                //“超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n```\ndowait()的主要处理逻辑如下：如果该线程不是到达的最后一个线程，则它会一直处于等待状态，除非发生以下情况：\n1. 最后一个线程到达，即index == 0\n2. 超出了指定时间（超时等待）\n3. 其他的某个线程中断当前线程\n4. 其他的某个线程中断另一个等待的线程\n5. 其他的某个线程在等待barrier超时\n6. 其他的某个线程在此barrier调用reset()方法。reset()方法用于将屏障重置为初始状态。\n\nGeneration对象描述着CyclicBarrier的更新换代。在CyclicBarrier中，同一批线程属于同一代。当有parties个线程到达barrier，generation就会被更新换代。\n\n### 三、CyclicBarrier与CountDownLatch的对比\n\n\n**CyclicBarrier允许一系列线程相互等待对方到达屏障，先到达的线程被阻塞在屏障前，必须等到所有线程都到达了屏障，所有线程才能运行；CountDownLatch允许一个或多个线程等待一些特定的操作完成，而这些操作是在其它的线程中进行的，只有“被等的线程”的操作完成后，“等待的线程”才能执行；**\n\n**CyclicBarrier强调的是n个线程互相等待，CountDownLatch强调的是1个线程或n个线程等待其他线程操作。**\n\n\n\n**CyclicBarrier的计数器可以循环使用（出现错误可重置计数），CountDownLatch的计数器只能用一次；**\n\n**CyclicBarrier可以在所有线程到达屏障后先执行一个线程任务，再运行所有线程，用于处理复杂的业务，CountDownLatch不可以。**","source":"_posts/Java并发工具类之CyclicBarrier.md","raw":"---\ntitle: Java并发工具类之CyclicBarrier\ndate: 2017-12-8 18:42:18\ntags: [并发,CyclicBarrier]\ncategories: 技术\n---\n### 一、CyclicBarrier的概念\n\nCyclicBarrier的意思是可循环使用的屏障。**它可以让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有阻塞的线程才会继续执行。**\n\n它就好像一道关卡，只有所有的部队（线程）都到了才能放行。\n\n![image](http://osuskkx7k.bkt.clouddn.com/cycle.png)\n\n\n### 二、CyclicBarrier的实现分析\n\n**部分源码：**\n```\npublic class CyclicBarrier {\n    \n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition trip = lock.newCondition();\n    private final int parties;\n    private final Runnable barrierCommand;\n    private Generation generation = new Generation();\n    private int count;\n    private static class Generation {\n        boolean broken = false;\n    }\n    ....\n}\n```\n可以看到，**CyclicBarrier是基于ReentrantLock和Condition实现的。**\n- parties 表示拦截线程的数量\n- barrierCommand 表示所有线程到达屏障后优先执行的命令\n- Generation 表示屏障循环利用\n\n#### 构造函数\nCyclicBarrier有两个构造函数：\n\n```\npublic CyclicBarrier(int parties) {\n        this(parties, null);\n    }\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n        if (parties <= 0) throw new IllegalArgumentException();\n        this.parties = parties;\n        this.count = parties;\n        this.barrierCommand = barrierAction;\n    }\n```\n第一个构造函数调用的其实也是第二个构造函数，只是第二个参数barrierAction为null。这个参数其实是一个线程任务命令，用于在所有线程到达屏障时，优先执行该线程任务，方便处理更加复杂的业务场景。\n\n#### await()方法：\n每当一个线程调用await()方法表示该线程到达屏障，\n\n```\npublic int await() throws InterruptedException, BrokenBarrierException {\n        try {\n            return dowait(false, 0L);\n        } catch (TimeoutException toe) {\n            throw new Error(toe); \n        }\n    }\n```\n进入dowait()方法：\n\n```\nprivate int dowait(boolean timed, long nanos)\n        throws InterruptedException, BrokenBarrierException,\n               TimeoutException {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            final Generation g = generation;\n            \n            //当前generation“已损坏”，抛出异常\n            if (g.broken)\n                throw new BrokenBarrierException();\n                \n            //如果线程中断，终止CyclicBarrier\n            if (Thread.interrupted()) {\n                breakBarrier();\n                throw new InterruptedException();\n            }\n            //每当线程进入，计数-1\n            int index = --count;\n            if (index == 0) {  //计数为0时，进入\n                boolean ranAction = false;\n                try {\n                    final Runnable command = barrierCommand;\n                    if (command != null)   //如果有barrierCommand，则优先执行该任务\n                        command.run();\n                    ranAction = true;\n                    nextGeneration();//唤醒所有等待线程，并更新generation\n                    return 0;\n                } finally {\n                    if (!ranAction)\n                        breakBarrier();\n                }\n            }\n            // loop until tripped, broken, interrupted, or timed out\n            //自旋\n            for (;;) {\n                try {\n                    if (!timed)//如果不是超时等待，则调用Condition.await()方法等待\n                        trip.await();\n                    else if (nanos > 0L)//超时等待，调用Condition.awaitNanos()方法等待\n                        nanos = trip.awaitNanos(nanos);\n                } catch (InterruptedException ie) {\n                    //如果等待过程中，线程被中断，则执行下面的函数。\n                    if (g == generation && ! g.broken) {\n                        breakBarrier();\n                        throw ie;\n                    } else {\n                    }\n                }\n                \n                //当前generation“已损坏”，抛出异常\n                if (g.broken)\n                    throw new BrokenBarrierException();\n                    \n                //generation已经更新，返回index\n                if (g != generation)\n                    return index;\n\n                //“超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常\n                if (timed && nanos <= 0L) {\n                    breakBarrier();\n                    throw new TimeoutException();\n                }\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n```\ndowait()的主要处理逻辑如下：如果该线程不是到达的最后一个线程，则它会一直处于等待状态，除非发生以下情况：\n1. 最后一个线程到达，即index == 0\n2. 超出了指定时间（超时等待）\n3. 其他的某个线程中断当前线程\n4. 其他的某个线程中断另一个等待的线程\n5. 其他的某个线程在等待barrier超时\n6. 其他的某个线程在此barrier调用reset()方法。reset()方法用于将屏障重置为初始状态。\n\nGeneration对象描述着CyclicBarrier的更新换代。在CyclicBarrier中，同一批线程属于同一代。当有parties个线程到达barrier，generation就会被更新换代。\n\n### 三、CyclicBarrier与CountDownLatch的对比\n\n\n**CyclicBarrier允许一系列线程相互等待对方到达屏障，先到达的线程被阻塞在屏障前，必须等到所有线程都到达了屏障，所有线程才能运行；CountDownLatch允许一个或多个线程等待一些特定的操作完成，而这些操作是在其它的线程中进行的，只有“被等的线程”的操作完成后，“等待的线程”才能执行；**\n\n**CyclicBarrier强调的是n个线程互相等待，CountDownLatch强调的是1个线程或n个线程等待其他线程操作。**\n\n\n\n**CyclicBarrier的计数器可以循环使用（出现错误可重置计数），CountDownLatch的计数器只能用一次；**\n\n**CyclicBarrier可以在所有线程到达屏障后先执行一个线程任务，再运行所有线程，用于处理复杂的业务，CountDownLatch不可以。**","slug":"Java并发工具类之CyclicBarrier","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt258001250tccf3ry3f9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、CyclicBarrier的概念\"><a href=\"#一、CyclicBarrier的概念\" class=\"headerlink\" title=\"一、CyclicBarrier的概念\"></a>一、CyclicBarrier的概念</h3><p>CyclicBarrier的意思是可循环使用的屏障。<strong>它可以让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有阻塞的线程才会继续执行。</strong></p>\n<p>它就好像一道关卡，只有所有的部队（线程）都到了才能放行。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/cycle.png\" alt=\"image\"></p>\n<h3 id=\"二、CyclicBarrier的实现分析\"><a href=\"#二、CyclicBarrier的实现分析\" class=\"headerlink\" title=\"二、CyclicBarrier的实现分析\"></a>二、CyclicBarrier的实现分析</h3><p><strong>部分源码：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CyclicBarrier &#123;</div><div class=\"line\">    </div><div class=\"line\">    private final ReentrantLock lock = new ReentrantLock();</div><div class=\"line\">    private final Condition trip = lock.newCondition();</div><div class=\"line\">    private final int parties;</div><div class=\"line\">    private final Runnable barrierCommand;</div><div class=\"line\">    private Generation generation = new Generation();</div><div class=\"line\">    private int count;</div><div class=\"line\">    private static class Generation &#123;</div><div class=\"line\">        boolean broken = false;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<strong>CyclicBarrier是基于ReentrantLock和Condition实现的。</strong></p>\n<ul>\n<li>parties 表示拦截线程的数量</li>\n<li>barrierCommand 表示所有线程到达屏障后优先执行的命令</li>\n<li>Generation 表示屏障循环利用</li>\n</ul>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>CyclicBarrier有两个构造函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">        this(parties, null);</div><div class=\"line\">    &#125;</div><div class=\"line\">public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">        if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">        this.parties = parties;</div><div class=\"line\">        this.count = parties;</div><div class=\"line\">        this.barrierCommand = barrierAction;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第一个构造函数调用的其实也是第二个构造函数，只是第二个参数barrierAction为null。这个参数其实是一个线程任务命令，用于在所有线程到达屏障时，优先执行该线程任务，方便处理更加复杂的业务场景。</p>\n<h4 id=\"await-方法：\"><a href=\"#await-方法：\" class=\"headerlink\" title=\"await()方法：\"></a>await()方法：</h4><p>每当一个线程调用await()方法表示该线程到达屏障，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int await() throws InterruptedException, BrokenBarrierException &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            return dowait(false, 0L);</div><div class=\"line\">        &#125; catch (TimeoutException toe) &#123;</div><div class=\"line\">            throw new Error(toe); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>进入dowait()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">        throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">               TimeoutException &#123;</div><div class=\"line\">        final ReentrantLock lock = this.lock;</div><div class=\"line\">        lock.lock();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            final Generation g = generation;</div><div class=\"line\">            </div><div class=\"line\">            //当前generation“已损坏”，抛出异常</div><div class=\"line\">            if (g.broken)</div><div class=\"line\">                throw new BrokenBarrierException();</div><div class=\"line\">                </div><div class=\"line\">            //如果线程中断，终止CyclicBarrier</div><div class=\"line\">            if (Thread.interrupted()) &#123;</div><div class=\"line\">                breakBarrier();</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">            &#125;</div><div class=\"line\">            //每当线程进入，计数-1</div><div class=\"line\">            int index = --count;</div><div class=\"line\">            if (index == 0) &#123;  //计数为0时，进入</div><div class=\"line\">                boolean ranAction = false;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    final Runnable command = barrierCommand;</div><div class=\"line\">                    if (command != null)   //如果有barrierCommand，则优先执行该任务</div><div class=\"line\">                        command.run();</div><div class=\"line\">                    ranAction = true;</div><div class=\"line\">                    nextGeneration();//唤醒所有等待线程，并更新generation</div><div class=\"line\">                    return 0;</div><div class=\"line\">                &#125; finally &#123;</div><div class=\"line\">                    if (!ranAction)</div><div class=\"line\">                        breakBarrier();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // loop until tripped, broken, interrupted, or timed out</div><div class=\"line\">            //自旋</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    if (!timed)//如果不是超时等待，则调用Condition.await()方法等待</div><div class=\"line\">                        trip.await();</div><div class=\"line\">                    else if (nanos &gt; 0L)//超时等待，调用Condition.awaitNanos()方法等待</div><div class=\"line\">                        nanos = trip.awaitNanos(nanos);</div><div class=\"line\">                &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                    //如果等待过程中，线程被中断，则执行下面的函数。</div><div class=\"line\">                    if (g == generation &amp;&amp; ! g.broken) &#123;</div><div class=\"line\">                        breakBarrier();</div><div class=\"line\">                        throw ie;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                //当前generation“已损坏”，抛出异常</div><div class=\"line\">                if (g.broken)</div><div class=\"line\">                    throw new BrokenBarrierException();</div><div class=\"line\">                    </div><div class=\"line\">                //generation已经更新，返回index</div><div class=\"line\">                if (g != generation)</div><div class=\"line\">                    return index;</div><div class=\"line\"></div><div class=\"line\">                //“超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常</div><div class=\"line\">                if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">                    throw new TimeoutException();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            lock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>dowait()的主要处理逻辑如下：如果该线程不是到达的最后一个线程，则它会一直处于等待状态，除非发生以下情况：</p>\n<ol>\n<li>最后一个线程到达，即index == 0</li>\n<li>超出了指定时间（超时等待）</li>\n<li>其他的某个线程中断当前线程</li>\n<li>其他的某个线程中断另一个等待的线程</li>\n<li>其他的某个线程在等待barrier超时</li>\n<li>其他的某个线程在此barrier调用reset()方法。reset()方法用于将屏障重置为初始状态。</li>\n</ol>\n<p>Generation对象描述着CyclicBarrier的更新换代。在CyclicBarrier中，同一批线程属于同一代。当有parties个线程到达barrier，generation就会被更新换代。</p>\n<h3 id=\"三、CyclicBarrier与CountDownLatch的对比\"><a href=\"#三、CyclicBarrier与CountDownLatch的对比\" class=\"headerlink\" title=\"三、CyclicBarrier与CountDownLatch的对比\"></a>三、CyclicBarrier与CountDownLatch的对比</h3><p><strong>CyclicBarrier允许一系列线程相互等待对方到达屏障，先到达的线程被阻塞在屏障前，必须等到所有线程都到达了屏障，所有线程才能运行；CountDownLatch允许一个或多个线程等待一些特定的操作完成，而这些操作是在其它的线程中进行的，只有“被等的线程”的操作完成后，“等待的线程”才能执行；</strong></p>\n<p><strong>CyclicBarrier强调的是n个线程互相等待，CountDownLatch强调的是1个线程或n个线程等待其他线程操作。</strong></p>\n<p><strong>CyclicBarrier的计数器可以循环使用（出现错误可重置计数），CountDownLatch的计数器只能用一次；</strong></p>\n<p><strong>CyclicBarrier可以在所有线程到达屏障后先执行一个线程任务，再运行所有线程，用于处理复杂的业务，CountDownLatch不可以。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、CyclicBarrier的概念\"><a href=\"#一、CyclicBarrier的概念\" class=\"headerlink\" title=\"一、CyclicBarrier的概念\"></a>一、CyclicBarrier的概念</h3><p>CyclicBarrier的意思是可循环使用的屏障。<strong>它可以让一组线程到达一个屏障时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有阻塞的线程才会继续执行。</strong></p>\n<p>它就好像一道关卡，只有所有的部队（线程）都到了才能放行。</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/cycle.png\" alt=\"image\"></p>\n<h3 id=\"二、CyclicBarrier的实现分析\"><a href=\"#二、CyclicBarrier的实现分析\" class=\"headerlink\" title=\"二、CyclicBarrier的实现分析\"></a>二、CyclicBarrier的实现分析</h3><p><strong>部分源码：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CyclicBarrier &#123;</div><div class=\"line\">    </div><div class=\"line\">    private final ReentrantLock lock = new ReentrantLock();</div><div class=\"line\">    private final Condition trip = lock.newCondition();</div><div class=\"line\">    private final int parties;</div><div class=\"line\">    private final Runnable barrierCommand;</div><div class=\"line\">    private Generation generation = new Generation();</div><div class=\"line\">    private int count;</div><div class=\"line\">    private static class Generation &#123;</div><div class=\"line\">        boolean broken = false;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<strong>CyclicBarrier是基于ReentrantLock和Condition实现的。</strong></p>\n<ul>\n<li>parties 表示拦截线程的数量</li>\n<li>barrierCommand 表示所有线程到达屏障后优先执行的命令</li>\n<li>Generation 表示屏障循环利用</li>\n</ul>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>CyclicBarrier有两个构造函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">        this(parties, null);</div><div class=\"line\">    &#125;</div><div class=\"line\">public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">        if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">        this.parties = parties;</div><div class=\"line\">        this.count = parties;</div><div class=\"line\">        this.barrierCommand = barrierAction;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>第一个构造函数调用的其实也是第二个构造函数，只是第二个参数barrierAction为null。这个参数其实是一个线程任务命令，用于在所有线程到达屏障时，优先执行该线程任务，方便处理更加复杂的业务场景。</p>\n<h4 id=\"await-方法：\"><a href=\"#await-方法：\" class=\"headerlink\" title=\"await()方法：\"></a>await()方法：</h4><p>每当一个线程调用await()方法表示该线程到达屏障，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int await() throws InterruptedException, BrokenBarrierException &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            return dowait(false, 0L);</div><div class=\"line\">        &#125; catch (TimeoutException toe) &#123;</div><div class=\"line\">            throw new Error(toe); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>进入dowait()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">        throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">               TimeoutException &#123;</div><div class=\"line\">        final ReentrantLock lock = this.lock;</div><div class=\"line\">        lock.lock();</div><div class=\"line\">        try &#123;</div><div class=\"line\">            final Generation g = generation;</div><div class=\"line\">            </div><div class=\"line\">            //当前generation“已损坏”，抛出异常</div><div class=\"line\">            if (g.broken)</div><div class=\"line\">                throw new BrokenBarrierException();</div><div class=\"line\">                </div><div class=\"line\">            //如果线程中断，终止CyclicBarrier</div><div class=\"line\">            if (Thread.interrupted()) &#123;</div><div class=\"line\">                breakBarrier();</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">            &#125;</div><div class=\"line\">            //每当线程进入，计数-1</div><div class=\"line\">            int index = --count;</div><div class=\"line\">            if (index == 0) &#123;  //计数为0时，进入</div><div class=\"line\">                boolean ranAction = false;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    final Runnable command = barrierCommand;</div><div class=\"line\">                    if (command != null)   //如果有barrierCommand，则优先执行该任务</div><div class=\"line\">                        command.run();</div><div class=\"line\">                    ranAction = true;</div><div class=\"line\">                    nextGeneration();//唤醒所有等待线程，并更新generation</div><div class=\"line\">                    return 0;</div><div class=\"line\">                &#125; finally &#123;</div><div class=\"line\">                    if (!ranAction)</div><div class=\"line\">                        breakBarrier();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // loop until tripped, broken, interrupted, or timed out</div><div class=\"line\">            //自旋</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    if (!timed)//如果不是超时等待，则调用Condition.await()方法等待</div><div class=\"line\">                        trip.await();</div><div class=\"line\">                    else if (nanos &gt; 0L)//超时等待，调用Condition.awaitNanos()方法等待</div><div class=\"line\">                        nanos = trip.awaitNanos(nanos);</div><div class=\"line\">                &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                    //如果等待过程中，线程被中断，则执行下面的函数。</div><div class=\"line\">                    if (g == generation &amp;&amp; ! g.broken) &#123;</div><div class=\"line\">                        breakBarrier();</div><div class=\"line\">                        throw ie;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                //当前generation“已损坏”，抛出异常</div><div class=\"line\">                if (g.broken)</div><div class=\"line\">                    throw new BrokenBarrierException();</div><div class=\"line\">                    </div><div class=\"line\">                //generation已经更新，返回index</div><div class=\"line\">                if (g != generation)</div><div class=\"line\">                    return index;</div><div class=\"line\"></div><div class=\"line\">                //“超时等待”，并且时间已到,终止CyclicBarrier，并抛出异常</div><div class=\"line\">                if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">                    throw new TimeoutException();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            lock.unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>dowait()的主要处理逻辑如下：如果该线程不是到达的最后一个线程，则它会一直处于等待状态，除非发生以下情况：</p>\n<ol>\n<li>最后一个线程到达，即index == 0</li>\n<li>超出了指定时间（超时等待）</li>\n<li>其他的某个线程中断当前线程</li>\n<li>其他的某个线程中断另一个等待的线程</li>\n<li>其他的某个线程在等待barrier超时</li>\n<li>其他的某个线程在此barrier调用reset()方法。reset()方法用于将屏障重置为初始状态。</li>\n</ol>\n<p>Generation对象描述着CyclicBarrier的更新换代。在CyclicBarrier中，同一批线程属于同一代。当有parties个线程到达barrier，generation就会被更新换代。</p>\n<h3 id=\"三、CyclicBarrier与CountDownLatch的对比\"><a href=\"#三、CyclicBarrier与CountDownLatch的对比\" class=\"headerlink\" title=\"三、CyclicBarrier与CountDownLatch的对比\"></a>三、CyclicBarrier与CountDownLatch的对比</h3><p><strong>CyclicBarrier允许一系列线程相互等待对方到达屏障，先到达的线程被阻塞在屏障前，必须等到所有线程都到达了屏障，所有线程才能运行；CountDownLatch允许一个或多个线程等待一些特定的操作完成，而这些操作是在其它的线程中进行的，只有“被等的线程”的操作完成后，“等待的线程”才能执行；</strong></p>\n<p><strong>CyclicBarrier强调的是n个线程互相等待，CountDownLatch强调的是1个线程或n个线程等待其他线程操作。</strong></p>\n<p><strong>CyclicBarrier的计数器可以循环使用（出现错误可重置计数），CountDownLatch的计数器只能用一次；</strong></p>\n<p><strong>CyclicBarrier可以在所有线程到达屏障后先执行一个线程任务，再运行所有线程，用于处理复杂的业务，CountDownLatch不可以。</strong></p>\n"},{"title":"Java并发工具类之CountDownLatch","date":"2017-12-03T10:42:18.000Z","_content":"### 一、概念\n\nCountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。\n\n回忆之前，我们知道Join方法，用于让当前线程等待join的线程执行结束。\n\n```\nwhile(isAlive()){\n    wait(0);\n}\n```\n\n\n其原理就是不停地检查join线程是否存活，如果存活则一直等待。\nCountDownLatch也可以实现join的功能，且功能更多。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/CountDownLatch.png)\n\nCountDownLatch是通过一个计数器来实现的，当new 一个CountDownLatch对象的时候需要传入该计数器值。  \nCountDownLatch有两个最主要的方法await()和countDown()。\n\n当一个线程调用await()时会阻塞；每当一个其他线程完成自己的任务调用countDown()后，计数器的值就会减1。当计数器的值为0时，就表示所有的线程均已经完成了任务，然后阻塞的线程就可以继续执行了。\n\n### 二、实现分析\n\n**部分源码**：\n```\npublic class CountDownLatch {\n    private final Sync sync;\n    //内部类Sync（继承AQS）\n    private static final class Sync extends AbstractQueuedSynchronizer {\n        Sync(int count) {\n            setState(count);\n        }\n        //重写\n        protected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n        protected boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n    }\n    //构造方法\n     public CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n    ....\n}\n```\n可以看到，CountDownLatch的实现同样依赖AQS，可见AQS作用之大。\n观察Sync重写的方法（tryAcquireShared、tryReleaseShared），我们可以断定：\n**CountDownLatch使用的是共享锁。**\n\n#### await()的实现\n\n调用await()方法会阻塞当前线程，直到计数器为0或被中断。\n\n```\npublic void await() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n```\n可以看到，其实调用了AQS的acquireSharedInterruptibly()方法：\n```\npublic final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n该方法中，如果线程被中断则抛出异常；否则尝试获取锁。\n\n```\nprotected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n\n```\n尝试获取锁时调用了Sync重写的tryAcquireShared()方法：\n很简单只有一行代码，但却是CountDownLatch的原理：**如果同步状态为0（计数器值为0）那么返回1，表示获取锁成功；否则返回-1，获取锁失败**，并进入doAcquireSharedInterruptibly()方法：\n\n```\nprivate void doAcquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n        final Node node = addWaiter(Node.SHARED);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head) {\n                    int r = tryAcquireShared(arg);\n                    //注意r只会等于 0 or -1；\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        failed = false;\n                        return;\n                    }\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n该方法在前面共享锁的文章中有提到，它是一个自旋尝试获取锁的方法，这里不再赘述。**注意18行的代码：int r = tryAcquireShared(arg)，在获取同步状态时只会返回两个值0和-1。**\n\n\n#### countDown()的实现\n每次调用countDown()时，计数器的数量就会减1。\n\n```\npublic void countDown() {\n        sync.releaseShared(1);\n    }\n```\n调用的是AQS的releaseShared()方法，释放同步状态：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n进入releaseShared()方法，调用Sync重写的tryReleaseShared()方法：\n```\nprotected boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n可以看到，**该方法自旋CAS操作释放同步状态（可能多个线程同时调用countDown()方法，所以用CAS保证原子性），计数器每次-1，但是直到同步状态为0（计数器为0）时，才返回true**。然后进入doReleaseShared()方法，唤醒阻塞的线程，使其从await()方法退出。\n\n#### 总结\n\n**CountDownLatch的内部实现是共享锁。**\n\n\n**创建CountDownLatch时，需要传入计数器的初始值，可以理解为共享锁的总次数。**  \n**当一个线程调用await()方法，会检查计数器的值，不为0则阻塞直到为0。  \n当其他线程调用countDown()方法时（可以一个线程调用多次），会释放共享状态，计数器-1。**  \n**当计数器减为0时，阻塞的线程才会运行。**\n\n\n### 三、应用场景\nCountDownLatch的应用场景：**主线程等到N个子线程执行完毕之后，再继续往下执行。** 如跑步比赛统计排名、启动程序等。\n\n```\npublic class CountDownLatchDemo {\n\t\n\tprivate CountDownLatch cd = new CountDownLatch(5);\n\t/*\n\t * 飞船类\n\t */\n\t class Plane extends Thread{\n\t\t @Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"飞船准备就绪，倒计时5s：\");\n\t\t\tSystem.out.println(cd.getCount());//计数器的值\n\t\t\ttry {\n\t\t\t\tcd.await();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"飞船起飞啦！！！！\");\n\t\t}\n\t }\n\t /*\n\t * 倒计时类\n\t */\n\t class Time extends Thread{\n\t\t @Override\n\t\tpublic void run() {\n\t\t\t for(int i=5;i>0;i--){\n\t\t\t\t System.out.println(\"起飞倒计时：\"+i+\"s\");\n\t\t\t\t cd.countDown();\n\t\t\t }\n\t\t}\n\t }\n\t\n\tpublic static void main(String[] args) {\n\t\tCountDownLatchDemo cdemo = new CountDownLatchDemo();\n\t\tPlane p = cdemo.new Plane();\n\t\tp.start();\n\t\tTime t = cdemo.new Time();\n\t\tt.start();\n\t}\n}\n```\n输出结果：\n```\n飞船准备就绪，倒计时5s：\n5\n起飞倒计时：5s\n起飞倒计时：4s\n起飞倒计时：3s\n起飞倒计时：2s\n起飞倒计时：1s\n飞船起飞啦！！！！\n```\n**当调用CountDownLatch的countDown方法时，计数器N就会-1，无论是在多个线程调用，还是一个线程调用多次（上面的例子就是在一个线程中多次调用）。**\n","source":"_posts/Java并发工具类之CountDownLatch.md","raw":"---\ntitle: Java并发工具类之CountDownLatch\ndate: 2017-12-3 18:42:18\ntags: [并发,CountDownLatch]\ncategories: 技术\n---\n### 一、概念\n\nCountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。\n\n回忆之前，我们知道Join方法，用于让当前线程等待join的线程执行结束。\n\n```\nwhile(isAlive()){\n    wait(0);\n}\n```\n\n\n其原理就是不停地检查join线程是否存活，如果存活则一直等待。\nCountDownLatch也可以实现join的功能，且功能更多。  \n\n![image](http://osuskkx7k.bkt.clouddn.com/CountDownLatch.png)\n\nCountDownLatch是通过一个计数器来实现的，当new 一个CountDownLatch对象的时候需要传入该计数器值。  \nCountDownLatch有两个最主要的方法await()和countDown()。\n\n当一个线程调用await()时会阻塞；每当一个其他线程完成自己的任务调用countDown()后，计数器的值就会减1。当计数器的值为0时，就表示所有的线程均已经完成了任务，然后阻塞的线程就可以继续执行了。\n\n### 二、实现分析\n\n**部分源码**：\n```\npublic class CountDownLatch {\n    private final Sync sync;\n    //内部类Sync（继承AQS）\n    private static final class Sync extends AbstractQueuedSynchronizer {\n        Sync(int count) {\n            setState(count);\n        }\n        //重写\n        protected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n        protected boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n    }\n    //构造方法\n     public CountDownLatch(int count) {\n        if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n        this.sync = new Sync(count);\n    }\n    ....\n}\n```\n可以看到，CountDownLatch的实现同样依赖AQS，可见AQS作用之大。\n观察Sync重写的方法（tryAcquireShared、tryReleaseShared），我们可以断定：\n**CountDownLatch使用的是共享锁。**\n\n#### await()的实现\n\n调用await()方法会阻塞当前线程，直到计数器为0或被中断。\n\n```\npublic void await() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n```\n可以看到，其实调用了AQS的acquireSharedInterruptibly()方法：\n```\npublic final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n该方法中，如果线程被中断则抛出异常；否则尝试获取锁。\n\n```\nprotected int tryAcquireShared(int acquires) {\n            return (getState() == 0) ? 1 : -1;\n        }\n\n```\n尝试获取锁时调用了Sync重写的tryAcquireShared()方法：\n很简单只有一行代码，但却是CountDownLatch的原理：**如果同步状态为0（计数器值为0）那么返回1，表示获取锁成功；否则返回-1，获取锁失败**，并进入doAcquireSharedInterruptibly()方法：\n\n```\nprivate void doAcquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n        final Node node = addWaiter(Node.SHARED);\n        boolean failed = true;\n        try {\n            for (;;) {\n                final Node p = node.predecessor();\n                if (p == head) {\n                    int r = tryAcquireShared(arg);\n                    //注意r只会等于 0 or -1；\n                    if (r >= 0) {\n                        setHeadAndPropagate(node, r);\n                        p.next = null; // help GC\n                        failed = false;\n                        return;\n                    }\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    throw new InterruptedException();\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n该方法在前面共享锁的文章中有提到，它是一个自旋尝试获取锁的方法，这里不再赘述。**注意18行的代码：int r = tryAcquireShared(arg)，在获取同步状态时只会返回两个值0和-1。**\n\n\n#### countDown()的实现\n每次调用countDown()时，计数器的数量就会减1。\n\n```\npublic void countDown() {\n        sync.releaseShared(1);\n    }\n```\n调用的是AQS的releaseShared()方法，释放同步状态：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n进入releaseShared()方法，调用Sync重写的tryReleaseShared()方法：\n```\nprotected boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int c = getState();\n                if (c == 0)\n                    return false;\n                int nextc = c-1;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n可以看到，**该方法自旋CAS操作释放同步状态（可能多个线程同时调用countDown()方法，所以用CAS保证原子性），计数器每次-1，但是直到同步状态为0（计数器为0）时，才返回true**。然后进入doReleaseShared()方法，唤醒阻塞的线程，使其从await()方法退出。\n\n#### 总结\n\n**CountDownLatch的内部实现是共享锁。**\n\n\n**创建CountDownLatch时，需要传入计数器的初始值，可以理解为共享锁的总次数。**  \n**当一个线程调用await()方法，会检查计数器的值，不为0则阻塞直到为0。  \n当其他线程调用countDown()方法时（可以一个线程调用多次），会释放共享状态，计数器-1。**  \n**当计数器减为0时，阻塞的线程才会运行。**\n\n\n### 三、应用场景\nCountDownLatch的应用场景：**主线程等到N个子线程执行完毕之后，再继续往下执行。** 如跑步比赛统计排名、启动程序等。\n\n```\npublic class CountDownLatchDemo {\n\t\n\tprivate CountDownLatch cd = new CountDownLatch(5);\n\t/*\n\t * 飞船类\n\t */\n\t class Plane extends Thread{\n\t\t @Override\n\t\tpublic void run() {\n\t\t\tSystem.out.println(\"飞船准备就绪，倒计时5s：\");\n\t\t\tSystem.out.println(cd.getCount());//计数器的值\n\t\t\ttry {\n\t\t\t\tcd.await();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"飞船起飞啦！！！！\");\n\t\t}\n\t }\n\t /*\n\t * 倒计时类\n\t */\n\t class Time extends Thread{\n\t\t @Override\n\t\tpublic void run() {\n\t\t\t for(int i=5;i>0;i--){\n\t\t\t\t System.out.println(\"起飞倒计时：\"+i+\"s\");\n\t\t\t\t cd.countDown();\n\t\t\t }\n\t\t}\n\t }\n\t\n\tpublic static void main(String[] args) {\n\t\tCountDownLatchDemo cdemo = new CountDownLatchDemo();\n\t\tPlane p = cdemo.new Plane();\n\t\tp.start();\n\t\tTime t = cdemo.new Time();\n\t\tt.start();\n\t}\n}\n```\n输出结果：\n```\n飞船准备就绪，倒计时5s：\n5\n起飞倒计时：5s\n起飞倒计时：4s\n起飞倒计时：3s\n起飞倒计时：2s\n起飞倒计时：1s\n飞船起飞啦！！！！\n```\n**当调用CountDownLatch的countDown方法时，计数器N就会-1，无论是在多个线程调用，还是一个线程调用多次（上面的例子就是在一个线程中多次调用）。**\n","slug":"Java并发工具类之CountDownLatch","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt259001650tcqh9mqy3n","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h3><p>CountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。</p>\n<p>回忆之前，我们知道Join方法，用于让当前线程等待join的线程执行结束。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(isAlive())&#123;</div><div class=\"line\">    wait(0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其原理就是不停地检查join线程是否存活，如果存活则一直等待。<br>CountDownLatch也可以实现join的功能，且功能更多。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/CountDownLatch.png\" alt=\"image\"></p>\n<p>CountDownLatch是通过一个计数器来实现的，当new 一个CountDownLatch对象的时候需要传入该计数器值。<br>CountDownLatch有两个最主要的方法await()和countDown()。</p>\n<p>当一个线程调用await()时会阻塞；每当一个其他线程完成自己的任务调用countDown()后，计数器的值就会减1。当计数器的值为0时，就表示所有的线程均已经完成了任务，然后阻塞的线程就可以继续执行了。</p>\n<h3 id=\"二、实现分析\"><a href=\"#二、实现分析\" class=\"headerlink\" title=\"二、实现分析\"></a>二、实现分析</h3><p><strong>部分源码</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CountDownLatch &#123;</div><div class=\"line\">    private final Sync sync;</div><div class=\"line\">    //内部类Sync（继承AQS）</div><div class=\"line\">    private static final class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">        Sync(int count) &#123;</div><div class=\"line\">            setState(count);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //重写</div><div class=\"line\">        protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            return (getState() == 0) ? 1 : -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                if (c == 0)</div><div class=\"line\">                    return false;</div><div class=\"line\">                int nextc = c-1;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //构造方法</div><div class=\"line\">     public CountDownLatch(int count) &#123;</div><div class=\"line\">        if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">        this.sync = new Sync(count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，CountDownLatch的实现同样依赖AQS，可见AQS作用之大。<br>观察Sync重写的方法（tryAcquireShared、tryReleaseShared），我们可以断定：<br><strong>CountDownLatch使用的是共享锁。</strong></p>\n<h4 id=\"await-的实现\"><a href=\"#await-的实现\" class=\"headerlink\" title=\"await()的实现\"></a>await()的实现</h4><p>调用await()方法会阻塞当前线程，直到计数器为0或被中断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">        sync.acquireSharedInterruptibly(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，其实调用了AQS的acquireSharedInterruptibly()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">            throws InterruptedException &#123;</div><div class=\"line\">        if (Thread.interrupted())</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireSharedInterruptibly(arg);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法中，如果线程被中断则抛出异常；否则尝试获取锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            return (getState() == 0) ? 1 : -1;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>尝试获取锁时调用了Sync重写的tryAcquireShared()方法：<br>很简单只有一行代码，但却是CountDownLatch的原理：<strong>如果同步状态为0（计数器值为0）那么返回1，表示获取锁成功；否则返回-1，获取锁失败</strong>，并进入doAcquireSharedInterruptibly()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireSharedInterruptibly(int arg)</div><div class=\"line\">        throws InterruptedException &#123;</div><div class=\"line\">        final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                final Node p = node.predecessor();</div><div class=\"line\">                if (p == head) &#123;</div><div class=\"line\">                    int r = tryAcquireShared(arg);</div><div class=\"line\">                    //注意r只会等于 0 or -1；</div><div class=\"line\">                    if (r &gt;= 0) &#123;</div><div class=\"line\">                        setHeadAndPropagate(node, r);</div><div class=\"line\">                        p.next = null; // help GC</div><div class=\"line\">                        failed = false;</div><div class=\"line\">                        return;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    throw new InterruptedException();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>该方法在前面共享锁的文章中有提到，它是一个自旋尝试获取锁的方法，这里不再赘述。<strong>注意18行的代码：int r = tryAcquireShared(arg)，在获取同步状态时只会返回两个值0和-1。</strong></p>\n<h4 id=\"countDown-的实现\"><a href=\"#countDown-的实现\" class=\"headerlink\" title=\"countDown()的实现\"></a>countDown()的实现</h4><p>每次调用countDown()时，计数器的数量就会减1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用的是AQS的releaseShared()方法，释放同步状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>进入releaseShared()方法，调用Sync重写的tryReleaseShared()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                if (c == 0)</div><div class=\"line\">                    return false;</div><div class=\"line\">                int nextc = c-1;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<strong>该方法自旋CAS操作释放同步状态（可能多个线程同时调用countDown()方法，所以用CAS保证原子性），计数器每次-1，但是直到同步状态为0（计数器为0）时，才返回true</strong>。然后进入doReleaseShared()方法，唤醒阻塞的线程，使其从await()方法退出。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><strong>CountDownLatch的内部实现是共享锁。</strong></p>\n<p><strong>创建CountDownLatch时，需要传入计数器的初始值，可以理解为共享锁的总次数。</strong><br><strong>当一个线程调用await()方法，会检查计数器的值，不为0则阻塞直到为0。<br>当其他线程调用countDown()方法时（可以一个线程调用多次），会释放共享状态，计数器-1。</strong><br><strong>当计数器减为0时，阻塞的线程才会运行。</strong></p>\n<h3 id=\"三、应用场景\"><a href=\"#三、应用场景\" class=\"headerlink\" title=\"三、应用场景\"></a>三、应用场景</h3><p>CountDownLatch的应用场景：<strong>主线程等到N个子线程执行完毕之后，再继续往下执行。</strong> 如跑步比赛统计排名、启动程序等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CountDownLatchDemo &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate CountDownLatch cd = new CountDownLatch(5);</div><div class=\"line\">\t/*</div><div class=\"line\">\t * 飞船类</div><div class=\"line\">\t */</div><div class=\"line\">\t class Plane extends Thread&#123;</div><div class=\"line\">\t\t @Override</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;飞船准备就绪，倒计时5s：&quot;);</div><div class=\"line\">\t\t\tSystem.out.println(cd.getCount());//计数器的值</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tcd.await();</div><div class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;飞船起飞啦！！！！&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t /*</div><div class=\"line\">\t * 倒计时类</div><div class=\"line\">\t */</div><div class=\"line\">\t class Time extends Thread&#123;</div><div class=\"line\">\t\t @Override</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t for(int i=5;i&gt;0;i--)&#123;</div><div class=\"line\">\t\t\t\t System.out.println(&quot;起飞倒计时：&quot;+i+&quot;s&quot;);</div><div class=\"line\">\t\t\t\t cd.countDown();</div><div class=\"line\">\t\t\t &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tCountDownLatchDemo cdemo = new CountDownLatchDemo();</div><div class=\"line\">\t\tPlane p = cdemo.new Plane();</div><div class=\"line\">\t\tp.start();</div><div class=\"line\">\t\tTime t = cdemo.new Time();</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">飞船准备就绪，倒计时5s：</div><div class=\"line\">5</div><div class=\"line\">起飞倒计时：5s</div><div class=\"line\">起飞倒计时：4s</div><div class=\"line\">起飞倒计时：3s</div><div class=\"line\">起飞倒计时：2s</div><div class=\"line\">起飞倒计时：1s</div><div class=\"line\">飞船起飞啦！！！！</div></pre></td></tr></table></figure></p>\n<p><strong>当调用CountDownLatch的countDown方法时，计数器N就会-1，无论是在多个线程调用，还是一个线程调用多次（上面的例子就是在一个线程中多次调用）。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h3><p>CountDownLatch也叫闭锁，是并发包的工具类之一，允许一个或多个线程等待其他线程完成操作后再执行。</p>\n<p>回忆之前，我们知道Join方法，用于让当前线程等待join的线程执行结束。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">while(isAlive())&#123;</div><div class=\"line\">    wait(0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其原理就是不停地检查join线程是否存活，如果存活则一直等待。<br>CountDownLatch也可以实现join的功能，且功能更多。  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/CountDownLatch.png\" alt=\"image\"></p>\n<p>CountDownLatch是通过一个计数器来实现的，当new 一个CountDownLatch对象的时候需要传入该计数器值。<br>CountDownLatch有两个最主要的方法await()和countDown()。</p>\n<p>当一个线程调用await()时会阻塞；每当一个其他线程完成自己的任务调用countDown()后，计数器的值就会减1。当计数器的值为0时，就表示所有的线程均已经完成了任务，然后阻塞的线程就可以继续执行了。</p>\n<h3 id=\"二、实现分析\"><a href=\"#二、实现分析\" class=\"headerlink\" title=\"二、实现分析\"></a>二、实现分析</h3><p><strong>部分源码</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CountDownLatch &#123;</div><div class=\"line\">    private final Sync sync;</div><div class=\"line\">    //内部类Sync（继承AQS）</div><div class=\"line\">    private static final class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">        Sync(int count) &#123;</div><div class=\"line\">            setState(count);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //重写</div><div class=\"line\">        protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            return (getState() == 0) ? 1 : -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                if (c == 0)</div><div class=\"line\">                    return false;</div><div class=\"line\">                int nextc = c-1;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //构造方法</div><div class=\"line\">     public CountDownLatch(int count) &#123;</div><div class=\"line\">        if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">        this.sync = new Sync(count);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，CountDownLatch的实现同样依赖AQS，可见AQS作用之大。<br>观察Sync重写的方法（tryAcquireShared、tryReleaseShared），我们可以断定：<br><strong>CountDownLatch使用的是共享锁。</strong></p>\n<h4 id=\"await-的实现\"><a href=\"#await-的实现\" class=\"headerlink\" title=\"await()的实现\"></a>await()的实现</h4><p>调用await()方法会阻塞当前线程，直到计数器为0或被中断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">        sync.acquireSharedInterruptibly(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，其实调用了AQS的acquireSharedInterruptibly()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">            throws InterruptedException &#123;</div><div class=\"line\">        if (Thread.interrupted())</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireSharedInterruptibly(arg);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法中，如果线程被中断则抛出异常；否则尝试获取锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            return (getState() == 0) ? 1 : -1;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>尝试获取锁时调用了Sync重写的tryAcquireShared()方法：<br>很简单只有一行代码，但却是CountDownLatch的原理：<strong>如果同步状态为0（计数器值为0）那么返回1，表示获取锁成功；否则返回-1，获取锁失败</strong>，并进入doAcquireSharedInterruptibly()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireSharedInterruptibly(int arg)</div><div class=\"line\">        throws InterruptedException &#123;</div><div class=\"line\">        final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                final Node p = node.predecessor();</div><div class=\"line\">                if (p == head) &#123;</div><div class=\"line\">                    int r = tryAcquireShared(arg);</div><div class=\"line\">                    //注意r只会等于 0 or -1；</div><div class=\"line\">                    if (r &gt;= 0) &#123;</div><div class=\"line\">                        setHeadAndPropagate(node, r);</div><div class=\"line\">                        p.next = null; // help GC</div><div class=\"line\">                        failed = false;</div><div class=\"line\">                        return;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    throw new InterruptedException();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>该方法在前面共享锁的文章中有提到，它是一个自旋尝试获取锁的方法，这里不再赘述。<strong>注意18行的代码：int r = tryAcquireShared(arg)，在获取同步状态时只会返回两个值0和-1。</strong></p>\n<h4 id=\"countDown-的实现\"><a href=\"#countDown-的实现\" class=\"headerlink\" title=\"countDown()的实现\"></a>countDown()的实现</h4><p>每次调用countDown()时，计数器的数量就会减1。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>调用的是AQS的releaseShared()方法，释放同步状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>进入releaseShared()方法，调用Sync重写的tryReleaseShared()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                if (c == 0)</div><div class=\"line\">                    return false;</div><div class=\"line\">                int nextc = c-1;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，<strong>该方法自旋CAS操作释放同步状态（可能多个线程同时调用countDown()方法，所以用CAS保证原子性），计数器每次-1，但是直到同步状态为0（计数器为0）时，才返回true</strong>。然后进入doReleaseShared()方法，唤醒阻塞的线程，使其从await()方法退出。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p><strong>CountDownLatch的内部实现是共享锁。</strong></p>\n<p><strong>创建CountDownLatch时，需要传入计数器的初始值，可以理解为共享锁的总次数。</strong><br><strong>当一个线程调用await()方法，会检查计数器的值，不为0则阻塞直到为0。<br>当其他线程调用countDown()方法时（可以一个线程调用多次），会释放共享状态，计数器-1。</strong><br><strong>当计数器减为0时，阻塞的线程才会运行。</strong></p>\n<h3 id=\"三、应用场景\"><a href=\"#三、应用场景\" class=\"headerlink\" title=\"三、应用场景\"></a>三、应用场景</h3><p>CountDownLatch的应用场景：<strong>主线程等到N个子线程执行完毕之后，再继续往下执行。</strong> 如跑步比赛统计排名、启动程序等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CountDownLatchDemo &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tprivate CountDownLatch cd = new CountDownLatch(5);</div><div class=\"line\">\t/*</div><div class=\"line\">\t * 飞船类</div><div class=\"line\">\t */</div><div class=\"line\">\t class Plane extends Thread&#123;</div><div class=\"line\">\t\t @Override</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;飞船准备就绪，倒计时5s：&quot;);</div><div class=\"line\">\t\t\tSystem.out.println(cd.getCount());//计数器的值</div><div class=\"line\">\t\t\ttry &#123;</div><div class=\"line\">\t\t\t\tcd.await();</div><div class=\"line\">\t\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;飞船起飞啦！！！！&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t /*</div><div class=\"line\">\t * 倒计时类</div><div class=\"line\">\t */</div><div class=\"line\">\t class Time extends Thread&#123;</div><div class=\"line\">\t\t @Override</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t for(int i=5;i&gt;0;i--)&#123;</div><div class=\"line\">\t\t\t\t System.out.println(&quot;起飞倒计时：&quot;+i+&quot;s&quot;);</div><div class=\"line\">\t\t\t\t cd.countDown();</div><div class=\"line\">\t\t\t &#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tCountDownLatchDemo cdemo = new CountDownLatchDemo();</div><div class=\"line\">\t\tPlane p = cdemo.new Plane();</div><div class=\"line\">\t\tp.start();</div><div class=\"line\">\t\tTime t = cdemo.new Time();</div><div class=\"line\">\t\tt.start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">飞船准备就绪，倒计时5s：</div><div class=\"line\">5</div><div class=\"line\">起飞倒计时：5s</div><div class=\"line\">起飞倒计时：4s</div><div class=\"line\">起飞倒计时：3s</div><div class=\"line\">起飞倒计时：2s</div><div class=\"line\">起飞倒计时：1s</div><div class=\"line\">飞船起飞啦！！！！</div></pre></td></tr></table></figure></p>\n<p><strong>当调用CountDownLatch的countDown方法时，计数器N就会-1，无论是在多个线程调用，还是一个线程调用多次（上面的例子就是在一个线程中多次调用）。</strong></p>\n"},{"title":"Java线程池的实现分析","date":"2017-11-18T12:42:18.000Z","_content":"### 一、线程池的介绍\n\n线程池是一种并发框架。\n\n优势：\n1. **降低资源消耗。**（重复利用线程，减少开销）\n2. **提高响应速度。**（任务到达可直接执行，不需要等待创建线程）\n3. **提高线程的可管理性**。（统一分配、监控、调优）\n\n**ThreadPoolExecutor是线程池的核心实现类**。可以通过ThreadPoolExecutor来创建一个线程池。\n\n\n### 二、线程池的实现分析\n\n线程池的实现是ThreadPoolExecutor类，因此重点描述ThreadPoolExecutor类的实现。  \n\n#### ThreadPoolExecutor的结构\n\nThreadPoolExecutor的构造方法\n```\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        ...(省略部分)\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n构造函数中省略了部分判断的代码。  \n主要有7个参数：  \n\n**corePoolSize**：核心线程池的大小  \n\n**maximumPoolSize**：线程池的大小  \n\n**keepAliveTime**：存活时间（超过核心数目的线程空闲后的存活时间）  \n\n**TimeUnit**：时间单位  \n\n**BlockingQueue<Runnable>**：任务队列（保存等待任务的阻塞队列）  \n\n**ThreadFactory**：创建线程的工厂类   \n\n**RejectedExecutionHandler** ：饱和策略（拒绝策略）\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png)\n\n\n#### 工作过程\n\n\n当提交一个新任务时，线程池的工作过程：\n1. **判断核心线程池（corePool）中的线程是否都在执行任务。如果不是，创建一个新的线程执行任务。核心线程池已满，进入2**；  \n \n2. **判断任务队列是否已满。未满，则将新的任务存入；满了，进入3；**\n3. **判断线程池（maximumPoolSize）里的线程是否都在工作。如果没有，创建一个新的线程执行任务；否则，交给饱和策略4**；\n4. **根据不同的饱和策略处理这个任务**。\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\n饱和策略有4种：\n- **AbortPolicy（默认）**：直接抛出异常\n- **CallerRunsPolicy**：只用调用者所在线程来处理\n- **DiscardOldestPolicy**：丢弃任务队列中最后一个任务，执行当前任务\n- **DiscardPolicy**：不处理丢弃掉\n\n       \n     \n线程池回收线程时，对所谓的“核心线程”和“非核心线程”是一视同仁的，直到线程池中线程的数量等于corePoolSize参数时，回收过程才会停止。  \n如果设置的corePoolSize参数和maximumPoolSize参数一致时，线程池在任何情况下都不会回收空闲线程。keepAliveTime和timeUnit也就失去了意义。  \n可以调用以下方法回收核心线程。\n```\nthreadPoolExecutor.allowCoreThreadTimeOut(true);\n```\n\n\n\n\n\n#### 线程池处理任务\n线程池处理任务的方法主要有两种，execute()和submit()。\n\n**execute()**  \n\n**execute()方法用于提交不需要返回值的任务**，Runnable实例。所以无法判断任务是否被线程池执行成功。\n\n**submit()**  \n**submit()方法用于提交需要返回值的任务**。线程池会返回一个future类型的对象，通过这个对象可以判断任务是否执行成功。\n\nfuture的get()方法会阻塞当前线程直到任务完成，返回结果。\n\nsubmit()最终调用的也是execute(Runnable runable)，submit()只是将Callable或Runnable封装成一个FutureTask对象，因为FutureTask是个Runnable，所以调用的是execute()方法。\n\n#### 线程池的关闭\n线程池关闭的方法主要有两种，shutdown()和shutdownNow()。\n\n**原理**：遍历线程池中的工作线程，逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法停止。\n\n**区别**：  \n**shutdown()只是将线程池的状态设置成SHUTDOWN状态，然后中断没有在执行任务的线程。**\n\n**shutdownNow()首先将线程池的状态设置成STOP，然后尝试停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表。**\n\n\n如果任务不一定要执行完，可以调用shutdownNow()方法。","source":"_posts/Java线程池的实现分析.md","raw":"---\ntitle: Java线程池的实现分析\ndate: 2017-11-18 20:42:18\ntags: [并发,Java线程池]\ncategories: 技术\n---\n### 一、线程池的介绍\n\n线程池是一种并发框架。\n\n优势：\n1. **降低资源消耗。**（重复利用线程，减少开销）\n2. **提高响应速度。**（任务到达可直接执行，不需要等待创建线程）\n3. **提高线程的可管理性**。（统一分配、监控、调优）\n\n**ThreadPoolExecutor是线程池的核心实现类**。可以通过ThreadPoolExecutor来创建一个线程池。\n\n\n### 二、线程池的实现分析\n\n线程池的实现是ThreadPoolExecutor类，因此重点描述ThreadPoolExecutor类的实现。  \n\n#### ThreadPoolExecutor的结构\n\nThreadPoolExecutor的构造方法\n```\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        ...(省略部分)\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n构造函数中省略了部分判断的代码。  \n主要有7个参数：  \n\n**corePoolSize**：核心线程池的大小  \n\n**maximumPoolSize**：线程池的大小  \n\n**keepAliveTime**：存活时间（超过核心数目的线程空闲后的存活时间）  \n\n**TimeUnit**：时间单位  \n\n**BlockingQueue<Runnable>**：任务队列（保存等待任务的阻塞队列）  \n\n**ThreadFactory**：创建线程的工厂类   \n\n**RejectedExecutionHandler** ：饱和策略（拒绝策略）\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png)\n\n\n#### 工作过程\n\n\n当提交一个新任务时，线程池的工作过程：\n1. **判断核心线程池（corePool）中的线程是否都在执行任务。如果不是，创建一个新的线程执行任务。核心线程池已满，进入2**；  \n \n2. **判断任务队列是否已满。未满，则将新的任务存入；满了，进入3；**\n3. **判断线程池（maximumPoolSize）里的线程是否都在工作。如果没有，创建一个新的线程执行任务；否则，交给饱和策略4**；\n4. **根据不同的饱和策略处理这个任务**。\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png)\n\n饱和策略有4种：\n- **AbortPolicy（默认）**：直接抛出异常\n- **CallerRunsPolicy**：只用调用者所在线程来处理\n- **DiscardOldestPolicy**：丢弃任务队列中最后一个任务，执行当前任务\n- **DiscardPolicy**：不处理丢弃掉\n\n       \n     \n线程池回收线程时，对所谓的“核心线程”和“非核心线程”是一视同仁的，直到线程池中线程的数量等于corePoolSize参数时，回收过程才会停止。  \n如果设置的corePoolSize参数和maximumPoolSize参数一致时，线程池在任何情况下都不会回收空闲线程。keepAliveTime和timeUnit也就失去了意义。  \n可以调用以下方法回收核心线程。\n```\nthreadPoolExecutor.allowCoreThreadTimeOut(true);\n```\n\n\n\n\n\n#### 线程池处理任务\n线程池处理任务的方法主要有两种，execute()和submit()。\n\n**execute()**  \n\n**execute()方法用于提交不需要返回值的任务**，Runnable实例。所以无法判断任务是否被线程池执行成功。\n\n**submit()**  \n**submit()方法用于提交需要返回值的任务**。线程池会返回一个future类型的对象，通过这个对象可以判断任务是否执行成功。\n\nfuture的get()方法会阻塞当前线程直到任务完成，返回结果。\n\nsubmit()最终调用的也是execute(Runnable runable)，submit()只是将Callable或Runnable封装成一个FutureTask对象，因为FutureTask是个Runnable，所以调用的是execute()方法。\n\n#### 线程池的关闭\n线程池关闭的方法主要有两种，shutdown()和shutdownNow()。\n\n**原理**：遍历线程池中的工作线程，逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法停止。\n\n**区别**：  \n**shutdown()只是将线程池的状态设置成SHUTDOWN状态，然后中断没有在执行任务的线程。**\n\n**shutdownNow()首先将线程池的状态设置成STOP，然后尝试停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表。**\n\n\n如果任务不一定要执行完，可以调用shutdownNow()方法。","slug":"Java线程池的实现分析","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt259001850tc6nqkmwqh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、线程池的介绍\"><a href=\"#一、线程池的介绍\" class=\"headerlink\" title=\"一、线程池的介绍\"></a>一、线程池的介绍</h3><p>线程池是一种并发框架。</p>\n<p>优势：</p>\n<ol>\n<li><strong>降低资源消耗。</strong>（重复利用线程，减少开销）</li>\n<li><strong>提高响应速度。</strong>（任务到达可直接执行，不需要等待创建线程）</li>\n<li><strong>提高线程的可管理性</strong>。（统一分配、监控、调优）</li>\n</ol>\n<p><strong>ThreadPoolExecutor是线程池的核心实现类</strong>。可以通过ThreadPoolExecutor来创建一个线程池。</p>\n<h3 id=\"二、线程池的实现分析\"><a href=\"#二、线程池的实现分析\" class=\"headerlink\" title=\"二、线程池的实现分析\"></a>二、线程池的实现分析</h3><p>线程池的实现是ThreadPoolExecutor类，因此重点描述ThreadPoolExecutor类的实现。  </p>\n<h4 id=\"ThreadPoolExecutor的结构\"><a href=\"#ThreadPoolExecutor的结构\" class=\"headerlink\" title=\"ThreadPoolExecutor的结构\"></a>ThreadPoolExecutor的结构</h4><p>ThreadPoolExecutor的构造方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ThreadPoolExecutor(int corePoolSize,</div><div class=\"line\">                              int maximumPoolSize,</div><div class=\"line\">                              long keepAliveTime,</div><div class=\"line\">                              TimeUnit unit,</div><div class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                              ThreadFactory threadFactory,</div><div class=\"line\">                              RejectedExecutionHandler handler) &#123;</div><div class=\"line\">        ...(省略部分)</div><div class=\"line\">        this.corePoolSize = corePoolSize;</div><div class=\"line\">        this.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">        this.workQueue = workQueue;</div><div class=\"line\">        this.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">        this.threadFactory = threadFactory;</div><div class=\"line\">        this.handler = handler;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>构造函数中省略了部分判断的代码。<br>主要有7个参数：  </p>\n<p><strong>corePoolSize</strong>：核心线程池的大小  </p>\n<p><strong>maximumPoolSize</strong>：线程池的大小  </p>\n<p><strong>keepAliveTime</strong>：存活时间（超过核心数目的线程空闲后的存活时间）  </p>\n<p><strong>TimeUnit</strong>：时间单位  </p>\n<p><strong>BlockingQueue<runnable></runnable></strong>：任务队列（保存等待任务的阻塞队列）  </p>\n<p><strong>ThreadFactory</strong>：创建线程的工厂类   </p>\n<p><strong>RejectedExecutionHandler</strong> ：饱和策略（拒绝策略）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png\" alt=\"image\"></p>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p>当提交一个新任务时，线程池的工作过程：</p>\n<ol>\n<li><p><strong>判断核心线程池（corePool）中的线程是否都在执行任务。如果不是，创建一个新的线程执行任务。核心线程池已满，进入2</strong>；  </p>\n</li>\n<li><p><strong>判断任务队列是否已满。未满，则将新的任务存入；满了，进入3；</strong></p>\n</li>\n<li><strong>判断线程池（maximumPoolSize）里的线程是否都在工作。如果没有，创建一个新的线程执行任务；否则，交给饱和策略4</strong>；</li>\n<li><strong>根据不同的饱和策略处理这个任务</strong>。</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"image\"></p>\n<p>饱和策略有4种：</p>\n<ul>\n<li><strong>AbortPolicy（默认）</strong>：直接抛出异常</li>\n<li><strong>CallerRunsPolicy</strong>：只用调用者所在线程来处理</li>\n<li><strong>DiscardOldestPolicy</strong>：丢弃任务队列中最后一个任务，执行当前任务</li>\n<li><strong>DiscardPolicy</strong>：不处理丢弃掉</li>\n</ul>\n<p>线程池回收线程时，对所谓的“核心线程”和“非核心线程”是一视同仁的，直到线程池中线程的数量等于corePoolSize参数时，回收过程才会停止。<br>如果设置的corePoolSize参数和maximumPoolSize参数一致时，线程池在任何情况下都不会回收空闲线程。keepAliveTime和timeUnit也就失去了意义。<br>可以调用以下方法回收核心线程。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">threadPoolExecutor.allowCoreThreadTimeOut(true);</div></pre></td></tr></table></figure></p>\n<h4 id=\"线程池处理任务\"><a href=\"#线程池处理任务\" class=\"headerlink\" title=\"线程池处理任务\"></a>线程池处理任务</h4><p>线程池处理任务的方法主要有两种，execute()和submit()。</p>\n<p><strong>execute()</strong>  </p>\n<p><strong>execute()方法用于提交不需要返回值的任务</strong>，Runnable实例。所以无法判断任务是否被线程池执行成功。</p>\n<p><strong>submit()</strong><br><strong>submit()方法用于提交需要返回值的任务</strong>。线程池会返回一个future类型的对象，通过这个对象可以判断任务是否执行成功。</p>\n<p>future的get()方法会阻塞当前线程直到任务完成，返回结果。</p>\n<p>submit()最终调用的也是execute(Runnable runable)，submit()只是将Callable或Runnable封装成一个FutureTask对象，因为FutureTask是个Runnable，所以调用的是execute()方法。</p>\n<h4 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h4><p>线程池关闭的方法主要有两种，shutdown()和shutdownNow()。</p>\n<p><strong>原理</strong>：遍历线程池中的工作线程，逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法停止。</p>\n<p><strong>区别</strong>：<br><strong>shutdown()只是将线程池的状态设置成SHUTDOWN状态，然后中断没有在执行任务的线程。</strong></p>\n<p><strong>shutdownNow()首先将线程池的状态设置成STOP，然后尝试停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表。</strong></p>\n<p>如果任务不一定要执行完，可以调用shutdownNow()方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、线程池的介绍\"><a href=\"#一、线程池的介绍\" class=\"headerlink\" title=\"一、线程池的介绍\"></a>一、线程池的介绍</h3><p>线程池是一种并发框架。</p>\n<p>优势：</p>\n<ol>\n<li><strong>降低资源消耗。</strong>（重复利用线程，减少开销）</li>\n<li><strong>提高响应速度。</strong>（任务到达可直接执行，不需要等待创建线程）</li>\n<li><strong>提高线程的可管理性</strong>。（统一分配、监控、调优）</li>\n</ol>\n<p><strong>ThreadPoolExecutor是线程池的核心实现类</strong>。可以通过ThreadPoolExecutor来创建一个线程池。</p>\n<h3 id=\"二、线程池的实现分析\"><a href=\"#二、线程池的实现分析\" class=\"headerlink\" title=\"二、线程池的实现分析\"></a>二、线程池的实现分析</h3><p>线程池的实现是ThreadPoolExecutor类，因此重点描述ThreadPoolExecutor类的实现。  </p>\n<h4 id=\"ThreadPoolExecutor的结构\"><a href=\"#ThreadPoolExecutor的结构\" class=\"headerlink\" title=\"ThreadPoolExecutor的结构\"></a>ThreadPoolExecutor的结构</h4><p>ThreadPoolExecutor的构造方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ThreadPoolExecutor(int corePoolSize,</div><div class=\"line\">                              int maximumPoolSize,</div><div class=\"line\">                              long keepAliveTime,</div><div class=\"line\">                              TimeUnit unit,</div><div class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                              ThreadFactory threadFactory,</div><div class=\"line\">                              RejectedExecutionHandler handler) &#123;</div><div class=\"line\">        ...(省略部分)</div><div class=\"line\">        this.corePoolSize = corePoolSize;</div><div class=\"line\">        this.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">        this.workQueue = workQueue;</div><div class=\"line\">        this.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">        this.threadFactory = threadFactory;</div><div class=\"line\">        this.handler = handler;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>构造函数中省略了部分判断的代码。<br>主要有7个参数：  </p>\n<p><strong>corePoolSize</strong>：核心线程池的大小  </p>\n<p><strong>maximumPoolSize</strong>：线程池的大小  </p>\n<p><strong>keepAliveTime</strong>：存活时间（超过核心数目的线程空闲后的存活时间）  </p>\n<p><strong>TimeUnit</strong>：时间单位  </p>\n<p><strong>BlockingQueue<runnable></runnable></strong>：任务队列（保存等待任务的阻塞队列）  </p>\n<p><strong>ThreadFactory</strong>：创建线程的工厂类   </p>\n<p><strong>RejectedExecutionHandler</strong> ：饱和策略（拒绝策略）</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png\" alt=\"image\"></p>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p>当提交一个新任务时，线程池的工作过程：</p>\n<ol>\n<li><p><strong>判断核心线程池（corePool）中的线程是否都在执行任务。如果不是，创建一个新的线程执行任务。核心线程池已满，进入2</strong>；  </p>\n</li>\n<li><p><strong>判断任务队列是否已满。未满，则将新的任务存入；满了，进入3；</strong></p>\n</li>\n<li><strong>判断线程池（maximumPoolSize）里的线程是否都在工作。如果没有，创建一个新的线程执行任务；否则，交给饱和策略4</strong>；</li>\n<li><strong>根据不同的饱和策略处理这个任务</strong>。</li>\n</ol>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png\" alt=\"image\"></p>\n<p>饱和策略有4种：</p>\n<ul>\n<li><strong>AbortPolicy（默认）</strong>：直接抛出异常</li>\n<li><strong>CallerRunsPolicy</strong>：只用调用者所在线程来处理</li>\n<li><strong>DiscardOldestPolicy</strong>：丢弃任务队列中最后一个任务，执行当前任务</li>\n<li><strong>DiscardPolicy</strong>：不处理丢弃掉</li>\n</ul>\n<p>线程池回收线程时，对所谓的“核心线程”和“非核心线程”是一视同仁的，直到线程池中线程的数量等于corePoolSize参数时，回收过程才会停止。<br>如果设置的corePoolSize参数和maximumPoolSize参数一致时，线程池在任何情况下都不会回收空闲线程。keepAliveTime和timeUnit也就失去了意义。<br>可以调用以下方法回收核心线程。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">threadPoolExecutor.allowCoreThreadTimeOut(true);</div></pre></td></tr></table></figure></p>\n<h4 id=\"线程池处理任务\"><a href=\"#线程池处理任务\" class=\"headerlink\" title=\"线程池处理任务\"></a>线程池处理任务</h4><p>线程池处理任务的方法主要有两种，execute()和submit()。</p>\n<p><strong>execute()</strong>  </p>\n<p><strong>execute()方法用于提交不需要返回值的任务</strong>，Runnable实例。所以无法判断任务是否被线程池执行成功。</p>\n<p><strong>submit()</strong><br><strong>submit()方法用于提交需要返回值的任务</strong>。线程池会返回一个future类型的对象，通过这个对象可以判断任务是否执行成功。</p>\n<p>future的get()方法会阻塞当前线程直到任务完成，返回结果。</p>\n<p>submit()最终调用的也是execute(Runnable runable)，submit()只是将Callable或Runnable封装成一个FutureTask对象，因为FutureTask是个Runnable，所以调用的是execute()方法。</p>\n<h4 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h4><p>线程池关闭的方法主要有两种，shutdown()和shutdownNow()。</p>\n<p><strong>原理</strong>：遍历线程池中的工作线程，逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法停止。</p>\n<p><strong>区别</strong>：<br><strong>shutdown()只是将线程池的状态设置成SHUTDOWN状态，然后中断没有在执行任务的线程。</strong></p>\n<p><strong>shutdownNow()首先将线程池的状态设置成STOP，然后尝试停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表。</strong></p>\n<p>如果任务不一定要执行完，可以调用shutdownNow()方法。</p>\n"},{"title":"Java并发工具类之Semaphore","date":"2017-12-12T09:42:18.000Z","_content":"### 一、Semaphore的概念\n\n**Semaphore又叫信号量，用来控制同时访问特定资源的线程数量**。它通过协调各个线程，以保证合理地使用公共资源。\n\n**Semaphore和CountDownLatch一样，也是维护了一个计数器，其本质是一个共享锁。**\n\n**Semaphore有公平性和非公平性之分。**\n\n**Semaphore的工作过程：**\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/timg.jpg)  \n\n\n1. 当一个线程想要访问某个共享资源时，它必须要先获取Semaphore；\n2. 当Semaphore > 0 时，获取该资源并使Semaphore – 1；\n3. 当Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须要等待其他线程释放资源；\n3. 当有线程释放资源时，Semaphore+1，其他线程可以争抢资源；\n\n\n### 二、Semaphore的实现分析\n\n前面分析可知，**Semaphore的实现是共享锁。**\n\n#### 构造函数\nSemaphore有两个构造函数。\n```\npublic Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n第一个构造函数中传入的是资源许可的数量，默认是非公平锁。\n第二个构造函数传入资源许可的数量和一个boolean变量，该变量可实现公平锁。\n\n\n\nSemaphore在使用时有两个主要方法，acquire()方法表示获取一个资源许可，而 release()方法表示释放一个资源许可。\n\n#### 资源获取：acquire()方法\n\n调用acquire()方法获取一个资源：\n```\npublic void acquire() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n```\n该方法调用AQS的acquireSharedInterruptibly()方法，以共享的模式获取同步状态：\n```\npublic final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n然后调用tryAcquireShared()方法，该方法由Sync的子类来实现：\n- 如果是非公平模式，调用NonfairSync的tryAcquireShared()方法；\n- 如果是公平模式，调用FairSync的tryAcquireShared()方法。\n\n在前面的文章 [ReentrantLock重入锁](http://blog.csdn.net/babylove_bale/article/details/78317204) 中有提到公平与非公平的实现。\n\n\n**非公平模式**\n```\nfinal int nonfairTryAcquireShared(int acquires) {\n            for (;;) {\n                int available = getState();\n                int remaining = available - acquires;\n                if (remaining < 0 ||\n                    compareAndSetState(available, remaining))\n                    return remaining;\n            }\n        }\n```\nremaining 表示剩余的资源许可，如果< 0，表示目前没有剩余的许可。当前线程继续等待。如果remaining >0 则执行CAS操作获取资源许可。\n\n\n**公平模式**\n\n```\nprotected int tryAcquireShared(int acquires) {\n            for (;;) {\n                if (hasQueuedPredecessors())\n                    return -1;\n                int available = getState();\n                int remaining = available - acquires;\n                if (remaining < 0 ||\n                    compareAndSetState(available, remaining))\n                    return remaining;\n            }\n        }\n```\n**在公平模式的方法中，增加了一个判断，判断同步队列中是否有等待的线程：**\n- 有，则插入作为尾节点，线程阻塞；\n- 没有，则参与资源竞争；\n\n简而言之，公平模式就是要按等待队列中的顺序获取资源许可。\n#### 资源释放：release()方法\n\nSemaphore调用release()方法释放资源许可，默认释放1个。\n```\npublic void release() {\n        sync.releaseShared(1);\n    }\n```\n调用AQS的releaseShared()方法：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n调用Sync中重写的tryReleaseShared()方法（**公平与非公平都是调用该方法**），\n```\nprotected final boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int current = getState();\n                int next = current + releases;\n                if (next < current) // overflow\n                    throw new Error(\"Maximum permit count exceeded\");\n                if (compareAndSetState(current, next))\n                    return true;\n            }\n        }\n```\n**next代表如果许可释放成功，可用资源许可的数量。  \n这里可能有多个线程同时释放，因此利用CAS操作将资源许可数量置为next。  \n释放成功后，进入doReleaseShared()唤醒队列中等待的线程。**\n\n**注：公平模式与非公平模式都是调用该release()方法。**\n\n\n","source":"_posts/Java并发工具类之Semaphore.md","raw":"---\ntitle: Java并发工具类之Semaphore\ndate: 2017-12-12 17:42:18\ntags: [并发,Semaphore]\ncategories: 技术\n---\n### 一、Semaphore的概念\n\n**Semaphore又叫信号量，用来控制同时访问特定资源的线程数量**。它通过协调各个线程，以保证合理地使用公共资源。\n\n**Semaphore和CountDownLatch一样，也是维护了一个计数器，其本质是一个共享锁。**\n\n**Semaphore有公平性和非公平性之分。**\n\n**Semaphore的工作过程：**\n\n\n![image](http://osuskkx7k.bkt.clouddn.com/timg.jpg)  \n\n\n1. 当一个线程想要访问某个共享资源时，它必须要先获取Semaphore；\n2. 当Semaphore > 0 时，获取该资源并使Semaphore – 1；\n3. 当Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须要等待其他线程释放资源；\n3. 当有线程释放资源时，Semaphore+1，其他线程可以争抢资源；\n\n\n### 二、Semaphore的实现分析\n\n前面分析可知，**Semaphore的实现是共享锁。**\n\n#### 构造函数\nSemaphore有两个构造函数。\n```\npublic Semaphore(int permits) {\n        sync = new NonfairSync(permits);\n    }\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n第一个构造函数中传入的是资源许可的数量，默认是非公平锁。\n第二个构造函数传入资源许可的数量和一个boolean变量，该变量可实现公平锁。\n\n\n\nSemaphore在使用时有两个主要方法，acquire()方法表示获取一个资源许可，而 release()方法表示释放一个资源许可。\n\n#### 资源获取：acquire()方法\n\n调用acquire()方法获取一个资源：\n```\npublic void acquire() throws InterruptedException {\n        sync.acquireSharedInterruptibly(1);\n    }\n```\n该方法调用AQS的acquireSharedInterruptibly()方法，以共享的模式获取同步状态：\n```\npublic final void acquireSharedInterruptibly(int arg)\n            throws InterruptedException {\n        if (Thread.interrupted())\n            throw new InterruptedException();\n        if (tryAcquireShared(arg) < 0)\n            doAcquireSharedInterruptibly(arg);\n    }\n```\n然后调用tryAcquireShared()方法，该方法由Sync的子类来实现：\n- 如果是非公平模式，调用NonfairSync的tryAcquireShared()方法；\n- 如果是公平模式，调用FairSync的tryAcquireShared()方法。\n\n在前面的文章 [ReentrantLock重入锁](http://blog.csdn.net/babylove_bale/article/details/78317204) 中有提到公平与非公平的实现。\n\n\n**非公平模式**\n```\nfinal int nonfairTryAcquireShared(int acquires) {\n            for (;;) {\n                int available = getState();\n                int remaining = available - acquires;\n                if (remaining < 0 ||\n                    compareAndSetState(available, remaining))\n                    return remaining;\n            }\n        }\n```\nremaining 表示剩余的资源许可，如果< 0，表示目前没有剩余的许可。当前线程继续等待。如果remaining >0 则执行CAS操作获取资源许可。\n\n\n**公平模式**\n\n```\nprotected int tryAcquireShared(int acquires) {\n            for (;;) {\n                if (hasQueuedPredecessors())\n                    return -1;\n                int available = getState();\n                int remaining = available - acquires;\n                if (remaining < 0 ||\n                    compareAndSetState(available, remaining))\n                    return remaining;\n            }\n        }\n```\n**在公平模式的方法中，增加了一个判断，判断同步队列中是否有等待的线程：**\n- 有，则插入作为尾节点，线程阻塞；\n- 没有，则参与资源竞争；\n\n简而言之，公平模式就是要按等待队列中的顺序获取资源许可。\n#### 资源释放：release()方法\n\nSemaphore调用release()方法释放资源许可，默认释放1个。\n```\npublic void release() {\n        sync.releaseShared(1);\n    }\n```\n调用AQS的releaseShared()方法：\n```\npublic final boolean releaseShared(int arg) {\n        if (tryReleaseShared(arg)) {\n            doReleaseShared();\n            return true;\n        }\n        return false;\n    }\n```\n调用Sync中重写的tryReleaseShared()方法（**公平与非公平都是调用该方法**），\n```\nprotected final boolean tryReleaseShared(int releases) {\n            for (;;) {\n                int current = getState();\n                int next = current + releases;\n                if (next < current) // overflow\n                    throw new Error(\"Maximum permit count exceeded\");\n                if (compareAndSetState(current, next))\n                    return true;\n            }\n        }\n```\n**next代表如果许可释放成功，可用资源许可的数量。  \n这里可能有多个线程同时释放，因此利用CAS操作将资源许可数量置为next。  \n释放成功后，进入doReleaseShared()唤醒队列中等待的线程。**\n\n**注：公平模式与非公平模式都是调用该release()方法。**\n\n\n","slug":"Java并发工具类之Semaphore","published":1,"updated":"2018-04-11T10:02:31.867Z","_id":"cjfqzt259001b50tcv5zcdjfp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、Semaphore的概念\"><a href=\"#一、Semaphore的概念\" class=\"headerlink\" title=\"一、Semaphore的概念\"></a>一、Semaphore的概念</h3><p><strong>Semaphore又叫信号量，用来控制同时访问特定资源的线程数量</strong>。它通过协调各个线程，以保证合理地使用公共资源。</p>\n<p><strong>Semaphore和CountDownLatch一样，也是维护了一个计数器，其本质是一个共享锁。</strong></p>\n<p><strong>Semaphore有公平性和非公平性之分。</strong></p>\n<p><strong>Semaphore的工作过程：</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/timg.jpg\" alt=\"image\">  </p>\n<ol>\n<li>当一个线程想要访问某个共享资源时，它必须要先获取Semaphore；</li>\n<li>当Semaphore &gt; 0 时，获取该资源并使Semaphore – 1；</li>\n<li>当Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须要等待其他线程释放资源；</li>\n<li>当有线程释放资源时，Semaphore+1，其他线程可以争抢资源；</li>\n</ol>\n<h3 id=\"二、Semaphore的实现分析\"><a href=\"#二、Semaphore的实现分析\" class=\"headerlink\" title=\"二、Semaphore的实现分析\"></a>二、Semaphore的实现分析</h3><p>前面分析可知，<strong>Semaphore的实现是共享锁。</strong></p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>Semaphore有两个构造函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Semaphore(int permits) &#123;</div><div class=\"line\">        sync = new NonfairSync(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\">public Semaphore(int permits, boolean fair) &#123;</div><div class=\"line\">    sync = fair ? new FairSync(permits) : new NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第一个构造函数中传入的是资源许可的数量，默认是非公平锁。<br>第二个构造函数传入资源许可的数量和一个boolean变量，该变量可实现公平锁。</p>\n<p>Semaphore在使用时有两个主要方法，acquire()方法表示获取一个资源许可，而 release()方法表示释放一个资源许可。</p>\n<h4 id=\"资源获取：acquire-方法\"><a href=\"#资源获取：acquire-方法\" class=\"headerlink\" title=\"资源获取：acquire()方法\"></a>资源获取：acquire()方法</h4><p>调用acquire()方法获取一个资源：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void acquire() throws InterruptedException &#123;</div><div class=\"line\">        sync.acquireSharedInterruptibly(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法调用AQS的acquireSharedInterruptibly()方法，以共享的模式获取同步状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">            throws InterruptedException &#123;</div><div class=\"line\">        if (Thread.interrupted())</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireSharedInterruptibly(arg);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>然后调用tryAcquireShared()方法，该方法由Sync的子类来实现：</p>\n<ul>\n<li>如果是非公平模式，调用NonfairSync的tryAcquireShared()方法；</li>\n<li>如果是公平模式，调用FairSync的tryAcquireShared()方法。</li>\n</ul>\n<p>在前面的文章 <a href=\"http://blog.csdn.net/babylove_bale/article/details/78317204\" target=\"_blank\" rel=\"external\">ReentrantLock重入锁</a> 中有提到公平与非公平的实现。</p>\n<p><strong>非公平模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int nonfairTryAcquireShared(int acquires) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int available = getState();</div><div class=\"line\">                int remaining = available - acquires;</div><div class=\"line\">                if (remaining &lt; 0 ||</div><div class=\"line\">                    compareAndSetState(available, remaining))</div><div class=\"line\">                    return remaining;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>remaining 表示剩余的资源许可，如果&lt; 0，表示目前没有剩余的许可。当前线程继续等待。如果remaining &gt;0 则执行CAS操作获取资源许可。</p>\n<p><strong>公平模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                if (hasQueuedPredecessors())</div><div class=\"line\">                    return -1;</div><div class=\"line\">                int available = getState();</div><div class=\"line\">                int remaining = available - acquires;</div><div class=\"line\">                if (remaining &lt; 0 ||</div><div class=\"line\">                    compareAndSetState(available, remaining))</div><div class=\"line\">                    return remaining;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p><strong>在公平模式的方法中，增加了一个判断，判断同步队列中是否有等待的线程：</strong></p>\n<ul>\n<li>有，则插入作为尾节点，线程阻塞；</li>\n<li>没有，则参与资源竞争；</li>\n</ul>\n<p>简而言之，公平模式就是要按等待队列中的顺序获取资源许可。</p>\n<h4 id=\"资源释放：release-方法\"><a href=\"#资源释放：release-方法\" class=\"headerlink\" title=\"资源释放：release()方法\"></a>资源释放：release()方法</h4><p>Semaphore调用release()方法释放资源许可，默认释放1个。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void release() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用AQS的releaseShared()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用Sync中重写的tryReleaseShared()方法（<strong>公平与非公平都是调用该方法</strong>），<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int current = getState();</div><div class=\"line\">                int next = current + releases;</div><div class=\"line\">                if (next &lt; current) // overflow</div><div class=\"line\">                    throw new Error(&quot;Maximum permit count exceeded&quot;);</div><div class=\"line\">                if (compareAndSetState(current, next))</div><div class=\"line\">                    return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>next代表如果许可释放成功，可用资源许可的数量。<br>这里可能有多个线程同时释放，因此利用CAS操作将资源许可数量置为next。<br>释放成功后，进入doReleaseShared()唤醒队列中等待的线程。</strong></p>\n<p><strong>注：公平模式与非公平模式都是调用该release()方法。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Semaphore的概念\"><a href=\"#一、Semaphore的概念\" class=\"headerlink\" title=\"一、Semaphore的概念\"></a>一、Semaphore的概念</h3><p><strong>Semaphore又叫信号量，用来控制同时访问特定资源的线程数量</strong>。它通过协调各个线程，以保证合理地使用公共资源。</p>\n<p><strong>Semaphore和CountDownLatch一样，也是维护了一个计数器，其本质是一个共享锁。</strong></p>\n<p><strong>Semaphore有公平性和非公平性之分。</strong></p>\n<p><strong>Semaphore的工作过程：</strong></p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/timg.jpg\" alt=\"image\">  </p>\n<ol>\n<li>当一个线程想要访问某个共享资源时，它必须要先获取Semaphore；</li>\n<li>当Semaphore &gt; 0 时，获取该资源并使Semaphore – 1；</li>\n<li>当Semaphore = 0，则表示全部的共享资源已经被其他线程全部占用，线程必须要等待其他线程释放资源；</li>\n<li>当有线程释放资源时，Semaphore+1，其他线程可以争抢资源；</li>\n</ol>\n<h3 id=\"二、Semaphore的实现分析\"><a href=\"#二、Semaphore的实现分析\" class=\"headerlink\" title=\"二、Semaphore的实现分析\"></a>二、Semaphore的实现分析</h3><p>前面分析可知，<strong>Semaphore的实现是共享锁。</strong></p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>Semaphore有两个构造函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Semaphore(int permits) &#123;</div><div class=\"line\">        sync = new NonfairSync(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\">public Semaphore(int permits, boolean fair) &#123;</div><div class=\"line\">    sync = fair ? new FairSync(permits) : new NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第一个构造函数中传入的是资源许可的数量，默认是非公平锁。<br>第二个构造函数传入资源许可的数量和一个boolean变量，该变量可实现公平锁。</p>\n<p>Semaphore在使用时有两个主要方法，acquire()方法表示获取一个资源许可，而 release()方法表示释放一个资源许可。</p>\n<h4 id=\"资源获取：acquire-方法\"><a href=\"#资源获取：acquire-方法\" class=\"headerlink\" title=\"资源获取：acquire()方法\"></a>资源获取：acquire()方法</h4><p>调用acquire()方法获取一个资源：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void acquire() throws InterruptedException &#123;</div><div class=\"line\">        sync.acquireSharedInterruptibly(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法调用AQS的acquireSharedInterruptibly()方法，以共享的模式获取同步状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireSharedInterruptibly(int arg)</div><div class=\"line\">            throws InterruptedException &#123;</div><div class=\"line\">        if (Thread.interrupted())</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">            doAcquireSharedInterruptibly(arg);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>然后调用tryAcquireShared()方法，该方法由Sync的子类来实现：</p>\n<ul>\n<li>如果是非公平模式，调用NonfairSync的tryAcquireShared()方法；</li>\n<li>如果是公平模式，调用FairSync的tryAcquireShared()方法。</li>\n</ul>\n<p>在前面的文章 <a href=\"http://blog.csdn.net/babylove_bale/article/details/78317204\" target=\"_blank\" rel=\"external\">ReentrantLock重入锁</a> 中有提到公平与非公平的实现。</p>\n<p><strong>非公平模式</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int nonfairTryAcquireShared(int acquires) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int available = getState();</div><div class=\"line\">                int remaining = available - acquires;</div><div class=\"line\">                if (remaining &lt; 0 ||</div><div class=\"line\">                    compareAndSetState(available, remaining))</div><div class=\"line\">                    return remaining;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>remaining 表示剩余的资源许可，如果&lt; 0，表示目前没有剩余的许可。当前线程继续等待。如果remaining &gt;0 则执行CAS操作获取资源许可。</p>\n<p><strong>公平模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                if (hasQueuedPredecessors())</div><div class=\"line\">                    return -1;</div><div class=\"line\">                int available = getState();</div><div class=\"line\">                int remaining = available - acquires;</div><div class=\"line\">                if (remaining &lt; 0 ||</div><div class=\"line\">                    compareAndSetState(available, remaining))</div><div class=\"line\">                    return remaining;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p><strong>在公平模式的方法中，增加了一个判断，判断同步队列中是否有等待的线程：</strong></p>\n<ul>\n<li>有，则插入作为尾节点，线程阻塞；</li>\n<li>没有，则参与资源竞争；</li>\n</ul>\n<p>简而言之，公平模式就是要按等待队列中的顺序获取资源许可。</p>\n<h4 id=\"资源释放：release-方法\"><a href=\"#资源释放：release-方法\" class=\"headerlink\" title=\"资源释放：release()方法\"></a>资源释放：release()方法</h4><p>Semaphore调用release()方法释放资源许可，默认释放1个。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void release() &#123;</div><div class=\"line\">        sync.releaseShared(1);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用AQS的releaseShared()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">        if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用Sync中重写的tryReleaseShared()方法（<strong>公平与非公平都是调用该方法</strong>），<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int current = getState();</div><div class=\"line\">                int next = current + releases;</div><div class=\"line\">                if (next &lt; current) // overflow</div><div class=\"line\">                    throw new Error(&quot;Maximum permit count exceeded&quot;);</div><div class=\"line\">                if (compareAndSetState(current, next))</div><div class=\"line\">                    return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>next代表如果许可释放成功，可用资源许可的数量。<br>这里可能有多个线程同时释放，因此利用CAS操作将资源许可数量置为next。<br>释放成功后，进入doReleaseShared()唤醒队列中等待的线程。</strong></p>\n<p><strong>注：公平模式与非公平模式都是调用该release()方法。</strong></p>\n"},{"title":"Lock接口的介绍及使用","date":"2017-10-17T13:40:19.000Z","_content":"### 一、Lock的介绍\n\n我们知道，在Java中锁的实现可以由synchronized关键字来完成，但在Java5之后，出现了一种新的方式来实现——Lock接口。\n\n那么为什么提出这种新的方式呢？  \n在多线程的情况下，当一段代码被synchronized修饰之后，同一时刻只能被一个线程访问，其他线程都必须等到该线程释放锁之后才能有机会获取锁访问这段代码，占用锁的线程只有在两种情况下才能释放锁：  \n\n1. 线程执行完了这段代码，释放锁；\n2. 线程执行发生异常，释放锁；  \n\n考虑一下，如果该线程由于IO操作或者其他原因（调用Sleep方法）被阻塞了，那么其他线程就会一直无期限地等待下去，后果可想而知。  \n那么能否用一种方式来防止等待的线程无限等待呢？（等待一段时间或者响应中断）通过Lock就可以实现。\n\n再如：当用多线程对文件进行读写时，读与写是互斥的，写与写是互斥的，但读与读却不是互斥的。如果用synchronized来实现同步，就会有这样的问题：多个线程都只需要读操作，但只能有一个线程进行读操作，其他线程只能等待。  \n那么能不能让线程不用等待，多线程都能进行读操作呢？通过Lock就可以实现。\n\n\n\n\n### 二、Lock的用法\n\nLock是一个接口，包含以下方法：\n```\npublic interface Lock {\nvoid lock();      //获取锁\nvoid lockInterruptibly() throws InterruptedException; //可中断的获取锁\nboolean tryLock(); //尝试非阻塞的获取锁\nboolean tryLock(long time, TimeUnit unit) throws InterruptedException; //超时获取锁\nvoid unlock(); //释放锁\nCondition newCondition(); //获取等待通知组件，和当前的锁绑定\n}\n```\n可以看到当使用Lock时，获取锁和释放锁都是主动调用执行的，而synchronized则是系统自动释放锁的。  \n前四个方法都是用来获取锁的，但各有区别：  \n- **lock()**：是最常用的获取锁的方法，若锁被其他线程获取，则等待（阻塞）。\n- **tryLock()**：尝试非阻塞地获取锁，立即返回。获取成功返回true；获取失败返回false，但不会阻塞。\n- **tryLock(long time, TimeUnit unit)**：与tryLock()相似，但是会超时等待一段时间，如果未获取到返回false。\n- **lockInterruptibly()**：可中断地获取锁，该方法会响应中断，在锁的获取过程中可以中断当前线程。  \n\n**注：当使用synchronized关键字时，一个线程在等待获取锁的过程中是无法中断的。而使用lockInterruptibly()方法获取某个锁时，如果不能获取到，在进行等待的情况下是可以响应中断的。**\n\n\n\n\nLock的使用：\n\n```\nLock lock = new ReentrantLock(); //可重入锁（Lock的一种实现）\nlock.lock();\ntry{\n    dosomething();\n}finally{\n    lock.unlock();\n}\n```\n**在finally块中释放锁的目的是保证获取锁之后，最终能被释放。**  \n不要将获取锁——lock()放在try中，如果在获取锁时发生了异常，异常抛出的同时，也会导致锁的无故释放（需要主动释放）。\n\n\n\n\n\n### 三、与synchronized的区别\nLock与synchronized的区别：  \n\n1. Lock是一个接口，是代码层面的实现；synchronized是关键字，是内置的语言实现（JVM层面）。\n2. Lock是显示地获取释放锁，扩展性更强；synchronized是隐式地获取释放锁，更简捷。\n2. Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生。\n3. Lock可以让等待锁的线程响应中断；而使用synchronized时等待锁的线程会一直等待下去，不能响应中断；\n4. Lock可以尝试非阻塞、可中断、超时地获取锁；synchronized不可以。\n4. Lock可以知道是否成功获取锁；synchronized无法知道。  \n\n\n\n总结：在资源竞争不是很激烈的情况下，Synchronized的性能要优于Lock；但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，Lock的性能更优；","source":"_posts/Lock接口的介绍及使用.md","raw":"---\ntitle: Lock接口的介绍及使用\ndate: 2017-10-17 21:40:19\ntags: [并发,Lock]\ncategories: 技术\n---\n### 一、Lock的介绍\n\n我们知道，在Java中锁的实现可以由synchronized关键字来完成，但在Java5之后，出现了一种新的方式来实现——Lock接口。\n\n那么为什么提出这种新的方式呢？  \n在多线程的情况下，当一段代码被synchronized修饰之后，同一时刻只能被一个线程访问，其他线程都必须等到该线程释放锁之后才能有机会获取锁访问这段代码，占用锁的线程只有在两种情况下才能释放锁：  \n\n1. 线程执行完了这段代码，释放锁；\n2. 线程执行发生异常，释放锁；  \n\n考虑一下，如果该线程由于IO操作或者其他原因（调用Sleep方法）被阻塞了，那么其他线程就会一直无期限地等待下去，后果可想而知。  \n那么能否用一种方式来防止等待的线程无限等待呢？（等待一段时间或者响应中断）通过Lock就可以实现。\n\n再如：当用多线程对文件进行读写时，读与写是互斥的，写与写是互斥的，但读与读却不是互斥的。如果用synchronized来实现同步，就会有这样的问题：多个线程都只需要读操作，但只能有一个线程进行读操作，其他线程只能等待。  \n那么能不能让线程不用等待，多线程都能进行读操作呢？通过Lock就可以实现。\n\n\n\n\n### 二、Lock的用法\n\nLock是一个接口，包含以下方法：\n```\npublic interface Lock {\nvoid lock();      //获取锁\nvoid lockInterruptibly() throws InterruptedException; //可中断的获取锁\nboolean tryLock(); //尝试非阻塞的获取锁\nboolean tryLock(long time, TimeUnit unit) throws InterruptedException; //超时获取锁\nvoid unlock(); //释放锁\nCondition newCondition(); //获取等待通知组件，和当前的锁绑定\n}\n```\n可以看到当使用Lock时，获取锁和释放锁都是主动调用执行的，而synchronized则是系统自动释放锁的。  \n前四个方法都是用来获取锁的，但各有区别：  \n- **lock()**：是最常用的获取锁的方法，若锁被其他线程获取，则等待（阻塞）。\n- **tryLock()**：尝试非阻塞地获取锁，立即返回。获取成功返回true；获取失败返回false，但不会阻塞。\n- **tryLock(long time, TimeUnit unit)**：与tryLock()相似，但是会超时等待一段时间，如果未获取到返回false。\n- **lockInterruptibly()**：可中断地获取锁，该方法会响应中断，在锁的获取过程中可以中断当前线程。  \n\n**注：当使用synchronized关键字时，一个线程在等待获取锁的过程中是无法中断的。而使用lockInterruptibly()方法获取某个锁时，如果不能获取到，在进行等待的情况下是可以响应中断的。**\n\n\n\n\nLock的使用：\n\n```\nLock lock = new ReentrantLock(); //可重入锁（Lock的一种实现）\nlock.lock();\ntry{\n    dosomething();\n}finally{\n    lock.unlock();\n}\n```\n**在finally块中释放锁的目的是保证获取锁之后，最终能被释放。**  \n不要将获取锁——lock()放在try中，如果在获取锁时发生了异常，异常抛出的同时，也会导致锁的无故释放（需要主动释放）。\n\n\n\n\n\n### 三、与synchronized的区别\nLock与synchronized的区别：  \n\n1. Lock是一个接口，是代码层面的实现；synchronized是关键字，是内置的语言实现（JVM层面）。\n2. Lock是显示地获取释放锁，扩展性更强；synchronized是隐式地获取释放锁，更简捷。\n2. Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生。\n3. Lock可以让等待锁的线程响应中断；而使用synchronized时等待锁的线程会一直等待下去，不能响应中断；\n4. Lock可以尝试非阻塞、可中断、超时地获取锁；synchronized不可以。\n4. Lock可以知道是否成功获取锁；synchronized无法知道。  \n\n\n\n总结：在资源竞争不是很激烈的情况下，Synchronized的性能要优于Lock；但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，Lock的性能更优；","slug":"Lock接口的介绍及使用","published":1,"updated":"2018-04-11T10:02:31.868Z","_id":"cjfqzt259001e50tc53avv9wg","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、Lock的介绍\"><a href=\"#一、Lock的介绍\" class=\"headerlink\" title=\"一、Lock的介绍\"></a>一、Lock的介绍</h3><p>我们知道，在Java中锁的实现可以由synchronized关键字来完成，但在Java5之后，出现了一种新的方式来实现——Lock接口。</p>\n<p>那么为什么提出这种新的方式呢？<br>在多线程的情况下，当一段代码被synchronized修饰之后，同一时刻只能被一个线程访问，其他线程都必须等到该线程释放锁之后才能有机会获取锁访问这段代码，占用锁的线程只有在两种情况下才能释放锁：  </p>\n<ol>\n<li>线程执行完了这段代码，释放锁；</li>\n<li>线程执行发生异常，释放锁；  </li>\n</ol>\n<p>考虑一下，如果该线程由于IO操作或者其他原因（调用Sleep方法）被阻塞了，那么其他线程就会一直无期限地等待下去，后果可想而知。<br>那么能否用一种方式来防止等待的线程无限等待呢？（等待一段时间或者响应中断）通过Lock就可以实现。</p>\n<p>再如：当用多线程对文件进行读写时，读与写是互斥的，写与写是互斥的，但读与读却不是互斥的。如果用synchronized来实现同步，就会有这样的问题：多个线程都只需要读操作，但只能有一个线程进行读操作，其他线程只能等待。<br>那么能不能让线程不用等待，多线程都能进行读操作呢？通过Lock就可以实现。</p>\n<h3 id=\"二、Lock的用法\"><a href=\"#二、Lock的用法\" class=\"headerlink\" title=\"二、Lock的用法\"></a>二、Lock的用法</h3><p>Lock是一个接口，包含以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Lock &#123;</div><div class=\"line\">void lock();      //获取锁</div><div class=\"line\">void lockInterruptibly() throws InterruptedException; //可中断的获取锁</div><div class=\"line\">boolean tryLock(); //尝试非阻塞的获取锁</div><div class=\"line\">boolean tryLock(long time, TimeUnit unit) throws InterruptedException; //超时获取锁</div><div class=\"line\">void unlock(); //释放锁</div><div class=\"line\">Condition newCondition(); //获取等待通知组件，和当前的锁绑定</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到当使用Lock时，获取锁和释放锁都是主动调用执行的，而synchronized则是系统自动释放锁的。<br>前四个方法都是用来获取锁的，但各有区别：  </p>\n<ul>\n<li><strong>lock()</strong>：是最常用的获取锁的方法，若锁被其他线程获取，则等待（阻塞）。</li>\n<li><strong>tryLock()</strong>：尝试非阻塞地获取锁，立即返回。获取成功返回true；获取失败返回false，但不会阻塞。</li>\n<li><strong>tryLock(long time, TimeUnit unit)</strong>：与tryLock()相似，但是会超时等待一段时间，如果未获取到返回false。</li>\n<li><strong>lockInterruptibly()</strong>：可中断地获取锁，该方法会响应中断，在锁的获取过程中可以中断当前线程。  </li>\n</ul>\n<p><strong>注：当使用synchronized关键字时，一个线程在等待获取锁的过程中是无法中断的。而使用lockInterruptibly()方法获取某个锁时，如果不能获取到，在进行等待的情况下是可以响应中断的。</strong></p>\n<p>Lock的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lock lock = new ReentrantLock(); //可重入锁（Lock的一种实现）</div><div class=\"line\">lock.lock();</div><div class=\"line\">try&#123;</div><div class=\"line\">    dosomething();</div><div class=\"line\">&#125;finally&#123;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在finally块中释放锁的目的是保证获取锁之后，最终能被释放。</strong><br>不要将获取锁——lock()放在try中，如果在获取锁时发生了异常，异常抛出的同时，也会导致锁的无故释放（需要主动释放）。</p>\n<h3 id=\"三、与synchronized的区别\"><a href=\"#三、与synchronized的区别\" class=\"headerlink\" title=\"三、与synchronized的区别\"></a>三、与synchronized的区别</h3><p>Lock与synchronized的区别：  </p>\n<ol>\n<li>Lock是一个接口，是代码层面的实现；synchronized是关键字，是内置的语言实现（JVM层面）。</li>\n<li>Lock是显示地获取释放锁，扩展性更强；synchronized是隐式地获取释放锁，更简捷。</li>\n<li>Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生。</li>\n<li>Lock可以让等待锁的线程响应中断；而使用synchronized时等待锁的线程会一直等待下去，不能响应中断；</li>\n<li>Lock可以尝试非阻塞、可中断、超时地获取锁；synchronized不可以。</li>\n<li>Lock可以知道是否成功获取锁；synchronized无法知道。  </li>\n</ol>\n<p>总结：在资源竞争不是很激烈的情况下，Synchronized的性能要优于Lock；但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，Lock的性能更优；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Lock的介绍\"><a href=\"#一、Lock的介绍\" class=\"headerlink\" title=\"一、Lock的介绍\"></a>一、Lock的介绍</h3><p>我们知道，在Java中锁的实现可以由synchronized关键字来完成，但在Java5之后，出现了一种新的方式来实现——Lock接口。</p>\n<p>那么为什么提出这种新的方式呢？<br>在多线程的情况下，当一段代码被synchronized修饰之后，同一时刻只能被一个线程访问，其他线程都必须等到该线程释放锁之后才能有机会获取锁访问这段代码，占用锁的线程只有在两种情况下才能释放锁：  </p>\n<ol>\n<li>线程执行完了这段代码，释放锁；</li>\n<li>线程执行发生异常，释放锁；  </li>\n</ol>\n<p>考虑一下，如果该线程由于IO操作或者其他原因（调用Sleep方法）被阻塞了，那么其他线程就会一直无期限地等待下去，后果可想而知。<br>那么能否用一种方式来防止等待的线程无限等待呢？（等待一段时间或者响应中断）通过Lock就可以实现。</p>\n<p>再如：当用多线程对文件进行读写时，读与写是互斥的，写与写是互斥的，但读与读却不是互斥的。如果用synchronized来实现同步，就会有这样的问题：多个线程都只需要读操作，但只能有一个线程进行读操作，其他线程只能等待。<br>那么能不能让线程不用等待，多线程都能进行读操作呢？通过Lock就可以实现。</p>\n<h3 id=\"二、Lock的用法\"><a href=\"#二、Lock的用法\" class=\"headerlink\" title=\"二、Lock的用法\"></a>二、Lock的用法</h3><p>Lock是一个接口，包含以下方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Lock &#123;</div><div class=\"line\">void lock();      //获取锁</div><div class=\"line\">void lockInterruptibly() throws InterruptedException; //可中断的获取锁</div><div class=\"line\">boolean tryLock(); //尝试非阻塞的获取锁</div><div class=\"line\">boolean tryLock(long time, TimeUnit unit) throws InterruptedException; //超时获取锁</div><div class=\"line\">void unlock(); //释放锁</div><div class=\"line\">Condition newCondition(); //获取等待通知组件，和当前的锁绑定</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到当使用Lock时，获取锁和释放锁都是主动调用执行的，而synchronized则是系统自动释放锁的。<br>前四个方法都是用来获取锁的，但各有区别：  </p>\n<ul>\n<li><strong>lock()</strong>：是最常用的获取锁的方法，若锁被其他线程获取，则等待（阻塞）。</li>\n<li><strong>tryLock()</strong>：尝试非阻塞地获取锁，立即返回。获取成功返回true；获取失败返回false，但不会阻塞。</li>\n<li><strong>tryLock(long time, TimeUnit unit)</strong>：与tryLock()相似，但是会超时等待一段时间，如果未获取到返回false。</li>\n<li><strong>lockInterruptibly()</strong>：可中断地获取锁，该方法会响应中断，在锁的获取过程中可以中断当前线程。  </li>\n</ul>\n<p><strong>注：当使用synchronized关键字时，一个线程在等待获取锁的过程中是无法中断的。而使用lockInterruptibly()方法获取某个锁时，如果不能获取到，在进行等待的情况下是可以响应中断的。</strong></p>\n<p>Lock的使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Lock lock = new ReentrantLock(); //可重入锁（Lock的一种实现）</div><div class=\"line\">lock.lock();</div><div class=\"line\">try&#123;</div><div class=\"line\">    dosomething();</div><div class=\"line\">&#125;finally&#123;</div><div class=\"line\">    lock.unlock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在finally块中释放锁的目的是保证获取锁之后，最终能被释放。</strong><br>不要将获取锁——lock()放在try中，如果在获取锁时发生了异常，异常抛出的同时，也会导致锁的无故释放（需要主动释放）。</p>\n<h3 id=\"三、与synchronized的区别\"><a href=\"#三、与synchronized的区别\" class=\"headerlink\" title=\"三、与synchronized的区别\"></a>三、与synchronized的区别</h3><p>Lock与synchronized的区别：  </p>\n<ol>\n<li>Lock是一个接口，是代码层面的实现；synchronized是关键字，是内置的语言实现（JVM层面）。</li>\n<li>Lock是显示地获取释放锁，扩展性更强；synchronized是隐式地获取释放锁，更简捷。</li>\n<li>Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生。</li>\n<li>Lock可以让等待锁的线程响应中断；而使用synchronized时等待锁的线程会一直等待下去，不能响应中断；</li>\n<li>Lock可以尝试非阻塞、可中断、超时地获取锁；synchronized不可以。</li>\n<li>Lock可以知道是否成功获取锁；synchronized无法知道。  </li>\n</ol>\n<p>总结：在资源竞争不是很激烈的情况下，Synchronized的性能要优于Lock；但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，Lock的性能更优；</p>\n"},{"title":"Lock实现之AQS——AbstractQueuedSynchronizer","date":"2017-10-18T09:48:18.000Z","_content":"### 一、AQS的介绍\n**队列同步器AbstractQueuedSynchronizer（AQS）是构建锁或者其他同步组件的基础框架，是实现Lock的基础。它使用了一个volatile修饰的int变量来表示同步状态，并维护了一个FIFO队列来完成资源获取线程的排队。**\n\n\n```\npublic abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer \nimplements java.io.Serializable {\n \n private transient volatile Node head;//头节点\n private transient volatile Node tail;//尾节点\n private volatile int state;          //同步状态\n protected final int getState() {\n      return state;\n }\nprotected final void setState(int newState) {\n    state = newState;\n}\nprotected final boolean compareAndSetState(int expect, int update) {\n   return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n...\n```\n从上面AQS的部分代码可以看到，AQS是一个类，它包含了表示同步状态的state变量（volatile修饰）；维护队列的两个引用头节点head和尾节点tail（volatile修饰）；以及提供了三个主要方法，用来保证同步状态的改变是线程安全的；省略了其他方法。\n\n那么AQS是如何实现锁的呢？  \n**当我们需要实现锁的时候，首先继承AQS并重写指定的方法，然后将AQS子类组合在自定义组件（锁）的实现中，并调用AQS的模板方法，而这些模板方法将会调用我们重写的方法（模板方法模式）**，这就可以达到我们想要的效果。  \n**注：重写指定的方法时需要用到AQS中的三个主要方法来对同步状态进行访问或修改。**\n\nAQS中可重写的方法如下：\n```\nprotected boolean tryAcquire(int arg) {} //独占式获取\nprotected boolean tryRelease(int arg) {} //独占式释放\nprotected int tryAcquireShared(int arg) {} //共享式获取\nprotected boolean tryReleaseShared(int arg) {} //共享式释放\nprotected boolean isHeldExclusively() {} //判断AQS是否被该线程独占\n```\n来看一个独占锁的示例。\n\n```\nclass Mutex implements Lock, java.io.Serializable {\n   // 内部类，自定义同步器，继承AQS\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // 重写方法——是否处于占用状态\n     protected boolean isHeldExclusively() {\n       return getState() == 1;\n     }\n     // 重写方法——当状态为0的时候获取锁\n     public boolean tryAcquire(int acquires) {\n       assert acquires == 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n     // 重写方法——释放锁，将状态设置为0\n     protected boolean tryRelease(int releases) {\n       assert releases == 1; // Otherwise unused\n       if (getState() == 0) throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n     // 返回一个Condition，每个condition都包含了一个condition队列\n     Condition newCondition() { return new ConditionObject(); }\n   }\n   // 仅需要将操作代理到Sync上即可\n   private final Sync sync = new Sync();\n   public void lock()                { sync.acquire(1); }\n   public boolean tryLock()          { return sync.tryAcquire(1); }\n   public void unlock()              { sync.release(1); }\n   public Condition newCondition()   { return sync.newCondition(); }\n   public boolean isLocked()         { return sync.isHeldExclusively(); }\n   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }\n```\n以上就是利用AQS来实现一个独占锁的示例。  \nMutex是一个自定义的Lock，它在同一时刻只允许一个线程占有锁。**它定义了一个静态内部类继承自AQS，并重写了相应的方法，实现了独占式的获取释放锁。**  \n在重写的tryAcquire方法中，**调用CAS方法改变同步状态，因为是原子操作只有一个线程能完成**；在重写的tryRelease方法中将同步状态设为0。  \n在使用这个Lock时，我们只要调用Mutex的方法，有关同步的细节都由同步器完成。大大降低了自定义并发组件的门槛。\n\n### 二、AQS的实现原理分析\n知道了AQS的用法，那么就来分析下它的实现原理。\n**同步器可分为独占式和共享式。** 一般只实现其中一种。这里主要分析独占锁的实现。\n\n#### 同步队列\nAQS是依靠内部的同步队列来完成同步状态的管理，当前线程获取同步状态失败时，会将当前线程以及等待状态等信息构造成一个节点（node）加入同步队列，并阻塞当前线程。当同步状态释放时，会把首节点中的线程唤醒，使其尝试获取同步状态。\n\n##### Node类\n\n```\nstatic final class Node {\n        static final Node SHARED = new Node();\n        static final Node EXCLUSIVE = null;\n        static final int CANCELLED =  1;\n        static final int SIGNAL    = -1;\n        static final int CONDITION = -2;\n        static final int PROPAGATE = -3;\n        volatile int waitStatus; //线程的等待状态（上述）\n        volatile Node prev; //前驱节点\n        volatile Node next; //后继节点\n        volatile Thread thread; //线程引用\n        Node nextWaiter; //等待队列中的后继节点\n        ...\n        }\n```\nNode是AQS维护的静态内部类。用来保存线程引用（失败）、等待状态和前后节点。  \n节点是构成同步队列的基础，同步器拥有首节点（head）和尾节点（tail），获取同步状态失败的线程会成为节点加入队列的尾部。同步器结构如下： \n![image](http://osuskkx7k.bkt.clouddn.com/AQS2.png?imageView2/2/w/500/h/300)\n\n\n**注：构造节点的过程必须保证线程安全，因为会有多个线程失败。那么它是如何做到的？AQS提供了一个基于CAS的构造尾节点的方法compareAndSetTail，它可以保证节点被正确地加入到队列中。**\n\n#### 独占式获取锁\n来看一看获取锁的流程。  \n调用AQS的acquire（int args）方法获取同步状态。\n\n```\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n**&&：** 短路与，当第一个为false时不再判断后面条件；第一个为true时还会判断第二个条件；  \n**&:**     当第一个为false时，还会判断后面的条件；\n- \n  当成功获取锁，即tryAcquire(arg)为true时，!tryAcquire(arg) 为false，跳出if，此时执行selfInterrupt()；\n-   当没有成功获取锁，即tryAcquire(arg)为false时，!tryAcquire(arg) 为true时，接着判断第二个条件，两个步骤： \n\n步骤一：  addWaiter(Node.EXCLUSIVE)：将该节点加入同步队列的尾部,返回该节点；  \n步骤二： acquireQueued(Node node, arg))：使该节点以\"死循环\"的方式获取同步状态；若获取不到则阻塞节点中的线程，被阻塞的线程的唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现。\n\n**分析步骤一：addWaiter方法**\n\n```\nprivate Node addWaiter(Node mode) {\n        Node node = new Node(Thread.currentThread(), mode);\n        Node pred = tail;\n        if (pred != null) { //如果有尾节点，快速尝试在尾部添加，减少开销\n            node.prev = pred;\n            if (compareAndSetTail(pred, node)) {\n                pred.next = node;\n                return node;                  //如果已经有尾节点，利用CAS将自己添加为尾节点之后返回\n            }\n        }\n        enq(node);          //如果没有尾节点，那么进入enq方法\n        return node;\n    }\nprivate Node enq(final Node node) {\n        for (;;) {\n            Node t = tail;\n            if (t == null) {        \n                if (compareAndSetHead(new Node()))    //初始化头节点\n                    tail = head;\n            } else {\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {   //CAS添加node为尾节点\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n```\n\n可以看到，若队列还未生成即没有尾节点，则进入enq方法中，先创造一个头节点，然后通过死循环**for(;;)** 来保证节点的正确添加，再通过**compareAndSetTail（CAS）** 这个方法确保节点能够被线程安全地添加（可以想象多个线程获取同步失败后，如果不保证线程安全添加，将导致顺序混乱，可能丢失线程），只有从CAS返回后，线程才能返回，否则将不断尝试。\n这个enq方法将并发的添加节点的请求通过CAS变得串行化了。\n\n**分析步骤二：acquireQueued方法**  \n节点进入同步队列后，就进入了一个自旋的过程，每个节点（或线程）都在自省的观察，当获取到同步状态就可以从自旋中退出，否则依旧自旋。\n\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();     //获得前驱节点\n                if (p == head && tryAcquire(arg)) {  //只有前驱节点是头节点才尝试获取锁，false直接跳出if\n                    setHead(node);        //获取成功，将自己设置为头节点\n                    p.next = null;           // help GC\n                    failed = false;\n                    return interrupted;       //返回false，回到acquire方法中，不执行selfInterrupt();\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n```\nprivate void setHead(Node node) {\n        head = node;\n        node.thread = null;\n        node.prev = null;\n    }\n```\n这段代码主要做了2件事：\n\n  1. 判断当前节点的前驱节点是否为头节点并尝试tryAcquire，只有当前驱节点是head的节点才会尝试tryAcquire，如果节点尝试tryAcquire成功，执行setHead方法将当前节点作为head、将当前节点中的thread设置为null、将当前节点的prev设置为null，这保证了链表中头结点永远是一个不带Thread的空节点；\n\n  2. 如果当前节点的前驱节点不是头节点或者tryAcquire失败，那么执行第13行~第15行的代码，做了两步操作，首先判断在acquie失败后是否应该park（阻塞），其次park并检查中断状态；  \n  \n分析下第2件事：\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)     //ws=SIGNAL= -1\n            return true;\n        if (ws > 0) {             //ws=CANCELLED= 1\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {                 //ws=CONDITION= -2 or PROPAGATE= -3\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n­这个方法做了以下工作，\n­每个节点判断它前驱节点的状态：  \n1. 它的前驱节点是SIGNAL状态的，返回true，表示当前节点应当park(阻塞)，执行parkAndCheckInterrupt()，­该方法利用LockSupport的park方法让当前线程阻塞，如下。 \n\n```\nprivate final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n2. 它的前驱节点的waitStatus>0，即CANCELLED，那么CANCELLED的节点作废，当前节点不断向前找并重新连接为双向队列，直到找到一个前驱节点的waitStats不是CANCELLED的为止。\n3. 它的前驱节点不是SIGNAL状态且waitStatus<=0，即CONDITION或PROPAGATE，此时执行第11行代码，利用CAS机制，将前驱节点的状态更新为SIGNAL状态。\n****\n\n\n\n#### 独占式释放锁\n调用AQS的release方法可以释放同步状态，唤醒后继节点。\n\n```\npublic final boolean release(int arg) {\n        if (tryRelease(arg)) {       \n            Node h = head;\n            if (h != null && h.waitStatus != 0)\n                unparkSuccessor(h);  //调用LockSupport来唤醒处于等待状态的线程\n            return true;\n        }\n        return false;\n    }\n```\ntryRelease释放成功，获取到head节点，如果head节点的waitStatus不为0的话，执行unparkSuccessor方法。\n\n```\nprivate void unparkSuccessor(Node node) {\n        int ws = node.waitStatus;\n        if (ws < 0)\n            compareAndSetWaitStatus(node, ws, 0);\n        Node s = node.next;\n        if (s == null || s.waitStatus > 0) {\n            s = null;\n            for (Node t = tail; t != null && t != node; t = t.prev)\n                if (t.waitStatus <= 0)\n                    s = t;\n        }\n        if (s != null)\n            LockSupport.unpark(s.thread);\n    }\n```\n这个方法做了以下工作：  \n1. 头节点的waitStatus<0，将头节点的waitStatus设置为0；\n2. 拿到头节点的下一个节点s，如果s==null或者s的waitStatus>0（被取消了），那么从队列尾巴开始向前寻找一个waitStatus<=0的节点作为后继要唤醒的节点；\n3. 如果拿到了一个不等于null的节点s，就利用LockSupport的unpark方法让它取消阻塞。\n#### 总结： \n获取同步状态时，AQS维护一个同步队列，获取状态失败的线程都会加入到队列中并在队列中进行自旋；移出队列的条件是前驱节点为头节点且获取同步状态成功。  \n释放同步状态时，头节点唤醒它的后继节点。","source":"_posts/Lock实现之AQS——AbstractQueuedSynchronizer.md","raw":"---\ntitle: Lock实现之AQS——AbstractQueuedSynchronizer\ndate: 2017-10-18 17:48:18\ntags: [并发,AQS,Lock]\ncategories: 技术\n---\n### 一、AQS的介绍\n**队列同步器AbstractQueuedSynchronizer（AQS）是构建锁或者其他同步组件的基础框架，是实现Lock的基础。它使用了一个volatile修饰的int变量来表示同步状态，并维护了一个FIFO队列来完成资源获取线程的排队。**\n\n\n```\npublic abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer \nimplements java.io.Serializable {\n \n private transient volatile Node head;//头节点\n private transient volatile Node tail;//尾节点\n private volatile int state;          //同步状态\n protected final int getState() {\n      return state;\n }\nprotected final void setState(int newState) {\n    state = newState;\n}\nprotected final boolean compareAndSetState(int expect, int update) {\n   return unsafe.compareAndSwapInt(this, stateOffset, expect, update);\n}\n...\n```\n从上面AQS的部分代码可以看到，AQS是一个类，它包含了表示同步状态的state变量（volatile修饰）；维护队列的两个引用头节点head和尾节点tail（volatile修饰）；以及提供了三个主要方法，用来保证同步状态的改变是线程安全的；省略了其他方法。\n\n那么AQS是如何实现锁的呢？  \n**当我们需要实现锁的时候，首先继承AQS并重写指定的方法，然后将AQS子类组合在自定义组件（锁）的实现中，并调用AQS的模板方法，而这些模板方法将会调用我们重写的方法（模板方法模式）**，这就可以达到我们想要的效果。  \n**注：重写指定的方法时需要用到AQS中的三个主要方法来对同步状态进行访问或修改。**\n\nAQS中可重写的方法如下：\n```\nprotected boolean tryAcquire(int arg) {} //独占式获取\nprotected boolean tryRelease(int arg) {} //独占式释放\nprotected int tryAcquireShared(int arg) {} //共享式获取\nprotected boolean tryReleaseShared(int arg) {} //共享式释放\nprotected boolean isHeldExclusively() {} //判断AQS是否被该线程独占\n```\n来看一个独占锁的示例。\n\n```\nclass Mutex implements Lock, java.io.Serializable {\n   // 内部类，自定义同步器，继承AQS\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // 重写方法——是否处于占用状态\n     protected boolean isHeldExclusively() {\n       return getState() == 1;\n     }\n     // 重写方法——当状态为0的时候获取锁\n     public boolean tryAcquire(int acquires) {\n       assert acquires == 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n     // 重写方法——释放锁，将状态设置为0\n     protected boolean tryRelease(int releases) {\n       assert releases == 1; // Otherwise unused\n       if (getState() == 0) throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n     // 返回一个Condition，每个condition都包含了一个condition队列\n     Condition newCondition() { return new ConditionObject(); }\n   }\n   // 仅需要将操作代理到Sync上即可\n   private final Sync sync = new Sync();\n   public void lock()                { sync.acquire(1); }\n   public boolean tryLock()          { return sync.tryAcquire(1); }\n   public void unlock()              { sync.release(1); }\n   public Condition newCondition()   { return sync.newCondition(); }\n   public boolean isLocked()         { return sync.isHeldExclusively(); }\n   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }\n```\n以上就是利用AQS来实现一个独占锁的示例。  \nMutex是一个自定义的Lock，它在同一时刻只允许一个线程占有锁。**它定义了一个静态内部类继承自AQS，并重写了相应的方法，实现了独占式的获取释放锁。**  \n在重写的tryAcquire方法中，**调用CAS方法改变同步状态，因为是原子操作只有一个线程能完成**；在重写的tryRelease方法中将同步状态设为0。  \n在使用这个Lock时，我们只要调用Mutex的方法，有关同步的细节都由同步器完成。大大降低了自定义并发组件的门槛。\n\n### 二、AQS的实现原理分析\n知道了AQS的用法，那么就来分析下它的实现原理。\n**同步器可分为独占式和共享式。** 一般只实现其中一种。这里主要分析独占锁的实现。\n\n#### 同步队列\nAQS是依靠内部的同步队列来完成同步状态的管理，当前线程获取同步状态失败时，会将当前线程以及等待状态等信息构造成一个节点（node）加入同步队列，并阻塞当前线程。当同步状态释放时，会把首节点中的线程唤醒，使其尝试获取同步状态。\n\n##### Node类\n\n```\nstatic final class Node {\n        static final Node SHARED = new Node();\n        static final Node EXCLUSIVE = null;\n        static final int CANCELLED =  1;\n        static final int SIGNAL    = -1;\n        static final int CONDITION = -2;\n        static final int PROPAGATE = -3;\n        volatile int waitStatus; //线程的等待状态（上述）\n        volatile Node prev; //前驱节点\n        volatile Node next; //后继节点\n        volatile Thread thread; //线程引用\n        Node nextWaiter; //等待队列中的后继节点\n        ...\n        }\n```\nNode是AQS维护的静态内部类。用来保存线程引用（失败）、等待状态和前后节点。  \n节点是构成同步队列的基础，同步器拥有首节点（head）和尾节点（tail），获取同步状态失败的线程会成为节点加入队列的尾部。同步器结构如下： \n![image](http://osuskkx7k.bkt.clouddn.com/AQS2.png?imageView2/2/w/500/h/300)\n\n\n**注：构造节点的过程必须保证线程安全，因为会有多个线程失败。那么它是如何做到的？AQS提供了一个基于CAS的构造尾节点的方法compareAndSetTail，它可以保证节点被正确地加入到队列中。**\n\n#### 独占式获取锁\n来看一看获取锁的流程。  \n调用AQS的acquire（int args）方法获取同步状态。\n\n```\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n```\n**&&：** 短路与，当第一个为false时不再判断后面条件；第一个为true时还会判断第二个条件；  \n**&:**     当第一个为false时，还会判断后面的条件；\n- \n  当成功获取锁，即tryAcquire(arg)为true时，!tryAcquire(arg) 为false，跳出if，此时执行selfInterrupt()；\n-   当没有成功获取锁，即tryAcquire(arg)为false时，!tryAcquire(arg) 为true时，接着判断第二个条件，两个步骤： \n\n步骤一：  addWaiter(Node.EXCLUSIVE)：将该节点加入同步队列的尾部,返回该节点；  \n步骤二： acquireQueued(Node node, arg))：使该节点以\"死循环\"的方式获取同步状态；若获取不到则阻塞节点中的线程，被阻塞的线程的唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现。\n\n**分析步骤一：addWaiter方法**\n\n```\nprivate Node addWaiter(Node mode) {\n        Node node = new Node(Thread.currentThread(), mode);\n        Node pred = tail;\n        if (pred != null) { //如果有尾节点，快速尝试在尾部添加，减少开销\n            node.prev = pred;\n            if (compareAndSetTail(pred, node)) {\n                pred.next = node;\n                return node;                  //如果已经有尾节点，利用CAS将自己添加为尾节点之后返回\n            }\n        }\n        enq(node);          //如果没有尾节点，那么进入enq方法\n        return node;\n    }\nprivate Node enq(final Node node) {\n        for (;;) {\n            Node t = tail;\n            if (t == null) {        \n                if (compareAndSetHead(new Node()))    //初始化头节点\n                    tail = head;\n            } else {\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {   //CAS添加node为尾节点\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n```\n\n可以看到，若队列还未生成即没有尾节点，则进入enq方法中，先创造一个头节点，然后通过死循环**for(;;)** 来保证节点的正确添加，再通过**compareAndSetTail（CAS）** 这个方法确保节点能够被线程安全地添加（可以想象多个线程获取同步失败后，如果不保证线程安全添加，将导致顺序混乱，可能丢失线程），只有从CAS返回后，线程才能返回，否则将不断尝试。\n这个enq方法将并发的添加节点的请求通过CAS变得串行化了。\n\n**分析步骤二：acquireQueued方法**  \n节点进入同步队列后，就进入了一个自旋的过程，每个节点（或线程）都在自省的观察，当获取到同步状态就可以从自旋中退出，否则依旧自旋。\n\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {\n                final Node p = node.predecessor();     //获得前驱节点\n                if (p == head && tryAcquire(arg)) {  //只有前驱节点是头节点才尝试获取锁，false直接跳出if\n                    setHead(node);        //获取成功，将自己设置为头节点\n                    p.next = null;           // help GC\n                    failed = false;\n                    return interrupted;       //返回false，回到acquire方法中，不执行selfInterrupt();\n                }\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed)\n                cancelAcquire(node);\n        }\n    }\n```\n\n```\nprivate void setHead(Node node) {\n        head = node;\n        node.thread = null;\n        node.prev = null;\n    }\n```\n这段代码主要做了2件事：\n\n  1. 判断当前节点的前驱节点是否为头节点并尝试tryAcquire，只有当前驱节点是head的节点才会尝试tryAcquire，如果节点尝试tryAcquire成功，执行setHead方法将当前节点作为head、将当前节点中的thread设置为null、将当前节点的prev设置为null，这保证了链表中头结点永远是一个不带Thread的空节点；\n\n  2. 如果当前节点的前驱节点不是头节点或者tryAcquire失败，那么执行第13行~第15行的代码，做了两步操作，首先判断在acquie失败后是否应该park（阻塞），其次park并检查中断状态；  \n  \n分析下第2件事：\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n        int ws = pred.waitStatus;\n        if (ws == Node.SIGNAL)     //ws=SIGNAL= -1\n            return true;\n        if (ws > 0) {             //ws=CANCELLED= 1\n            do {\n                node.prev = pred = pred.prev;\n            } while (pred.waitStatus > 0);\n            pred.next = node;\n        } else {                 //ws=CONDITION= -2 or PROPAGATE= -3\n            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n        }\n        return false;\n    }\n```\n­这个方法做了以下工作，\n­每个节点判断它前驱节点的状态：  \n1. 它的前驱节点是SIGNAL状态的，返回true，表示当前节点应当park(阻塞)，执行parkAndCheckInterrupt()，­该方法利用LockSupport的park方法让当前线程阻塞，如下。 \n\n```\nprivate final boolean parkAndCheckInterrupt() {\n        LockSupport.park(this);\n        return Thread.interrupted();\n    }\n```\n\n2. 它的前驱节点的waitStatus>0，即CANCELLED，那么CANCELLED的节点作废，当前节点不断向前找并重新连接为双向队列，直到找到一个前驱节点的waitStats不是CANCELLED的为止。\n3. 它的前驱节点不是SIGNAL状态且waitStatus<=0，即CONDITION或PROPAGATE，此时执行第11行代码，利用CAS机制，将前驱节点的状态更新为SIGNAL状态。\n****\n\n\n\n#### 独占式释放锁\n调用AQS的release方法可以释放同步状态，唤醒后继节点。\n\n```\npublic final boolean release(int arg) {\n        if (tryRelease(arg)) {       \n            Node h = head;\n            if (h != null && h.waitStatus != 0)\n                unparkSuccessor(h);  //调用LockSupport来唤醒处于等待状态的线程\n            return true;\n        }\n        return false;\n    }\n```\ntryRelease释放成功，获取到head节点，如果head节点的waitStatus不为0的话，执行unparkSuccessor方法。\n\n```\nprivate void unparkSuccessor(Node node) {\n        int ws = node.waitStatus;\n        if (ws < 0)\n            compareAndSetWaitStatus(node, ws, 0);\n        Node s = node.next;\n        if (s == null || s.waitStatus > 0) {\n            s = null;\n            for (Node t = tail; t != null && t != node; t = t.prev)\n                if (t.waitStatus <= 0)\n                    s = t;\n        }\n        if (s != null)\n            LockSupport.unpark(s.thread);\n    }\n```\n这个方法做了以下工作：  \n1. 头节点的waitStatus<0，将头节点的waitStatus设置为0；\n2. 拿到头节点的下一个节点s，如果s==null或者s的waitStatus>0（被取消了），那么从队列尾巴开始向前寻找一个waitStatus<=0的节点作为后继要唤醒的节点；\n3. 如果拿到了一个不等于null的节点s，就利用LockSupport的unpark方法让它取消阻塞。\n#### 总结： \n获取同步状态时，AQS维护一个同步队列，获取状态失败的线程都会加入到队列中并在队列中进行自旋；移出队列的条件是前驱节点为头节点且获取同步状态成功。  \n释放同步状态时，头节点唤醒它的后继节点。","slug":"Lock实现之AQS——AbstractQueuedSynchronizer","published":1,"updated":"2018-04-11T10:02:31.868Z","_id":"cjfqzt259001i50tckm2msj88","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、AQS的介绍\"><a href=\"#一、AQS的介绍\" class=\"headerlink\" title=\"一、AQS的介绍\"></a>一、AQS的介绍</h3><p><strong>队列同步器AbstractQueuedSynchronizer（AQS）是构建锁或者其他同步组件的基础框架，是实现Lock的基础。它使用了一个volatile修饰的int变量来表示同步状态，并维护了一个FIFO队列来完成资源获取线程的排队。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer </div><div class=\"line\">implements java.io.Serializable &#123;</div><div class=\"line\"> </div><div class=\"line\"> private transient volatile Node head;//头节点</div><div class=\"line\"> private transient volatile Node tail;//尾节点</div><div class=\"line\"> private volatile int state;          //同步状态</div><div class=\"line\"> protected final int getState() &#123;</div><div class=\"line\">      return state;</div><div class=\"line\"> &#125;</div><div class=\"line\">protected final void setState(int newState) &#123;</div><div class=\"line\">    state = newState;</div><div class=\"line\">&#125;</div><div class=\"line\">protected final boolean compareAndSetState(int expect, int update) &#123;</div><div class=\"line\">   return unsafe.compareAndSwapInt(this, stateOffset, expect, update);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>从上面AQS的部分代码可以看到，AQS是一个类，它包含了表示同步状态的state变量（volatile修饰）；维护队列的两个引用头节点head和尾节点tail（volatile修饰）；以及提供了三个主要方法，用来保证同步状态的改变是线程安全的；省略了其他方法。</p>\n<p>那么AQS是如何实现锁的呢？<br><strong>当我们需要实现锁的时候，首先继承AQS并重写指定的方法，然后将AQS子类组合在自定义组件（锁）的实现中，并调用AQS的模板方法，而这些模板方法将会调用我们重写的方法（模板方法模式）</strong>，这就可以达到我们想要的效果。<br><strong>注：重写指定的方法时需要用到AQS中的三个主要方法来对同步状态进行访问或修改。</strong></p>\n<p>AQS中可重写的方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryAcquire(int arg) &#123;&#125; //独占式获取</div><div class=\"line\">protected boolean tryRelease(int arg) &#123;&#125; //独占式释放</div><div class=\"line\">protected int tryAcquireShared(int arg) &#123;&#125; //共享式获取</div><div class=\"line\">protected boolean tryReleaseShared(int arg) &#123;&#125; //共享式释放</div><div class=\"line\">protected boolean isHeldExclusively() &#123;&#125; //判断AQS是否被该线程独占</div></pre></td></tr></table></figure></p>\n<p>来看一个独占锁的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Mutex implements Lock, java.io.Serializable &#123;</div><div class=\"line\">   // 内部类，自定义同步器，继承AQS</div><div class=\"line\">   private static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">     // 重写方法——是否处于占用状态</div><div class=\"line\">     protected boolean isHeldExclusively() &#123;</div><div class=\"line\">       return getState() == 1;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 重写方法——当状态为0的时候获取锁</div><div class=\"line\">     public boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">       assert acquires == 1; // Otherwise unused</div><div class=\"line\">       if (compareAndSetState(0, 1)) &#123;</div><div class=\"line\">         setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">         return true;</div><div class=\"line\">       &#125;</div><div class=\"line\">       return false;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 重写方法——释放锁，将状态设置为0</div><div class=\"line\">     protected boolean tryRelease(int releases) &#123;</div><div class=\"line\">       assert releases == 1; // Otherwise unused</div><div class=\"line\">       if (getState() == 0) throw new IllegalMonitorStateException();</div><div class=\"line\">       setExclusiveOwnerThread(null);</div><div class=\"line\">       setState(0);</div><div class=\"line\">       return true;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 返回一个Condition，每个condition都包含了一个condition队列</div><div class=\"line\">     Condition newCondition() &#123; return new ConditionObject(); &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   // 仅需要将操作代理到Sync上即可</div><div class=\"line\">   private final Sync sync = new Sync();</div><div class=\"line\">   public void lock()                &#123; sync.acquire(1); &#125;</div><div class=\"line\">   public boolean tryLock()          &#123; return sync.tryAcquire(1); &#125;</div><div class=\"line\">   public void unlock()              &#123; sync.release(1); &#125;</div><div class=\"line\">   public Condition newCondition()   &#123; return sync.newCondition(); &#125;</div><div class=\"line\">   public boolean isLocked()         &#123; return sync.isHeldExclusively(); &#125;</div><div class=\"line\">   public boolean hasQueuedThreads() &#123; return sync.hasQueuedThreads(); &#125;</div><div class=\"line\">   public void lockInterruptibly() throws InterruptedException &#123;</div><div class=\"line\">     sync.acquireInterruptibly(1);</div><div class=\"line\">   &#125;</div><div class=\"line\">   public boolean tryLock(long timeout, TimeUnit unit)</div><div class=\"line\">       throws InterruptedException &#123;</div><div class=\"line\">     return sync.tryAcquireNanos(1, unit.toNanos(timeout));</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>以上就是利用AQS来实现一个独占锁的示例。<br>Mutex是一个自定义的Lock，它在同一时刻只允许一个线程占有锁。<strong>它定义了一个静态内部类继承自AQS，并重写了相应的方法，实现了独占式的获取释放锁。</strong><br>在重写的tryAcquire方法中，<strong>调用CAS方法改变同步状态，因为是原子操作只有一个线程能完成</strong>；在重写的tryRelease方法中将同步状态设为0。<br>在使用这个Lock时，我们只要调用Mutex的方法，有关同步的细节都由同步器完成。大大降低了自定义并发组件的门槛。</p>\n<h3 id=\"二、AQS的实现原理分析\"><a href=\"#二、AQS的实现原理分析\" class=\"headerlink\" title=\"二、AQS的实现原理分析\"></a>二、AQS的实现原理分析</h3><p>知道了AQS的用法，那么就来分析下它的实现原理。<br><strong>同步器可分为独占式和共享式。</strong> 一般只实现其中一种。这里主要分析独占锁的实现。</p>\n<h4 id=\"同步队列\"><a href=\"#同步队列\" class=\"headerlink\" title=\"同步队列\"></a>同步队列</h4><p>AQS是依靠内部的同步队列来完成同步状态的管理，当前线程获取同步状态失败时，会将当前线程以及等待状态等信息构造成一个节点（node）加入同步队列，并阻塞当前线程。当同步状态释放时，会把首节点中的线程唤醒，使其尝试获取同步状态。</p>\n<h5 id=\"Node类\"><a href=\"#Node类\" class=\"headerlink\" title=\"Node类\"></a>Node类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Node &#123;</div><div class=\"line\">        static final Node SHARED = new Node();</div><div class=\"line\">        static final Node EXCLUSIVE = null;</div><div class=\"line\">        static final int CANCELLED =  1;</div><div class=\"line\">        static final int SIGNAL    = -1;</div><div class=\"line\">        static final int CONDITION = -2;</div><div class=\"line\">        static final int PROPAGATE = -3;</div><div class=\"line\">        volatile int waitStatus; //线程的等待状态（上述）</div><div class=\"line\">        volatile Node prev; //前驱节点</div><div class=\"line\">        volatile Node next; //后继节点</div><div class=\"line\">        volatile Thread thread; //线程引用</div><div class=\"line\">        Node nextWaiter; //等待队列中的后继节点</div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>Node是AQS维护的静态内部类。用来保存线程引用（失败）、等待状态和前后节点。<br>节点是构成同步队列的基础，同步器拥有首节点（head）和尾节点（tail），获取同步状态失败的线程会成为节点加入队列的尾部。同步器结构如下：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/AQS2.png?imageView2/2/w/500/h/300\" alt=\"image\"></p>\n<p><strong>注：构造节点的过程必须保证线程安全，因为会有多个线程失败。那么它是如何做到的？AQS提供了一个基于CAS的构造尾节点的方法compareAndSetTail，它可以保证节点被正确地加入到队列中。</strong></p>\n<h4 id=\"独占式获取锁\"><a href=\"#独占式获取锁\" class=\"headerlink\" title=\"独占式获取锁\"></a>独占式获取锁</h4><p>来看一看获取锁的流程。<br>调用AQS的acquire（int args）方法获取同步状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquire(int arg) &#123;</div><div class=\"line\">    if (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">            selfInterrupt();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>&amp;&amp;：</strong> 短路与，当第一个为false时不再判断后面条件；第一个为true时还会判断第二个条件；<br><strong>&amp;:</strong>     当第一个为false时，还会判断后面的条件；</p>\n<ul>\n<li>当成功获取锁，即tryAcquire(arg)为true时，!tryAcquire(arg) 为false，跳出if，此时执行selfInterrupt()；</li>\n<li>当没有成功获取锁，即tryAcquire(arg)为false时，!tryAcquire(arg) 为true时，接着判断第二个条件，两个步骤： </li>\n</ul>\n<p>步骤一：  addWaiter(Node.EXCLUSIVE)：将该节点加入同步队列的尾部,返回该节点；<br>步骤二： acquireQueued(Node node, arg))：使该节点以”死循环”的方式获取同步状态；若获取不到则阻塞节点中的线程，被阻塞的线程的唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现。</p>\n<p><strong>分析步骤一：addWaiter方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addWaiter(Node mode) &#123;</div><div class=\"line\">        Node node = new Node(Thread.currentThread(), mode);</div><div class=\"line\">        Node pred = tail;</div><div class=\"line\">        if (pred != null) &#123; //如果有尾节点，快速尝试在尾部添加，减少开销</div><div class=\"line\">            node.prev = pred;</div><div class=\"line\">            if (compareAndSetTail(pred, node)) &#123;</div><div class=\"line\">                pred.next = node;</div><div class=\"line\">                return node;                  //如果已经有尾节点，利用CAS将自己添加为尾节点之后返回</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        enq(node);          //如果没有尾节点，那么进入enq方法</div><div class=\"line\">        return node;</div><div class=\"line\">    &#125;</div><div class=\"line\">private Node enq(final Node node) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            Node t = tail;</div><div class=\"line\">            if (t == null) &#123;        </div><div class=\"line\">                if (compareAndSetHead(new Node()))    //初始化头节点</div><div class=\"line\">                    tail = head;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                node.prev = t;</div><div class=\"line\">                if (compareAndSetTail(t, node)) &#123;   //CAS添加node为尾节点</div><div class=\"line\">                    t.next = node;</div><div class=\"line\">                    return t;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，若队列还未生成即没有尾节点，则进入enq方法中，先创造一个头节点，然后通过死循环<strong>for(;;)</strong> 来保证节点的正确添加，再通过<strong>compareAndSetTail（CAS）</strong> 这个方法确保节点能够被线程安全地添加（可以想象多个线程获取同步失败后，如果不保证线程安全添加，将导致顺序混乱，可能丢失线程），只有从CAS返回后，线程才能返回，否则将不断尝试。<br>这个enq方法将并发的添加节点的请求通过CAS变得串行化了。</p>\n<p><strong>分析步骤二：acquireQueued方法</strong><br>节点进入同步队列后，就进入了一个自旋的过程，每个节点（或线程）都在自省的观察，当获取到同步状态就可以从自旋中退出，否则依旧自旋。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            boolean interrupted = false;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                final Node p = node.predecessor();     //获得前驱节点</div><div class=\"line\">                if (p == head &amp;&amp; tryAcquire(arg)) &#123;  //只有前驱节点是头节点才尝试获取锁，false直接跳出if</div><div class=\"line\">                    setHead(node);        //获取成功，将自己设置为头节点</div><div class=\"line\">                    p.next = null;           // help GC</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return interrupted;       //返回false，回到acquire方法中，不执行selfInterrupt();</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    interrupted = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setHead(Node node) &#123;</div><div class=\"line\">        head = node;</div><div class=\"line\">        node.thread = null;</div><div class=\"line\">        node.prev = null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这段代码主要做了2件事：</p>\n<ol>\n<li><p>判断当前节点的前驱节点是否为头节点并尝试tryAcquire，只有当前驱节点是head的节点才会尝试tryAcquire，如果节点尝试tryAcquire成功，执行setHead方法将当前节点作为head、将当前节点中的thread设置为null、将当前节点的prev设置为null，这保证了链表中头结点永远是一个不带Thread的空节点；</p>\n</li>\n<li><p>如果当前节点的前驱节点不是头节点或者tryAcquire失败，那么执行第13行~第15行的代码，做了两步操作，首先判断在acquie失败后是否应该park（阻塞），其次park并检查中断状态；  </p>\n</li>\n</ol>\n<p>分析下第2件事：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</div><div class=\"line\">        int ws = pred.waitStatus;</div><div class=\"line\">        if (ws == Node.SIGNAL)     //ws=SIGNAL= -1</div><div class=\"line\">            return true;</div><div class=\"line\">        if (ws &gt; 0) &#123;             //ws=CANCELLED= 1</div><div class=\"line\">            do &#123;</div><div class=\"line\">                node.prev = pred = pred.prev;</div><div class=\"line\">            &#125; while (pred.waitStatus &gt; 0);</div><div class=\"line\">            pred.next = node;</div><div class=\"line\">        &#125; else &#123;                 //ws=CONDITION= -2 or PROPAGATE= -3</div><div class=\"line\">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>­这个方法做了以下工作，<br>­每个节点判断它前驱节点的状态：  </p>\n<ol>\n<li>它的前驱节点是SIGNAL状态的，返回true，表示当前节点应当park(阻塞)，执行parkAndCheckInterrupt()，­该方法利用LockSupport的park方法让当前线程阻塞，如下。 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final boolean parkAndCheckInterrupt() &#123;</div><div class=\"line\">        LockSupport.park(this);</div><div class=\"line\">        return Thread.interrupted();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>它的前驱节点的waitStatus&gt;0，即CANCELLED，那么CANCELLED的节点作废，当前节点不断向前找并重新连接为双向队列，直到找到一个前驱节点的waitStats不是CANCELLED的为止。</li>\n<li>它的前驱节点不是SIGNAL状态且waitStatus&lt;=0，即CONDITION或PROPAGATE，此时执行第11行代码，利用CAS机制，将前驱节点的状态更新为SIGNAL状态。</li>\n</ol>\n<hr>\n<h4 id=\"独占式释放锁\"><a href=\"#独占式释放锁\" class=\"headerlink\" title=\"独占式释放锁\"></a>独占式释放锁</h4><p>调用AQS的release方法可以释放同步状态，唤醒后继节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean release(int arg) &#123;</div><div class=\"line\">        if (tryRelease(arg)) &#123;       </div><div class=\"line\">            Node h = head;</div><div class=\"line\">            if (h != null &amp;&amp; h.waitStatus != 0)</div><div class=\"line\">                unparkSuccessor(h);  //调用LockSupport来唤醒处于等待状态的线程</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>tryRelease释放成功，获取到head节点，如果head节点的waitStatus不为0的话，执行unparkSuccessor方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">        int ws = node.waitStatus;</div><div class=\"line\">        if (ws &lt; 0)</div><div class=\"line\">            compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\">        Node s = node.next;</div><div class=\"line\">        if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">            s = null;</div><div class=\"line\">            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">                if (t.waitStatus &lt;= 0)</div><div class=\"line\">                    s = t;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (s != null)</div><div class=\"line\">            LockSupport.unpark(s.thread);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个方法做了以下工作：  </p>\n<ol>\n<li>头节点的waitStatus&lt;0，将头节点的waitStatus设置为0；</li>\n<li>拿到头节点的下一个节点s，如果s==null或者s的waitStatus&gt;0（被取消了），那么从队列尾巴开始向前寻找一个waitStatus&lt;=0的节点作为后继要唤醒的节点；</li>\n<li>如果拿到了一个不等于null的节点s，就利用LockSupport的unpark方法让它取消阻塞。<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4>获取同步状态时，AQS维护一个同步队列，获取状态失败的线程都会加入到队列中并在队列中进行自旋；移出队列的条件是前驱节点为头节点且获取同步状态成功。<br>释放同步状态时，头节点唤醒它的后继节点。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、AQS的介绍\"><a href=\"#一、AQS的介绍\" class=\"headerlink\" title=\"一、AQS的介绍\"></a>一、AQS的介绍</h3><p><strong>队列同步器AbstractQueuedSynchronizer（AQS）是构建锁或者其他同步组件的基础框架，是实现Lock的基础。它使用了一个volatile修饰的int变量来表示同步状态，并维护了一个FIFO队列来完成资源获取线程的排队。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer </div><div class=\"line\">implements java.io.Serializable &#123;</div><div class=\"line\"> </div><div class=\"line\"> private transient volatile Node head;//头节点</div><div class=\"line\"> private transient volatile Node tail;//尾节点</div><div class=\"line\"> private volatile int state;          //同步状态</div><div class=\"line\"> protected final int getState() &#123;</div><div class=\"line\">      return state;</div><div class=\"line\"> &#125;</div><div class=\"line\">protected final void setState(int newState) &#123;</div><div class=\"line\">    state = newState;</div><div class=\"line\">&#125;</div><div class=\"line\">protected final boolean compareAndSetState(int expect, int update) &#123;</div><div class=\"line\">   return unsafe.compareAndSwapInt(this, stateOffset, expect, update);</div><div class=\"line\">&#125;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>从上面AQS的部分代码可以看到，AQS是一个类，它包含了表示同步状态的state变量（volatile修饰）；维护队列的两个引用头节点head和尾节点tail（volatile修饰）；以及提供了三个主要方法，用来保证同步状态的改变是线程安全的；省略了其他方法。</p>\n<p>那么AQS是如何实现锁的呢？<br><strong>当我们需要实现锁的时候，首先继承AQS并重写指定的方法，然后将AQS子类组合在自定义组件（锁）的实现中，并调用AQS的模板方法，而这些模板方法将会调用我们重写的方法（模板方法模式）</strong>，这就可以达到我们想要的效果。<br><strong>注：重写指定的方法时需要用到AQS中的三个主要方法来对同步状态进行访问或修改。</strong></p>\n<p>AQS中可重写的方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected boolean tryAcquire(int arg) &#123;&#125; //独占式获取</div><div class=\"line\">protected boolean tryRelease(int arg) &#123;&#125; //独占式释放</div><div class=\"line\">protected int tryAcquireShared(int arg) &#123;&#125; //共享式获取</div><div class=\"line\">protected boolean tryReleaseShared(int arg) &#123;&#125; //共享式释放</div><div class=\"line\">protected boolean isHeldExclusively() &#123;&#125; //判断AQS是否被该线程独占</div></pre></td></tr></table></figure></p>\n<p>来看一个独占锁的示例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Mutex implements Lock, java.io.Serializable &#123;</div><div class=\"line\">   // 内部类，自定义同步器，继承AQS</div><div class=\"line\">   private static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">     // 重写方法——是否处于占用状态</div><div class=\"line\">     protected boolean isHeldExclusively() &#123;</div><div class=\"line\">       return getState() == 1;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 重写方法——当状态为0的时候获取锁</div><div class=\"line\">     public boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">       assert acquires == 1; // Otherwise unused</div><div class=\"line\">       if (compareAndSetState(0, 1)) &#123;</div><div class=\"line\">         setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">         return true;</div><div class=\"line\">       &#125;</div><div class=\"line\">       return false;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 重写方法——释放锁，将状态设置为0</div><div class=\"line\">     protected boolean tryRelease(int releases) &#123;</div><div class=\"line\">       assert releases == 1; // Otherwise unused</div><div class=\"line\">       if (getState() == 0) throw new IllegalMonitorStateException();</div><div class=\"line\">       setExclusiveOwnerThread(null);</div><div class=\"line\">       setState(0);</div><div class=\"line\">       return true;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 返回一个Condition，每个condition都包含了一个condition队列</div><div class=\"line\">     Condition newCondition() &#123; return new ConditionObject(); &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   // 仅需要将操作代理到Sync上即可</div><div class=\"line\">   private final Sync sync = new Sync();</div><div class=\"line\">   public void lock()                &#123; sync.acquire(1); &#125;</div><div class=\"line\">   public boolean tryLock()          &#123; return sync.tryAcquire(1); &#125;</div><div class=\"line\">   public void unlock()              &#123; sync.release(1); &#125;</div><div class=\"line\">   public Condition newCondition()   &#123; return sync.newCondition(); &#125;</div><div class=\"line\">   public boolean isLocked()         &#123; return sync.isHeldExclusively(); &#125;</div><div class=\"line\">   public boolean hasQueuedThreads() &#123; return sync.hasQueuedThreads(); &#125;</div><div class=\"line\">   public void lockInterruptibly() throws InterruptedException &#123;</div><div class=\"line\">     sync.acquireInterruptibly(1);</div><div class=\"line\">   &#125;</div><div class=\"line\">   public boolean tryLock(long timeout, TimeUnit unit)</div><div class=\"line\">       throws InterruptedException &#123;</div><div class=\"line\">     return sync.tryAcquireNanos(1, unit.toNanos(timeout));</div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>以上就是利用AQS来实现一个独占锁的示例。<br>Mutex是一个自定义的Lock，它在同一时刻只允许一个线程占有锁。<strong>它定义了一个静态内部类继承自AQS，并重写了相应的方法，实现了独占式的获取释放锁。</strong><br>在重写的tryAcquire方法中，<strong>调用CAS方法改变同步状态，因为是原子操作只有一个线程能完成</strong>；在重写的tryRelease方法中将同步状态设为0。<br>在使用这个Lock时，我们只要调用Mutex的方法，有关同步的细节都由同步器完成。大大降低了自定义并发组件的门槛。</p>\n<h3 id=\"二、AQS的实现原理分析\"><a href=\"#二、AQS的实现原理分析\" class=\"headerlink\" title=\"二、AQS的实现原理分析\"></a>二、AQS的实现原理分析</h3><p>知道了AQS的用法，那么就来分析下它的实现原理。<br><strong>同步器可分为独占式和共享式。</strong> 一般只实现其中一种。这里主要分析独占锁的实现。</p>\n<h4 id=\"同步队列\"><a href=\"#同步队列\" class=\"headerlink\" title=\"同步队列\"></a>同步队列</h4><p>AQS是依靠内部的同步队列来完成同步状态的管理，当前线程获取同步状态失败时，会将当前线程以及等待状态等信息构造成一个节点（node）加入同步队列，并阻塞当前线程。当同步状态释放时，会把首节点中的线程唤醒，使其尝试获取同步状态。</p>\n<h5 id=\"Node类\"><a href=\"#Node类\" class=\"headerlink\" title=\"Node类\"></a>Node类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Node &#123;</div><div class=\"line\">        static final Node SHARED = new Node();</div><div class=\"line\">        static final Node EXCLUSIVE = null;</div><div class=\"line\">        static final int CANCELLED =  1;</div><div class=\"line\">        static final int SIGNAL    = -1;</div><div class=\"line\">        static final int CONDITION = -2;</div><div class=\"line\">        static final int PROPAGATE = -3;</div><div class=\"line\">        volatile int waitStatus; //线程的等待状态（上述）</div><div class=\"line\">        volatile Node prev; //前驱节点</div><div class=\"line\">        volatile Node next; //后继节点</div><div class=\"line\">        volatile Thread thread; //线程引用</div><div class=\"line\">        Node nextWaiter; //等待队列中的后继节点</div><div class=\"line\">        ...</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>Node是AQS维护的静态内部类。用来保存线程引用（失败）、等待状态和前后节点。<br>节点是构成同步队列的基础，同步器拥有首节点（head）和尾节点（tail），获取同步状态失败的线程会成为节点加入队列的尾部。同步器结构如下：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/AQS2.png?imageView2/2/w/500/h/300\" alt=\"image\"></p>\n<p><strong>注：构造节点的过程必须保证线程安全，因为会有多个线程失败。那么它是如何做到的？AQS提供了一个基于CAS的构造尾节点的方法compareAndSetTail，它可以保证节点被正确地加入到队列中。</strong></p>\n<h4 id=\"独占式获取锁\"><a href=\"#独占式获取锁\" class=\"headerlink\" title=\"独占式获取锁\"></a>独占式获取锁</h4><p>来看一看获取锁的流程。<br>调用AQS的acquire（int args）方法获取同步状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquire(int arg) &#123;</div><div class=\"line\">    if (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">            selfInterrupt();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>&amp;&amp;：</strong> 短路与，当第一个为false时不再判断后面条件；第一个为true时还会判断第二个条件；<br><strong>&amp;:</strong>     当第一个为false时，还会判断后面的条件；</p>\n<ul>\n<li>当成功获取锁，即tryAcquire(arg)为true时，!tryAcquire(arg) 为false，跳出if，此时执行selfInterrupt()；</li>\n<li>当没有成功获取锁，即tryAcquire(arg)为false时，!tryAcquire(arg) 为true时，接着判断第二个条件，两个步骤： </li>\n</ul>\n<p>步骤一：  addWaiter(Node.EXCLUSIVE)：将该节点加入同步队列的尾部,返回该节点；<br>步骤二： acquireQueued(Node node, arg))：使该节点以”死循环”的方式获取同步状态；若获取不到则阻塞节点中的线程，被阻塞的线程的唤醒主要依靠前驱节点的出队或阻塞线程被中断来实现。</p>\n<p><strong>分析步骤一：addWaiter方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addWaiter(Node mode) &#123;</div><div class=\"line\">        Node node = new Node(Thread.currentThread(), mode);</div><div class=\"line\">        Node pred = tail;</div><div class=\"line\">        if (pred != null) &#123; //如果有尾节点，快速尝试在尾部添加，减少开销</div><div class=\"line\">            node.prev = pred;</div><div class=\"line\">            if (compareAndSetTail(pred, node)) &#123;</div><div class=\"line\">                pred.next = node;</div><div class=\"line\">                return node;                  //如果已经有尾节点，利用CAS将自己添加为尾节点之后返回</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        enq(node);          //如果没有尾节点，那么进入enq方法</div><div class=\"line\">        return node;</div><div class=\"line\">    &#125;</div><div class=\"line\">private Node enq(final Node node) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            Node t = tail;</div><div class=\"line\">            if (t == null) &#123;        </div><div class=\"line\">                if (compareAndSetHead(new Node()))    //初始化头节点</div><div class=\"line\">                    tail = head;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                node.prev = t;</div><div class=\"line\">                if (compareAndSetTail(t, node)) &#123;   //CAS添加node为尾节点</div><div class=\"line\">                    t.next = node;</div><div class=\"line\">                    return t;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，若队列还未生成即没有尾节点，则进入enq方法中，先创造一个头节点，然后通过死循环<strong>for(;;)</strong> 来保证节点的正确添加，再通过<strong>compareAndSetTail（CAS）</strong> 这个方法确保节点能够被线程安全地添加（可以想象多个线程获取同步失败后，如果不保证线程安全添加，将导致顺序混乱，可能丢失线程），只有从CAS返回后，线程才能返回，否则将不断尝试。<br>这个enq方法将并发的添加节点的请求通过CAS变得串行化了。</p>\n<p><strong>分析步骤二：acquireQueued方法</strong><br>节点进入同步队列后，就进入了一个自旋的过程，每个节点（或线程）都在自省的观察，当获取到同步状态就可以从自旋中退出，否则依旧自旋。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</div><div class=\"line\">        boolean failed = true;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            boolean interrupted = false;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                final Node p = node.predecessor();     //获得前驱节点</div><div class=\"line\">                if (p == head &amp;&amp; tryAcquire(arg)) &#123;  //只有前驱节点是头节点才尝试获取锁，false直接跳出if</div><div class=\"line\">                    setHead(node);        //获取成功，将自己设置为头节点</div><div class=\"line\">                    p.next = null;           // help GC</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return interrupted;       //返回false，回到acquire方法中，不执行selfInterrupt();</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                    parkAndCheckInterrupt())</div><div class=\"line\">                    interrupted = true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            if (failed)</div><div class=\"line\">                cancelAcquire(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void setHead(Node node) &#123;</div><div class=\"line\">        head = node;</div><div class=\"line\">        node.thread = null;</div><div class=\"line\">        node.prev = null;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这段代码主要做了2件事：</p>\n<ol>\n<li><p>判断当前节点的前驱节点是否为头节点并尝试tryAcquire，只有当前驱节点是head的节点才会尝试tryAcquire，如果节点尝试tryAcquire成功，执行setHead方法将当前节点作为head、将当前节点中的thread设置为null、将当前节点的prev设置为null，这保证了链表中头结点永远是一个不带Thread的空节点；</p>\n</li>\n<li><p>如果当前节点的前驱节点不是头节点或者tryAcquire失败，那么执行第13行~第15行的代码，做了两步操作，首先判断在acquie失败后是否应该park（阻塞），其次park并检查中断状态；  </p>\n</li>\n</ol>\n<p>分析下第2件事：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</div><div class=\"line\">        int ws = pred.waitStatus;</div><div class=\"line\">        if (ws == Node.SIGNAL)     //ws=SIGNAL= -1</div><div class=\"line\">            return true;</div><div class=\"line\">        if (ws &gt; 0) &#123;             //ws=CANCELLED= 1</div><div class=\"line\">            do &#123;</div><div class=\"line\">                node.prev = pred = pred.prev;</div><div class=\"line\">            &#125; while (pred.waitStatus &gt; 0);</div><div class=\"line\">            pred.next = node;</div><div class=\"line\">        &#125; else &#123;                 //ws=CONDITION= -2 or PROPAGATE= -3</div><div class=\"line\">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>­这个方法做了以下工作，<br>­每个节点判断它前驱节点的状态：  </p>\n<ol>\n<li>它的前驱节点是SIGNAL状态的，返回true，表示当前节点应当park(阻塞)，执行parkAndCheckInterrupt()，­该方法利用LockSupport的park方法让当前线程阻塞，如下。 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final boolean parkAndCheckInterrupt() &#123;</div><div class=\"line\">        LockSupport.park(this);</div><div class=\"line\">        return Thread.interrupted();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>它的前驱节点的waitStatus&gt;0，即CANCELLED，那么CANCELLED的节点作废，当前节点不断向前找并重新连接为双向队列，直到找到一个前驱节点的waitStats不是CANCELLED的为止。</li>\n<li>它的前驱节点不是SIGNAL状态且waitStatus&lt;=0，即CONDITION或PROPAGATE，此时执行第11行代码，利用CAS机制，将前驱节点的状态更新为SIGNAL状态。</li>\n</ol>\n<hr>\n<h4 id=\"独占式释放锁\"><a href=\"#独占式释放锁\" class=\"headerlink\" title=\"独占式释放锁\"></a>独占式释放锁</h4><p>调用AQS的release方法可以释放同步状态，唤醒后继节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean release(int arg) &#123;</div><div class=\"line\">        if (tryRelease(arg)) &#123;       </div><div class=\"line\">            Node h = head;</div><div class=\"line\">            if (h != null &amp;&amp; h.waitStatus != 0)</div><div class=\"line\">                unparkSuccessor(h);  //调用LockSupport来唤醒处于等待状态的线程</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>tryRelease释放成功，获取到head节点，如果head节点的waitStatus不为0的话，执行unparkSuccessor方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">        int ws = node.waitStatus;</div><div class=\"line\">        if (ws &lt; 0)</div><div class=\"line\">            compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\">        Node s = node.next;</div><div class=\"line\">        if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">            s = null;</div><div class=\"line\">            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">                if (t.waitStatus &lt;= 0)</div><div class=\"line\">                    s = t;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (s != null)</div><div class=\"line\">            LockSupport.unpark(s.thread);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这个方法做了以下工作：  </p>\n<ol>\n<li>头节点的waitStatus&lt;0，将头节点的waitStatus设置为0；</li>\n<li>拿到头节点的下一个节点s，如果s==null或者s的waitStatus&gt;0（被取消了），那么从队列尾巴开始向前寻找一个waitStatus&lt;=0的节点作为后继要唤醒的节点；</li>\n<li>如果拿到了一个不等于null的节点s，就利用LockSupport的unpark方法让它取消阻塞。<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4>获取同步状态时，AQS维护一个同步队列，获取状态失败的线程都会加入到队列中并在队列中进行自旋；移出队列的条件是前驱节点为头节点且获取同步状态成功。<br>释放同步状态时，头节点唤醒它的后继节点。</li>\n</ol>\n"},{"title":"Mysql中查询某个数据库中所有表的字段信息","date":"2017-08-09T09:55:55.000Z","_content":"## 前言 ##\n有时候，需要在数据库中查询一些字段的具体信息，而这些字段又存在于不同的表中，那么我们如何来查询呢？\n\n在每一个数据库链接的information_schema数据库中，存在这样一张表——COLUMNS，它记录了这个数据库中所有表的字段信息。\n## 查询某个特定类型的字段信息##\n如下：查询字段类型为decimal的字段信息\nSql语句：\n\n```\nSELECT\n\tTABLE_NAME,\n\tcolumn_name,\n\tDATA_TYPE,\n\tcolumn_comment\nFROM\n\tinformation_schema. COLUMNS\nWHERE\n\tTABLE_SCHEMA = 'evshare'\nAND DATA_TYPE = 'decimal';\n```\n\n其中\n\n - TABLE_SCHEMA 为数据库的名称（所属的数据库）\n - TABLE_NAME 为表的名称\n - DATA_TYPE 为字段的数据类型\n - column_name  为字段名\n - column_comment 为字段注释\n在Where的条件语句中，可以加入限制条件。\n结果如下：\n\n![1](http://osuskkx7k.bkt.clouddn.com/clipboard1.png) \n\n## 查询注释乱码的字段信息##\n\n如果需要查询数据库中所有乱码的字段信息，那么可以对以上的Sql稍稍改进：\n\n```\nSELECT\n\tTABLE_NAME,\n\tcolumn_name,\n\tDATA_TYPE,\n\tcolumn_comment\nFROM\n\tinformation_schema. COLUMNS\nWHERE\n\tTABLE_SCHEMA = 'evshare'\nAND column_comment LIKE '%?%';\n```\n\n结果如下：可以看到这个evshare数据库中，所有表的乱码字段都已显示\n\n![1](http://osuskkx7k.bkt.clouddn.com/clipboard3.png) \n\n## 总结 ##\n\n<font size=\"4\">以上，就是在Mysql中如何查询某个数据库中所有表的字段信息的过程。","source":"_posts/Mysql中查询某个数据库中所有表的字段信息.md","raw":"---\ntitle: Mysql中查询某个数据库中所有表的字段信息\ndate: 2017-08-09 17:55:55 \ntags: [Mysql,数据库]\ncategories: 技术\n---\n## 前言 ##\n有时候，需要在数据库中查询一些字段的具体信息，而这些字段又存在于不同的表中，那么我们如何来查询呢？\n\n在每一个数据库链接的information_schema数据库中，存在这样一张表——COLUMNS，它记录了这个数据库中所有表的字段信息。\n## 查询某个特定类型的字段信息##\n如下：查询字段类型为decimal的字段信息\nSql语句：\n\n```\nSELECT\n\tTABLE_NAME,\n\tcolumn_name,\n\tDATA_TYPE,\n\tcolumn_comment\nFROM\n\tinformation_schema. COLUMNS\nWHERE\n\tTABLE_SCHEMA = 'evshare'\nAND DATA_TYPE = 'decimal';\n```\n\n其中\n\n - TABLE_SCHEMA 为数据库的名称（所属的数据库）\n - TABLE_NAME 为表的名称\n - DATA_TYPE 为字段的数据类型\n - column_name  为字段名\n - column_comment 为字段注释\n在Where的条件语句中，可以加入限制条件。\n结果如下：\n\n![1](http://osuskkx7k.bkt.clouddn.com/clipboard1.png) \n\n## 查询注释乱码的字段信息##\n\n如果需要查询数据库中所有乱码的字段信息，那么可以对以上的Sql稍稍改进：\n\n```\nSELECT\n\tTABLE_NAME,\n\tcolumn_name,\n\tDATA_TYPE,\n\tcolumn_comment\nFROM\n\tinformation_schema. COLUMNS\nWHERE\n\tTABLE_SCHEMA = 'evshare'\nAND column_comment LIKE '%?%';\n```\n\n结果如下：可以看到这个evshare数据库中，所有表的乱码字段都已显示\n\n![1](http://osuskkx7k.bkt.clouddn.com/clipboard3.png) \n\n## 总结 ##\n\n<font size=\"4\">以上，就是在Mysql中如何查询某个数据库中所有表的字段信息的过程。","slug":"Mysql中查询某个数据库中所有表的字段信息","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt259001l50tc4m3oi9ob","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候，需要在数据库中查询一些字段的具体信息，而这些字段又存在于不同的表中，那么我们如何来查询呢？</p>\n<p>在每一个数据库链接的information_schema数据库中，存在这样一张表——COLUMNS，它记录了这个数据库中所有表的字段信息。</p>\n<h2 id=\"查询某个特定类型的字段信息\"><a href=\"#查询某个特定类型的字段信息\" class=\"headerlink\" title=\"查询某个特定类型的字段信息\"></a>查询某个特定类型的字段信息</h2><p>如下：查询字段类型为decimal的字段信息<br>Sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tTABLE_NAME,</div><div class=\"line\">\tcolumn_name,</div><div class=\"line\">\tDATA_TYPE,</div><div class=\"line\">\tcolumn_comment</div><div class=\"line\">FROM</div><div class=\"line\">\tinformation_schema. COLUMNS</div><div class=\"line\">WHERE</div><div class=\"line\">\tTABLE_SCHEMA = &apos;evshare&apos;</div><div class=\"line\">AND DATA_TYPE = &apos;decimal&apos;;</div></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>TABLE_SCHEMA 为数据库的名称（所属的数据库）</li>\n<li>TABLE_NAME 为表的名称</li>\n<li>DATA_TYPE 为字段的数据类型</li>\n<li>column_name  为字段名</li>\n<li>column_comment 为字段注释<br>在Where的条件语句中，可以加入限制条件。<br>结果如下：</li>\n</ul>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/clipboard1.png\" alt=\"1\"> </p>\n<h2 id=\"查询注释乱码的字段信息\"><a href=\"#查询注释乱码的字段信息\" class=\"headerlink\" title=\"查询注释乱码的字段信息\"></a>查询注释乱码的字段信息</h2><p>如果需要查询数据库中所有乱码的字段信息，那么可以对以上的Sql稍稍改进：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tTABLE_NAME,</div><div class=\"line\">\tcolumn_name,</div><div class=\"line\">\tDATA_TYPE,</div><div class=\"line\">\tcolumn_comment</div><div class=\"line\">FROM</div><div class=\"line\">\tinformation_schema. COLUMNS</div><div class=\"line\">WHERE</div><div class=\"line\">\tTABLE_SCHEMA = &apos;evshare&apos;</div><div class=\"line\">AND column_comment LIKE &apos;%?%&apos;;</div></pre></td></tr></table></figure>\n<p>结果如下：可以看到这个evshare数据库中，所有表的乱码字段都已显示</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/clipboard3.png\" alt=\"1\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><font size=\"4\">以上，就是在Mysql中如何查询某个数据库中所有表的字段信息的过程。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候，需要在数据库中查询一些字段的具体信息，而这些字段又存在于不同的表中，那么我们如何来查询呢？</p>\n<p>在每一个数据库链接的information_schema数据库中，存在这样一张表——COLUMNS，它记录了这个数据库中所有表的字段信息。</p>\n<h2 id=\"查询某个特定类型的字段信息\"><a href=\"#查询某个特定类型的字段信息\" class=\"headerlink\" title=\"查询某个特定类型的字段信息\"></a>查询某个特定类型的字段信息</h2><p>如下：查询字段类型为decimal的字段信息<br>Sql语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tTABLE_NAME,</div><div class=\"line\">\tcolumn_name,</div><div class=\"line\">\tDATA_TYPE,</div><div class=\"line\">\tcolumn_comment</div><div class=\"line\">FROM</div><div class=\"line\">\tinformation_schema. COLUMNS</div><div class=\"line\">WHERE</div><div class=\"line\">\tTABLE_SCHEMA = &apos;evshare&apos;</div><div class=\"line\">AND DATA_TYPE = &apos;decimal&apos;;</div></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>TABLE_SCHEMA 为数据库的名称（所属的数据库）</li>\n<li>TABLE_NAME 为表的名称</li>\n<li>DATA_TYPE 为字段的数据类型</li>\n<li>column_name  为字段名</li>\n<li>column_comment 为字段注释<br>在Where的条件语句中，可以加入限制条件。<br>结果如下：</li>\n</ul>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/clipboard1.png\" alt=\"1\"> </p>\n<h2 id=\"查询注释乱码的字段信息\"><a href=\"#查询注释乱码的字段信息\" class=\"headerlink\" title=\"查询注释乱码的字段信息\"></a>查询注释乱码的字段信息</h2><p>如果需要查询数据库中所有乱码的字段信息，那么可以对以上的Sql稍稍改进：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT</div><div class=\"line\">\tTABLE_NAME,</div><div class=\"line\">\tcolumn_name,</div><div class=\"line\">\tDATA_TYPE,</div><div class=\"line\">\tcolumn_comment</div><div class=\"line\">FROM</div><div class=\"line\">\tinformation_schema. COLUMNS</div><div class=\"line\">WHERE</div><div class=\"line\">\tTABLE_SCHEMA = &apos;evshare&apos;</div><div class=\"line\">AND column_comment LIKE &apos;%?%&apos;;</div></pre></td></tr></table></figure>\n<p>结果如下：可以看到这个evshare数据库中，所有表的乱码字段都已显示</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/clipboard3.png\" alt=\"1\"> </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><font size=\"4\">以上，就是在Mysql中如何查询某个数据库中所有表的字段信息的过程。</font></p>\n"},{"title":"使用Redis的管道（Pipeline）进行批量操作","date":"2017-07-28T06:55:55.000Z","_content":"# Redis管道技术简介\n\n----------\n\nReids是一个cs模式的Tcp服务，类似于http的请求。 当客户端发送一个请求时，服务器处理之后会将结果通过响应报文返回给客户端 。  \n\n那么当需要发送多个请求时，难道每次都要等待请求响应，再发送下一个请求吗？\n  \n当然不是，这里就可以采用Redis的管道技术。  \n\n举个例子，如果说jedis是：request response，request response，...；  \n\n&emsp;&emsp;&emsp;&emsp;&emsp;那么pipeline则是：request request... response response的方式。  \n\n下面，就简单测试一下使用管道的效果。\n\n----------\n\n# 单条插入与批量插入\n这里采用逐条和批量的方式往Redis中写入一些数据。  \n先从Mysql中查出需要的数据，这里大概是300条左右，数据量并不大，但是简单做个测试应该没问题。  \n**单条插入—— Jedis：**\n\n        Jedis jedis = jedisPool.getResource();\n\t\tlong start = System.currentTimeMillis();\n\t\tList<VehicleInfo> vehicleInfos  = vehicleInfoMapper.selectByParam(param);\n\t\tfor (VehicleInfo vehicleInfo : vehicleInfos) {\t\t\n\t\t\t//遍历每个vehicleInfo\n\t\t\tTVehicleRealReportMsg real = new TVehicleRealReportMsg();\n\t\t\tMap<String, String> keysmap = new HashMap<String, String>();\n\t\t\tkeysmap.put(\"vehicleStatus\", real.getVehicleStatus() + \"\");\n\t\t\tkeysmap.put(\"chargeStatus\", real.getChargeStatus() + \"\");\n\t\t\tkeysmap.put(\"longitude\", \"9\");\n\t\t\tkeysmap.put(\"latitude\", \"9\");\n\t\t\tList<Long> list1 = new ArrayList<Long>();\n\t\t\tLong l = 1000L;\n\t\t\tLong l2 = 22222L;\n\t\t\tlist1.add(l);\n\t\t\tlist1.add(l2);\n\t\t\treal.setEngineFaultsList(list1);\n\t\t\tkeysmap.put(\"engineFaultsList\", JSON.toJSONString(list1));\n\t\t\t//单条插入\n\t\t\tjedis.hmset(vehicleInfo.getVehicleSeq()+\"\", keysmap);\n\t\t}\t\n\t\tjedis.close();  \t\t\n\t\tlong end = System.currentTimeMillis(); System.out.println(\"耗时：\"+(end-start) +\"ms\");  \n结果：467ms  \n\n![1](http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E6%9D%A1%E6%8F%92%E5%85%A5.PNG)  \n\n**批量插入—— Pipeline：** \n   \n        Jedis jedis = jedisPool.getResource();\n\t\tPipeline pip = jedis.pipelined();\n\t\tlong start = System.currentTimeMillis();\n\t\tList<VehicleInfo> vehicleInfos  = vehicleInfoMapper.selectByParam(param);\n\t\tfor (VehicleInfo vehicleInfo : vehicleInfos) {\t\t\n\t\t\t//遍历每个vehicleInfo\n\t\t\tTVehicleRealReportMsg real = new TVehicleRealReportMsg();\n\t\t\tMap<String, String> keysmap = new HashMap<String, String>();\n\t\t\tkeysmap.put(\"vehicleStatus\", real.getVehicleStatus() + \"\");\n\t\t\tkeysmap.put(\"chargeStatus\", real.getChargeStatus() + \"\");\n\t\t\tkeysmap.put(\"longitude\", \"9\");\n\t\t\tkeysmap.put(\"latitude\", \"9\");\n\t\t\tList<Long> list1 = new ArrayList<Long>();\n\t\t\tLong l = 1000L;\n\t\t\tLong l2 = 22222L;\n\t\t\tlist1.add(l);\n\t\t\tlist1.add(l2);\n\t\t\treal.setEngineFaultsList(list1);\n\t\t\tkeysmap.put(\"engineFaultsList\", JSON.toJSONString(list1));\n\t\t\t//批量插入\n\t\t\tpip.hmset(vehicleInfo.getVehicleSeq()+\"\", keysmap);\n\t\t}\n\t\tpip.sync();//同步\n\t\tjedis.close();\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start) +\"ms\");  \n\n\n结果：175ms  \n\n![2](http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5.PNG)  \n  \n可以看到使用管道之后的时间为，相比于单条插入的总时间大大减少，性能更优。\n\n----------\n\n# 单条读取和批量读取\n\n**单条读取—— Jedis：**  \n\n        Jedis jedis = jedisPool.getResource();\n\t\tlong start = System.currentTimeMillis();\n\t\t//1.采用redis单条读取\n\t\tList<VehicleInfo> vehicleInfos = vehicleInfoMapper.selectByParam(param);\n\t\tList<Coordinate> list = new ArrayList<Coordinate>();\n\t\tfor(VehicleInfo key: vehicleInfos){\n\t\t\tString hashkey = key.getVehicleSeq()+\"\";\n\t\t\tif(jedis.exists(hashkey+\"\")){\t\t\t\t\t\t\t\n\t\t\tCoordinate coord = new Coordinate();\n\t\t\tcoord.setVehicleSeq(key.getVehicleSeq());\n\t\t\tcoord.setOrgId(key.getOrgId());\t\n\t\t\tcoord.setVehiclemodelseq(key.getVehiclemodelseq());\t\n\t\t\tcoord.setVin(jedis.hget(hashkey, \"vin\"));\n\t\t\tcoord.setLongitude(Long.valueOf(jedis.hget(hashkey, \"longitude\")));\n\t\t\tcoord.setLatitude(Long.valueOf(jedis.hget(hashkey, \"latitude\"))); \t\t\n\t\t\tlist.add(coord);\n\t\t\t}\n\t\t}\t\n\t\tjedis.close();\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start)+\" ms\");\n\t\treturn list;  \n结果： 第一次为1032ms，之后稳定在800~900ms  \n ![3](http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E4%BD%93%E8%AF%BB.PNG)  \n\n**批量读取—— Pipeline**： \n\n        Jedis jedis = jedisPool.getResource();\n\t\tPipeline pip = jedis.pipelined();\n\t\tlong start = System.currentTimeMillis();\n        //2.采用redis管道读取\n\t\tList<VehicleInfo> vehicleInfos = vehicleInfoMapper.selectByParam(param);\n\t\tList<Coordinate> list = new ArrayList<Coordinate>();\n\t\tMap<String,Object> map = new HashMap<String, Object>();//map用来暂存属性\n\t\tMap<String,List<Response<String>>> responses  = new HashMap<String, List<Response<String>>>(vehicleInfos.size());\n\t\tfor(VehicleInfo info: vehicleInfos){\n\t\t\tList<Response<String>> resls = new ArrayList<Response<String>>();\n\t\t\tresls.add(pip.hget(info.getVehicleSeq()+\"\",\"longitude\"));\n\t\t\tresls.add(pip.hget(info.getVehicleSeq()+\"\",\"latitude\"));\n\t\t\tresponses.put(info.getVehicleSeq() + \"\", resls);//得到了一辆车所有的实时数据--300辆车\n\t\t\tmap.put(info.getVehicleSeq()+\"orgId\", info.getOrgId());\n\t\t\tmap.put(info.getVehicleSeq()+\"vin\", info.getVin());\n\t\t\tmap.put(info.getVehicleSeq()+\"vehiclemodelseq\", info.getVehiclemodelseq());\n\t\t}\n\t\tpip.sync(); \n\t\tfor(String k:responses.keySet()){\n\t\t\tCoordinate coord = new Coordinate();\n\t\t\tcoord.setLongitude(Long.valueOf(responses.get(k).get(0).get()));//是get，不是toString\n\t\t\tcoord.setLatitude(Long.valueOf(responses.get(k).get(1).get()));\n\t\t\tcoord.setVehicleSeq(Long.valueOf(k));\n\t\t\tcoord.setOrgId((String) map.get(k+\"orgId\"));\n\t\t\tcoord.setVin((String) map.get(k+\"vin\"));\n\t\t\tcoord.setVehiclemodelseq((Long) map.get(k+\"vehiclemodelseq\"));\n\t\t\tlist.add(coord);\n\t\t}\n\t\tjedis.close();\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start)+\" ms\");\n\t\treturn list;  \n结果： 第一次为200ms，之后维持在30ms左右  \n ![4](http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E8%AF%BB.PNG)  \n\n总时间大概是单条读取总时间的1/5甚至更低，可以看出管道大大提升了效率，具有更好的性能。  \n\n<font size=\"3\">注：使用管道所获取的值的类型是Response<String\\>,因此需要转为String，如下代码片段： </font> \n\n    Map<String,List<Response<String>>> responses  = new HashMap<String, List<Response<String>>>  (vehicleInfos.size());  \n\n\t//转String\n    responses.get(k).get(0).get();  \n\n----------\n\n# 总结\n\n\n- <font size=\"3\">这里仅仅测试了300条数据的操作，已经取得了相对明显的效果。  \n- 对于大量数据的操作，使用Redis管道可以大大提升性能和效率。</font>","source":"_posts/Redis—Pipline.md","raw":"---\ntitle: 使用Redis的管道（Pipeline）进行批量操作\ndate: 2017-07-28 14:55:55 \ntags: [Redis,Pipeline,批量，缓存]\ncategories: 技术\n---\n# Redis管道技术简介\n\n----------\n\nReids是一个cs模式的Tcp服务，类似于http的请求。 当客户端发送一个请求时，服务器处理之后会将结果通过响应报文返回给客户端 。  \n\n那么当需要发送多个请求时，难道每次都要等待请求响应，再发送下一个请求吗？\n  \n当然不是，这里就可以采用Redis的管道技术。  \n\n举个例子，如果说jedis是：request response，request response，...；  \n\n&emsp;&emsp;&emsp;&emsp;&emsp;那么pipeline则是：request request... response response的方式。  \n\n下面，就简单测试一下使用管道的效果。\n\n----------\n\n# 单条插入与批量插入\n这里采用逐条和批量的方式往Redis中写入一些数据。  \n先从Mysql中查出需要的数据，这里大概是300条左右，数据量并不大，但是简单做个测试应该没问题。  \n**单条插入—— Jedis：**\n\n        Jedis jedis = jedisPool.getResource();\n\t\tlong start = System.currentTimeMillis();\n\t\tList<VehicleInfo> vehicleInfos  = vehicleInfoMapper.selectByParam(param);\n\t\tfor (VehicleInfo vehicleInfo : vehicleInfos) {\t\t\n\t\t\t//遍历每个vehicleInfo\n\t\t\tTVehicleRealReportMsg real = new TVehicleRealReportMsg();\n\t\t\tMap<String, String> keysmap = new HashMap<String, String>();\n\t\t\tkeysmap.put(\"vehicleStatus\", real.getVehicleStatus() + \"\");\n\t\t\tkeysmap.put(\"chargeStatus\", real.getChargeStatus() + \"\");\n\t\t\tkeysmap.put(\"longitude\", \"9\");\n\t\t\tkeysmap.put(\"latitude\", \"9\");\n\t\t\tList<Long> list1 = new ArrayList<Long>();\n\t\t\tLong l = 1000L;\n\t\t\tLong l2 = 22222L;\n\t\t\tlist1.add(l);\n\t\t\tlist1.add(l2);\n\t\t\treal.setEngineFaultsList(list1);\n\t\t\tkeysmap.put(\"engineFaultsList\", JSON.toJSONString(list1));\n\t\t\t//单条插入\n\t\t\tjedis.hmset(vehicleInfo.getVehicleSeq()+\"\", keysmap);\n\t\t}\t\n\t\tjedis.close();  \t\t\n\t\tlong end = System.currentTimeMillis(); System.out.println(\"耗时：\"+(end-start) +\"ms\");  \n结果：467ms  \n\n![1](http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E6%9D%A1%E6%8F%92%E5%85%A5.PNG)  \n\n**批量插入—— Pipeline：** \n   \n        Jedis jedis = jedisPool.getResource();\n\t\tPipeline pip = jedis.pipelined();\n\t\tlong start = System.currentTimeMillis();\n\t\tList<VehicleInfo> vehicleInfos  = vehicleInfoMapper.selectByParam(param);\n\t\tfor (VehicleInfo vehicleInfo : vehicleInfos) {\t\t\n\t\t\t//遍历每个vehicleInfo\n\t\t\tTVehicleRealReportMsg real = new TVehicleRealReportMsg();\n\t\t\tMap<String, String> keysmap = new HashMap<String, String>();\n\t\t\tkeysmap.put(\"vehicleStatus\", real.getVehicleStatus() + \"\");\n\t\t\tkeysmap.put(\"chargeStatus\", real.getChargeStatus() + \"\");\n\t\t\tkeysmap.put(\"longitude\", \"9\");\n\t\t\tkeysmap.put(\"latitude\", \"9\");\n\t\t\tList<Long> list1 = new ArrayList<Long>();\n\t\t\tLong l = 1000L;\n\t\t\tLong l2 = 22222L;\n\t\t\tlist1.add(l);\n\t\t\tlist1.add(l2);\n\t\t\treal.setEngineFaultsList(list1);\n\t\t\tkeysmap.put(\"engineFaultsList\", JSON.toJSONString(list1));\n\t\t\t//批量插入\n\t\t\tpip.hmset(vehicleInfo.getVehicleSeq()+\"\", keysmap);\n\t\t}\n\t\tpip.sync();//同步\n\t\tjedis.close();\t\t\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start) +\"ms\");  \n\n\n结果：175ms  \n\n![2](http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5.PNG)  \n  \n可以看到使用管道之后的时间为，相比于单条插入的总时间大大减少，性能更优。\n\n----------\n\n# 单条读取和批量读取\n\n**单条读取—— Jedis：**  \n\n        Jedis jedis = jedisPool.getResource();\n\t\tlong start = System.currentTimeMillis();\n\t\t//1.采用redis单条读取\n\t\tList<VehicleInfo> vehicleInfos = vehicleInfoMapper.selectByParam(param);\n\t\tList<Coordinate> list = new ArrayList<Coordinate>();\n\t\tfor(VehicleInfo key: vehicleInfos){\n\t\t\tString hashkey = key.getVehicleSeq()+\"\";\n\t\t\tif(jedis.exists(hashkey+\"\")){\t\t\t\t\t\t\t\n\t\t\tCoordinate coord = new Coordinate();\n\t\t\tcoord.setVehicleSeq(key.getVehicleSeq());\n\t\t\tcoord.setOrgId(key.getOrgId());\t\n\t\t\tcoord.setVehiclemodelseq(key.getVehiclemodelseq());\t\n\t\t\tcoord.setVin(jedis.hget(hashkey, \"vin\"));\n\t\t\tcoord.setLongitude(Long.valueOf(jedis.hget(hashkey, \"longitude\")));\n\t\t\tcoord.setLatitude(Long.valueOf(jedis.hget(hashkey, \"latitude\"))); \t\t\n\t\t\tlist.add(coord);\n\t\t\t}\n\t\t}\t\n\t\tjedis.close();\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start)+\" ms\");\n\t\treturn list;  \n结果： 第一次为1032ms，之后稳定在800~900ms  \n ![3](http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E4%BD%93%E8%AF%BB.PNG)  \n\n**批量读取—— Pipeline**： \n\n        Jedis jedis = jedisPool.getResource();\n\t\tPipeline pip = jedis.pipelined();\n\t\tlong start = System.currentTimeMillis();\n        //2.采用redis管道读取\n\t\tList<VehicleInfo> vehicleInfos = vehicleInfoMapper.selectByParam(param);\n\t\tList<Coordinate> list = new ArrayList<Coordinate>();\n\t\tMap<String,Object> map = new HashMap<String, Object>();//map用来暂存属性\n\t\tMap<String,List<Response<String>>> responses  = new HashMap<String, List<Response<String>>>(vehicleInfos.size());\n\t\tfor(VehicleInfo info: vehicleInfos){\n\t\t\tList<Response<String>> resls = new ArrayList<Response<String>>();\n\t\t\tresls.add(pip.hget(info.getVehicleSeq()+\"\",\"longitude\"));\n\t\t\tresls.add(pip.hget(info.getVehicleSeq()+\"\",\"latitude\"));\n\t\t\tresponses.put(info.getVehicleSeq() + \"\", resls);//得到了一辆车所有的实时数据--300辆车\n\t\t\tmap.put(info.getVehicleSeq()+\"orgId\", info.getOrgId());\n\t\t\tmap.put(info.getVehicleSeq()+\"vin\", info.getVin());\n\t\t\tmap.put(info.getVehicleSeq()+\"vehiclemodelseq\", info.getVehiclemodelseq());\n\t\t}\n\t\tpip.sync(); \n\t\tfor(String k:responses.keySet()){\n\t\t\tCoordinate coord = new Coordinate();\n\t\t\tcoord.setLongitude(Long.valueOf(responses.get(k).get(0).get()));//是get，不是toString\n\t\t\tcoord.setLatitude(Long.valueOf(responses.get(k).get(1).get()));\n\t\t\tcoord.setVehicleSeq(Long.valueOf(k));\n\t\t\tcoord.setOrgId((String) map.get(k+\"orgId\"));\n\t\t\tcoord.setVin((String) map.get(k+\"vin\"));\n\t\t\tcoord.setVehiclemodelseq((Long) map.get(k+\"vehiclemodelseq\"));\n\t\t\tlist.add(coord);\n\t\t}\n\t\tjedis.close();\n\t\tlong end = System.currentTimeMillis();\n\t\tSystem.out.println(\"耗时：\"+(end-start)+\" ms\");\n\t\treturn list;  \n结果： 第一次为200ms，之后维持在30ms左右  \n ![4](http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E8%AF%BB.PNG)  \n\n总时间大概是单条读取总时间的1/5甚至更低，可以看出管道大大提升了效率，具有更好的性能。  \n\n<font size=\"3\">注：使用管道所获取的值的类型是Response<String\\>,因此需要转为String，如下代码片段： </font> \n\n    Map<String,List<Response<String>>> responses  = new HashMap<String, List<Response<String>>>  (vehicleInfos.size());  \n\n\t//转String\n    responses.get(k).get(0).get();  \n\n----------\n\n# 总结\n\n\n- <font size=\"3\">这里仅仅测试了300条数据的操作，已经取得了相对明显的效果。  \n- 对于大量数据的操作，使用Redis管道可以大大提升性能和效率。</font>","slug":"Redis—Pipline","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt25p001p50tct7wdfn54","content":"<h1 id=\"Redis管道技术简介\"><a href=\"#Redis管道技术简介\" class=\"headerlink\" title=\"Redis管道技术简介\"></a>Redis管道技术简介</h1><hr>\n<p>Reids是一个cs模式的Tcp服务，类似于http的请求。 当客户端发送一个请求时，服务器处理之后会将结果通过响应报文返回给客户端 。  </p>\n<p>那么当需要发送多个请求时，难道每次都要等待请求响应，再发送下一个请求吗？</p>\n<p>当然不是，这里就可以采用Redis的管道技术。  </p>\n<p>举个例子，如果说jedis是：request response，request response，…；  </p>\n<p>&emsp;&emsp;&emsp;&emsp;&emsp;那么pipeline则是：request request… response response的方式。  </p>\n<p>下面，就简单测试一下使用管道的效果。</p>\n<hr>\n<h1 id=\"单条插入与批量插入\"><a href=\"#单条插入与批量插入\" class=\"headerlink\" title=\"单条插入与批量插入\"></a>单条插入与批量插入</h1><p>这里采用逐条和批量的方式往Redis中写入一些数据。<br>先从Mysql中查出需要的数据，这里大概是300条左右，数据量并不大，但是简单做个测试应该没问题。<br><strong>单条插入—— Jedis：</strong></p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nlong start = System.currentTimeMillis();\nList&lt;VehicleInfo&gt; vehicleInfos  = vehicleInfoMapper.selectByParam(param);\nfor (VehicleInfo vehicleInfo : vehicleInfos) {        \n    //遍历每个vehicleInfo\n    TVehicleRealReportMsg real = new TVehicleRealReportMsg();\n    Map&lt;String, String&gt; keysmap = new HashMap&lt;String, String&gt;();\n    keysmap.put(&quot;vehicleStatus&quot;, real.getVehicleStatus() + &quot;&quot;);\n    keysmap.put(&quot;chargeStatus&quot;, real.getChargeStatus() + &quot;&quot;);\n    keysmap.put(&quot;longitude&quot;, &quot;9&quot;);\n    keysmap.put(&quot;latitude&quot;, &quot;9&quot;);\n    List&lt;Long&gt; list1 = new ArrayList&lt;Long&gt;();\n    Long l = 1000L;\n    Long l2 = 22222L;\n    list1.add(l);\n    list1.add(l2);\n    real.setEngineFaultsList(list1);\n    keysmap.put(&quot;engineFaultsList&quot;, JSON.toJSONString(list1));\n    //单条插入\n    jedis.hmset(vehicleInfo.getVehicleSeq()+&quot;&quot;, keysmap);\n}    \njedis.close();          \nlong end = System.currentTimeMillis(); System.out.println(&quot;耗时：&quot;+(end-start) +&quot;ms&quot;);  \n</code></pre><p>结果：467ms  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E6%9D%A1%E6%8F%92%E5%85%A5.PNG\" alt=\"1\">  </p>\n<p><strong>批量插入—— Pipeline：</strong> </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nPipeline pip = jedis.pipelined();\nlong start = System.currentTimeMillis();\nList&lt;VehicleInfo&gt; vehicleInfos  = vehicleInfoMapper.selectByParam(param);\nfor (VehicleInfo vehicleInfo : vehicleInfos) {        \n    //遍历每个vehicleInfo\n    TVehicleRealReportMsg real = new TVehicleRealReportMsg();\n    Map&lt;String, String&gt; keysmap = new HashMap&lt;String, String&gt;();\n    keysmap.put(&quot;vehicleStatus&quot;, real.getVehicleStatus() + &quot;&quot;);\n    keysmap.put(&quot;chargeStatus&quot;, real.getChargeStatus() + &quot;&quot;);\n    keysmap.put(&quot;longitude&quot;, &quot;9&quot;);\n    keysmap.put(&quot;latitude&quot;, &quot;9&quot;);\n    List&lt;Long&gt; list1 = new ArrayList&lt;Long&gt;();\n    Long l = 1000L;\n    Long l2 = 22222L;\n    list1.add(l);\n    list1.add(l2);\n    real.setEngineFaultsList(list1);\n    keysmap.put(&quot;engineFaultsList&quot;, JSON.toJSONString(list1));\n    //批量插入\n    pip.hmset(vehicleInfo.getVehicleSeq()+&quot;&quot;, keysmap);\n}\npip.sync();//同步\njedis.close();        \nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start) +&quot;ms&quot;);  \n</code></pre><p>结果：175ms  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5.PNG\" alt=\"2\">  </p>\n<p>可以看到使用管道之后的时间为，相比于单条插入的总时间大大减少，性能更优。</p>\n<hr>\n<h1 id=\"单条读取和批量读取\"><a href=\"#单条读取和批量读取\" class=\"headerlink\" title=\"单条读取和批量读取\"></a>单条读取和批量读取</h1><p><strong>单条读取—— Jedis：</strong>  </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nlong start = System.currentTimeMillis();\n//1.采用redis单条读取\nList&lt;VehicleInfo&gt; vehicleInfos = vehicleInfoMapper.selectByParam(param);\nList&lt;Coordinate&gt; list = new ArrayList&lt;Coordinate&gt;();\nfor(VehicleInfo key: vehicleInfos){\n    String hashkey = key.getVehicleSeq()+&quot;&quot;;\n    if(jedis.exists(hashkey+&quot;&quot;)){                            \n    Coordinate coord = new Coordinate();\n    coord.setVehicleSeq(key.getVehicleSeq());\n    coord.setOrgId(key.getOrgId());    \n    coord.setVehiclemodelseq(key.getVehiclemodelseq());    \n    coord.setVin(jedis.hget(hashkey, &quot;vin&quot;));\n    coord.setLongitude(Long.valueOf(jedis.hget(hashkey, &quot;longitude&quot;)));\n    coord.setLatitude(Long.valueOf(jedis.hget(hashkey, &quot;latitude&quot;)));         \n    list.add(coord);\n    }\n}    \njedis.close();\nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start)+&quot; ms&quot;);\nreturn list;  \n</code></pre><p>结果： 第一次为1032ms，之后稳定在800~900ms<br> <img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E4%BD%93%E8%AF%BB.PNG\" alt=\"3\">  </p>\n<p><strong>批量读取—— Pipeline</strong>： </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nPipeline pip = jedis.pipelined();\nlong start = System.currentTimeMillis();\n//2.采用redis管道读取\nList&lt;VehicleInfo&gt; vehicleInfos = vehicleInfoMapper.selectByParam(param);\nList&lt;Coordinate&gt; list = new ArrayList&lt;Coordinate&gt;();\nMap&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();//map用来暂存属性\nMap&lt;String,List&lt;Response&lt;String&gt;&gt;&gt; responses  = new HashMap&lt;String, List&lt;Response&lt;String&gt;&gt;&gt;(vehicleInfos.size());\nfor(VehicleInfo info: vehicleInfos){\n    List&lt;Response&lt;String&gt;&gt; resls = new ArrayList&lt;Response&lt;String&gt;&gt;();\n    resls.add(pip.hget(info.getVehicleSeq()+&quot;&quot;,&quot;longitude&quot;));\n    resls.add(pip.hget(info.getVehicleSeq()+&quot;&quot;,&quot;latitude&quot;));\n    responses.put(info.getVehicleSeq() + &quot;&quot;, resls);//得到了一辆车所有的实时数据--300辆车\n    map.put(info.getVehicleSeq()+&quot;orgId&quot;, info.getOrgId());\n    map.put(info.getVehicleSeq()+&quot;vin&quot;, info.getVin());\n    map.put(info.getVehicleSeq()+&quot;vehiclemodelseq&quot;, info.getVehiclemodelseq());\n}\npip.sync(); \nfor(String k:responses.keySet()){\n    Coordinate coord = new Coordinate();\n    coord.setLongitude(Long.valueOf(responses.get(k).get(0).get()));//是get，不是toString\n    coord.setLatitude(Long.valueOf(responses.get(k).get(1).get()));\n    coord.setVehicleSeq(Long.valueOf(k));\n    coord.setOrgId((String) map.get(k+&quot;orgId&quot;));\n    coord.setVin((String) map.get(k+&quot;vin&quot;));\n    coord.setVehiclemodelseq((Long) map.get(k+&quot;vehiclemodelseq&quot;));\n    list.add(coord);\n}\njedis.close();\nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start)+&quot; ms&quot;);\nreturn list;  \n</code></pre><p>结果： 第一次为200ms，之后维持在30ms左右<br> <img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E8%AF%BB.PNG\" alt=\"4\">  </p>\n<p>总时间大概是单条读取总时间的1/5甚至更低，可以看出管道大大提升了效率，具有更好的性能。  </p>\n<font size=\"3\">注：使用管道所获取的值的类型是Response<string\\>,因此需要转为String，如下代码片段： </string\\></font> \n\n<pre><code>Map&lt;String,List&lt;Response&lt;String&gt;&gt;&gt; responses  = new HashMap&lt;String, List&lt;Response&lt;String&gt;&gt;&gt;  (vehicleInfos.size());  \n\n//转String\nresponses.get(k).get(0).get();  \n</code></pre><hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li><font size=\"3\">这里仅仅测试了300条数据的操作，已经取得了相对明显的效果。  </font></li>\n<li>对于大量数据的操作，使用Redis管道可以大大提升性能和效率。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redis管道技术简介\"><a href=\"#Redis管道技术简介\" class=\"headerlink\" title=\"Redis管道技术简介\"></a>Redis管道技术简介</h1><hr>\n<p>Reids是一个cs模式的Tcp服务，类似于http的请求。 当客户端发送一个请求时，服务器处理之后会将结果通过响应报文返回给客户端 。  </p>\n<p>那么当需要发送多个请求时，难道每次都要等待请求响应，再发送下一个请求吗？</p>\n<p>当然不是，这里就可以采用Redis的管道技术。  </p>\n<p>举个例子，如果说jedis是：request response，request response，…；  </p>\n<p>&emsp;&emsp;&emsp;&emsp;&emsp;那么pipeline则是：request request… response response的方式。  </p>\n<p>下面，就简单测试一下使用管道的效果。</p>\n<hr>\n<h1 id=\"单条插入与批量插入\"><a href=\"#单条插入与批量插入\" class=\"headerlink\" title=\"单条插入与批量插入\"></a>单条插入与批量插入</h1><p>这里采用逐条和批量的方式往Redis中写入一些数据。<br>先从Mysql中查出需要的数据，这里大概是300条左右，数据量并不大，但是简单做个测试应该没问题。<br><strong>单条插入—— Jedis：</strong></p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nlong start = System.currentTimeMillis();\nList&lt;VehicleInfo&gt; vehicleInfos  = vehicleInfoMapper.selectByParam(param);\nfor (VehicleInfo vehicleInfo : vehicleInfos) {        \n    //遍历每个vehicleInfo\n    TVehicleRealReportMsg real = new TVehicleRealReportMsg();\n    Map&lt;String, String&gt; keysmap = new HashMap&lt;String, String&gt;();\n    keysmap.put(&quot;vehicleStatus&quot;, real.getVehicleStatus() + &quot;&quot;);\n    keysmap.put(&quot;chargeStatus&quot;, real.getChargeStatus() + &quot;&quot;);\n    keysmap.put(&quot;longitude&quot;, &quot;9&quot;);\n    keysmap.put(&quot;latitude&quot;, &quot;9&quot;);\n    List&lt;Long&gt; list1 = new ArrayList&lt;Long&gt;();\n    Long l = 1000L;\n    Long l2 = 22222L;\n    list1.add(l);\n    list1.add(l2);\n    real.setEngineFaultsList(list1);\n    keysmap.put(&quot;engineFaultsList&quot;, JSON.toJSONString(list1));\n    //单条插入\n    jedis.hmset(vehicleInfo.getVehicleSeq()+&quot;&quot;, keysmap);\n}    \njedis.close();          \nlong end = System.currentTimeMillis(); System.out.println(&quot;耗时：&quot;+(end-start) +&quot;ms&quot;);  \n</code></pre><p>结果：467ms  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E6%9D%A1%E6%8F%92%E5%85%A5.PNG\" alt=\"1\">  </p>\n<p><strong>批量插入—— Pipeline：</strong> </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nPipeline pip = jedis.pipelined();\nlong start = System.currentTimeMillis();\nList&lt;VehicleInfo&gt; vehicleInfos  = vehicleInfoMapper.selectByParam(param);\nfor (VehicleInfo vehicleInfo : vehicleInfos) {        \n    //遍历每个vehicleInfo\n    TVehicleRealReportMsg real = new TVehicleRealReportMsg();\n    Map&lt;String, String&gt; keysmap = new HashMap&lt;String, String&gt;();\n    keysmap.put(&quot;vehicleStatus&quot;, real.getVehicleStatus() + &quot;&quot;);\n    keysmap.put(&quot;chargeStatus&quot;, real.getChargeStatus() + &quot;&quot;);\n    keysmap.put(&quot;longitude&quot;, &quot;9&quot;);\n    keysmap.put(&quot;latitude&quot;, &quot;9&quot;);\n    List&lt;Long&gt; list1 = new ArrayList&lt;Long&gt;();\n    Long l = 1000L;\n    Long l2 = 22222L;\n    list1.add(l);\n    list1.add(l2);\n    real.setEngineFaultsList(list1);\n    keysmap.put(&quot;engineFaultsList&quot;, JSON.toJSONString(list1));\n    //批量插入\n    pip.hmset(vehicleInfo.getVehicleSeq()+&quot;&quot;, keysmap);\n}\npip.sync();//同步\njedis.close();        \nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start) +&quot;ms&quot;);  \n</code></pre><p>结果：175ms  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5.PNG\" alt=\"2\">  </p>\n<p>可以看到使用管道之后的时间为，相比于单条插入的总时间大大减少，性能更优。</p>\n<hr>\n<h1 id=\"单条读取和批量读取\"><a href=\"#单条读取和批量读取\" class=\"headerlink\" title=\"单条读取和批量读取\"></a>单条读取和批量读取</h1><p><strong>单条读取—— Jedis：</strong>  </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nlong start = System.currentTimeMillis();\n//1.采用redis单条读取\nList&lt;VehicleInfo&gt; vehicleInfos = vehicleInfoMapper.selectByParam(param);\nList&lt;Coordinate&gt; list = new ArrayList&lt;Coordinate&gt;();\nfor(VehicleInfo key: vehicleInfos){\n    String hashkey = key.getVehicleSeq()+&quot;&quot;;\n    if(jedis.exists(hashkey+&quot;&quot;)){                            \n    Coordinate coord = new Coordinate();\n    coord.setVehicleSeq(key.getVehicleSeq());\n    coord.setOrgId(key.getOrgId());    \n    coord.setVehiclemodelseq(key.getVehiclemodelseq());    \n    coord.setVin(jedis.hget(hashkey, &quot;vin&quot;));\n    coord.setLongitude(Long.valueOf(jedis.hget(hashkey, &quot;longitude&quot;)));\n    coord.setLatitude(Long.valueOf(jedis.hget(hashkey, &quot;latitude&quot;)));         \n    list.add(coord);\n    }\n}    \njedis.close();\nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start)+&quot; ms&quot;);\nreturn list;  \n</code></pre><p>结果： 第一次为1032ms，之后稳定在800~900ms<br> <img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%8D%95%E4%BD%93%E8%AF%BB.PNG\" alt=\"3\">  </p>\n<p><strong>批量读取—— Pipeline</strong>： </p>\n<pre><code>Jedis jedis = jedisPool.getResource();\nPipeline pip = jedis.pipelined();\nlong start = System.currentTimeMillis();\n//2.采用redis管道读取\nList&lt;VehicleInfo&gt; vehicleInfos = vehicleInfoMapper.selectByParam(param);\nList&lt;Coordinate&gt; list = new ArrayList&lt;Coordinate&gt;();\nMap&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();//map用来暂存属性\nMap&lt;String,List&lt;Response&lt;String&gt;&gt;&gt; responses  = new HashMap&lt;String, List&lt;Response&lt;String&gt;&gt;&gt;(vehicleInfos.size());\nfor(VehicleInfo info: vehicleInfos){\n    List&lt;Response&lt;String&gt;&gt; resls = new ArrayList&lt;Response&lt;String&gt;&gt;();\n    resls.add(pip.hget(info.getVehicleSeq()+&quot;&quot;,&quot;longitude&quot;));\n    resls.add(pip.hget(info.getVehicleSeq()+&quot;&quot;,&quot;latitude&quot;));\n    responses.put(info.getVehicleSeq() + &quot;&quot;, resls);//得到了一辆车所有的实时数据--300辆车\n    map.put(info.getVehicleSeq()+&quot;orgId&quot;, info.getOrgId());\n    map.put(info.getVehicleSeq()+&quot;vin&quot;, info.getVin());\n    map.put(info.getVehicleSeq()+&quot;vehiclemodelseq&quot;, info.getVehiclemodelseq());\n}\npip.sync(); \nfor(String k:responses.keySet()){\n    Coordinate coord = new Coordinate();\n    coord.setLongitude(Long.valueOf(responses.get(k).get(0).get()));//是get，不是toString\n    coord.setLatitude(Long.valueOf(responses.get(k).get(1).get()));\n    coord.setVehicleSeq(Long.valueOf(k));\n    coord.setOrgId((String) map.get(k+&quot;orgId&quot;));\n    coord.setVin((String) map.get(k+&quot;vin&quot;));\n    coord.setVehiclemodelseq((Long) map.get(k+&quot;vehiclemodelseq&quot;));\n    list.add(coord);\n}\njedis.close();\nlong end = System.currentTimeMillis();\nSystem.out.println(&quot;耗时：&quot;+(end-start)+&quot; ms&quot;);\nreturn list;  \n</code></pre><p>结果： 第一次为200ms，之后维持在30ms左右<br> <img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%89%B9%E9%87%8F%E8%AF%BB.PNG\" alt=\"4\">  </p>\n<p>总时间大概是单条读取总时间的1/5甚至更低，可以看出管道大大提升了效率，具有更好的性能。  </p>\n<font size=\"3\">注：使用管道所获取的值的类型是Response<string\\>,因此需要转为String，如下代码片段： </string\\></font> \n\n<pre><code>Map&lt;String,List&lt;Response&lt;String&gt;&gt;&gt; responses  = new HashMap&lt;String, List&lt;Response&lt;String&gt;&gt;&gt;  (vehicleInfos.size());  \n\n//转String\nresponses.get(k).get(0).get();  \n</code></pre><hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li><font size=\"3\">这里仅仅测试了300条数据的操作，已经取得了相对明显的效果。  </font></li>\n<li>对于大量数据的操作，使用Redis管道可以大大提升性能和效率。</li>\n</ul>\n"},{"title":"ReentrantReadWriteLock可重入读写锁","date":"2017-10-28T09:48:18.000Z","_content":"### 一、ReentrantReadWriteLock的概念\n#### 介绍\n前面提到的锁（独占锁、ReentrantLock）等都是排他锁，这些锁在同一时刻只允许一个线程访问。  \n而**读写锁在同一时刻可以允许多个读线程访问，但在写线程访问时，所有读线程和其他写线程都阻塞。**\n\n\nReadWriteLock并不是继承自Lock接口，而是一个单独的接口。\n\n```\npublic interface ReadWriteLock {\n    Lock readLock();\n    Lock writeLock();\n}\n```\nReentrantReadWriteLock则是这个接口的实现。通过readLock()和writeLock()方法可分别获得一个ReadLock实例和一个WriteLock实例，这两个实例实现了Lock接口。\n因此，我们可以调用Lock接口的相关方法来完成锁的语义。\n\n```\nReentrantReadWriteLock rw = new ReentrantReadWriteLock();\nLock r = rw.readLock();\nLock w = rw.writeLock();\n...\n```\n#### 特性：\n1. **公平性：同样有公平锁和非公平锁；**  \n\n2. **重入性：读锁和写锁都支持重入（最大65535）；**\n3. **锁降级：获取写锁之后，获取读锁，释放写锁，保留读锁；（按顺序）**\n\n### 二、ReentrantReadWriteLock的实现原理\n\nReentrantReadWriteLock与ReentrantLock一样，锁的语义的实现依旧是依靠Sync（继承自AQS），它的读锁、写锁的实现原理如下：\n- **读锁：AQS共享锁**\n- **写锁：AQS独占锁**\n\n\n#### 读写状态\n读写锁的实现同样是依赖AQS来实现同步功能。\n那么它的读写状态如何表示呢？\n同样是**使用一个int型的变量**表示，将这个变量“按位切割”成两部分，**高16位表示读，低16位表示写**。这样我们就能通过位运算确定它的读写状态。（如下图）  \n\n![（图）](http://osuskkx7k.bkt.clouddn.com/duxiesuo.jpg)  \n\n如果已知整体同步状态为S，那么：\n- **写状态：S & 0x0000FFFF**（将高16位变0，抹去）\n- **读状态：S>>>16** （无符号补0右移16位）  \n\n**注：当写状态为0，S不为0时，表示读状态不为0，读锁被获取。**\n\n\n\n#### 写锁的获取和释放\n\n写锁是独占锁，获取时调用Sync中的tryAcquire()方法：\n```\nprotected final boolean tryAcquire(int acquires) {\n            Thread current = Thread.currentThread();\n            //获取状态\n            int c = getState();\n            //获取写状态\n            int w = exclusiveCount(c);\n            if (c != 0) {\n                //写状态为0表示存在读线程，获取失败\n                //或当前线程不是获取写锁的线程，获取失败\n                if (w == 0 || current != getExclusiveOwnerThread())\n                    return false;\n                //超过写锁总数量\n                if (w + exclusiveCount(acquires) > MAX_COUNT)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //当前线程是获取写锁的线程，重进入，获取成功\n                setState(c + acquires);\n                return true;\n            }\n            //是否需要阻塞\n            if (writerShouldBlock() ||\n                !compareAndSetState(c, c + acquires))\n                return false;\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n```\n写锁的获取过程如代码中注释所示。\n只有在以下情况才能获取写锁：\n- **不存在读锁或当前线程是已经获取写锁的线程（可重入）**\n\n---\n写锁的释放调用的是Sync的tryRelease()方法：\n\n```\nprotected final boolean tryRelease(int releases) {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            int nextc = getState() - releases;\n            boolean free = exclusiveCount(nextc) == 0;\n            if (free)\n                setExclusiveOwnerThread(null);\n            setState(nextc);\n            return free;\n        }\n```\n写锁的释放与重入锁的释放过程类似，每次释放时将写状态减少，直到写锁状态为0时，表示写锁释放。\n\n---\n\n#### 读锁的获取和释放\n读锁是共享锁，调用的是Sync的tryAcquireShared()方法：\n\n```\nprotected final int tryAcquireShared(int unused) {\n            Thread current = Thread.currentThread();\n            int c = getState(); //获取状态\n            //写锁不为0  && 且获取写锁的线程不是当前线程\n            //直接失败\n            if (exclusiveCount(c) != 0 &&\n                getExclusiveOwnerThread() != current) \n                return -1;\n            //获取读锁\n            int r = sharedCount(c);\n            //readerShouldBlock()：读锁是否要等待（公平or非公平）\n            // r < MAX_COUNT：读锁小于最大值（65535）\n            //compareAndSetState(c, c + SHARED_UNIT))：CAS操作成功\n            if (!readerShouldBlock() &&\n                r < MAX_COUNT &&\n                compareAndSetState(c, c + SHARED_UNIT)) {\n                //r == 0：只有一个读锁（A），计数+1\n                if (r == 0) {\n                    firstReader = current;\n                    firstReaderHoldCount = 1;\n                //持有读锁的线程（A）重进入，计数++\n                } else if (firstReader == current) {\n                    firstReaderHoldCount++;\n                } else {\n                //另一个线程（B）进入，此时找到缓存的rh，将计数++；\n                    HoldCounter rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != getThreadId(current))\n                        cachedHoldCounter = rh = readHolds.get();\n                    else if (rh.count == 0)\n                        readHolds.set(rh);\n                    rh.count++;\n                }\n                return 1;\n            }\n            //循环尝试\n            return fullTryAcquireShared(current);\n        }\n```\n获取锁的过程如注释所示。  \n如果不满足第二个if语句中的判断，比如读锁需要阻塞，则会进入fullTryAcquireShared（current）方法，**该方法循环不断尝试修改状态直到成功或被写入锁占有。**\n    \n\n```\nfinal int fullTryAcquireShared(Thread current) {\n            HoldCounter rh = null;\n            for (;;) {\n                int c = getState();\n                //写锁存在但不是当前线程，直接失败\n                if (exclusiveCount(c) != 0) {\n                    if (getExclusiveOwnerThread() != current)\n                        return -1;\n                //读锁是否要阻塞（公平 or 非公平）\n                } else if (readerShouldBlock()) {\n                    if (firstReader == current) {\n                    } else {\n                        if (rh == null) {\n                            rh = cachedHoldCounter;\n                            if (rh == null || rh.tid != getThreadId(current)) {\n                                rh = readHolds.get();\n                                if (rh.count == 0)\n                                    readHolds.remove();\n                            }\n                        }\n                        if (rh.count == 0)\n                            return -1;\n                    }\n                }\n                //读锁达到最大值，不能再获取\n                if (sharedCount(c) == MAX_COUNT)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //CAS操作\n                if (compareAndSetState(c, c + SHARED_UNIT)) {\n                    if (sharedCount(c) == 0) {\n                        firstReader = current;\n                        firstReaderHoldCount = 1;\n                    } else if (firstReader == current) {\n                        firstReaderHoldCount++;\n                    } else {\n                        if (rh == null)\n                            rh = cachedHoldCounter;\n                        if (rh == null || rh.tid != getThreadId(current))\n                            rh = readHolds.get();\n                        else if (rh.count == 0)\n                            readHolds.set(rh);\n                        rh.count++;\n                        cachedHoldCounter = rh; \n                    }\n                    return 1;\n                }\n            }\n        }\n```\n以上的代码中多次出现了一个rh变量（HoldCounter），我们知道重入锁的原理就是计数器，同理这个rh变量也相当于一个计数器，记录线程获取读锁的次数。来看它的定义：\n\n```\n//HoldCounter类\nstatic final class HoldCounter {\n            int count = 0;\n            final long tid = getThreadId(Thread.currentThread());\n        }\n//继承ThreadLocal类        \nstatic final class ThreadLocalHoldCounter\n            extends ThreadLocal<HoldCounter> {\n            public HoldCounter initialValue() {\n                return new HoldCounter();\n            }\n        }\n```\nHoldCounter的定义只包含一个计数器和当前线程的Id，它的作用就是记录该线程获取读锁的次数，那么它是如何与线程绑定的呢？我们知道ThreadLocal类是线程维护的私有变量，利用它就可以和线程绑定。  \n\n注：（需要说明的是这样**HoldCounter绑定线程id而不绑定线程对象的原因是****避免HoldCounter和ThreadLocal互相绑定而GC难以释放它们**，所以其实这样做只是为了帮助GC快速回收对象而已。）\n\n---\n\n当读锁释放时，调用的是Sync的tryReleaseShared()方法：\n\n```\nprotected final boolean tryReleaseShared(int unused) {\n            Thread current = Thread.currentThread();\n            if (firstReader == current) {\n                if (firstReaderHoldCount == 1)\n                    firstReader = null;\n                else\n                    firstReaderHoldCount--;\n            } else {\n                HoldCounter rh = cachedHoldCounter;\n                if (rh == null || rh.tid != getThreadId(current))\n                    rh = readHolds.get();\n                int count = rh.count;\n                if (count <= 1) {\n                    readHolds.remove();\n                    if (count <= 0)\n                        throw unmatchedUnlockException();\n                }\n                --rh.count;\n            }\n            for (;;) {\n                int c = getState();\n                int nextc = c - SHARED_UNIT;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n循环CAS操作直到读锁的状态为0。\n#### 锁降级\n前面提到，读写锁有个特性是锁降级。  \n锁降级指的是：**写锁降级为读锁**。\n\n具体过程：**获取写锁的线程把持住写锁，然后获取读锁，再释放写锁。**  \n\n**目的：保证写锁修改的数据可以被其他线程看见，保证了数据的可见性。** \n\n\n锁降级中读锁的获取是否为必要？肯定是必要的。试想，假如当前线程A不获取读锁而是直接释放了写锁，这个时候另外一个线程B获取了写锁，那么这个线程B对数据的修改是不会对当前线程A可见的。   如果获取了读锁，则线程B在获取写锁过程中判断如果有读锁还没有释放则会被阻塞，只有当前线程A释放读锁后，线程B才会获取写锁成功。\n","source":"_posts/ReentrantReadWriteLock可重入读写锁.md","raw":"---\ntitle: ReentrantReadWriteLock可重入读写锁\ndate: 2017-10-28 17:48:18\ntags: [并发,ReentrantReadWriteLock,可重入读写锁]\ncategories: 技术\n---\n### 一、ReentrantReadWriteLock的概念\n#### 介绍\n前面提到的锁（独占锁、ReentrantLock）等都是排他锁，这些锁在同一时刻只允许一个线程访问。  \n而**读写锁在同一时刻可以允许多个读线程访问，但在写线程访问时，所有读线程和其他写线程都阻塞。**\n\n\nReadWriteLock并不是继承自Lock接口，而是一个单独的接口。\n\n```\npublic interface ReadWriteLock {\n    Lock readLock();\n    Lock writeLock();\n}\n```\nReentrantReadWriteLock则是这个接口的实现。通过readLock()和writeLock()方法可分别获得一个ReadLock实例和一个WriteLock实例，这两个实例实现了Lock接口。\n因此，我们可以调用Lock接口的相关方法来完成锁的语义。\n\n```\nReentrantReadWriteLock rw = new ReentrantReadWriteLock();\nLock r = rw.readLock();\nLock w = rw.writeLock();\n...\n```\n#### 特性：\n1. **公平性：同样有公平锁和非公平锁；**  \n\n2. **重入性：读锁和写锁都支持重入（最大65535）；**\n3. **锁降级：获取写锁之后，获取读锁，释放写锁，保留读锁；（按顺序）**\n\n### 二、ReentrantReadWriteLock的实现原理\n\nReentrantReadWriteLock与ReentrantLock一样，锁的语义的实现依旧是依靠Sync（继承自AQS），它的读锁、写锁的实现原理如下：\n- **读锁：AQS共享锁**\n- **写锁：AQS独占锁**\n\n\n#### 读写状态\n读写锁的实现同样是依赖AQS来实现同步功能。\n那么它的读写状态如何表示呢？\n同样是**使用一个int型的变量**表示，将这个变量“按位切割”成两部分，**高16位表示读，低16位表示写**。这样我们就能通过位运算确定它的读写状态。（如下图）  \n\n![（图）](http://osuskkx7k.bkt.clouddn.com/duxiesuo.jpg)  \n\n如果已知整体同步状态为S，那么：\n- **写状态：S & 0x0000FFFF**（将高16位变0，抹去）\n- **读状态：S>>>16** （无符号补0右移16位）  \n\n**注：当写状态为0，S不为0时，表示读状态不为0，读锁被获取。**\n\n\n\n#### 写锁的获取和释放\n\n写锁是独占锁，获取时调用Sync中的tryAcquire()方法：\n```\nprotected final boolean tryAcquire(int acquires) {\n            Thread current = Thread.currentThread();\n            //获取状态\n            int c = getState();\n            //获取写状态\n            int w = exclusiveCount(c);\n            if (c != 0) {\n                //写状态为0表示存在读线程，获取失败\n                //或当前线程不是获取写锁的线程，获取失败\n                if (w == 0 || current != getExclusiveOwnerThread())\n                    return false;\n                //超过写锁总数量\n                if (w + exclusiveCount(acquires) > MAX_COUNT)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //当前线程是获取写锁的线程，重进入，获取成功\n                setState(c + acquires);\n                return true;\n            }\n            //是否需要阻塞\n            if (writerShouldBlock() ||\n                !compareAndSetState(c, c + acquires))\n                return false;\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n```\n写锁的获取过程如代码中注释所示。\n只有在以下情况才能获取写锁：\n- **不存在读锁或当前线程是已经获取写锁的线程（可重入）**\n\n---\n写锁的释放调用的是Sync的tryRelease()方法：\n\n```\nprotected final boolean tryRelease(int releases) {\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            int nextc = getState() - releases;\n            boolean free = exclusiveCount(nextc) == 0;\n            if (free)\n                setExclusiveOwnerThread(null);\n            setState(nextc);\n            return free;\n        }\n```\n写锁的释放与重入锁的释放过程类似，每次释放时将写状态减少，直到写锁状态为0时，表示写锁释放。\n\n---\n\n#### 读锁的获取和释放\n读锁是共享锁，调用的是Sync的tryAcquireShared()方法：\n\n```\nprotected final int tryAcquireShared(int unused) {\n            Thread current = Thread.currentThread();\n            int c = getState(); //获取状态\n            //写锁不为0  && 且获取写锁的线程不是当前线程\n            //直接失败\n            if (exclusiveCount(c) != 0 &&\n                getExclusiveOwnerThread() != current) \n                return -1;\n            //获取读锁\n            int r = sharedCount(c);\n            //readerShouldBlock()：读锁是否要等待（公平or非公平）\n            // r < MAX_COUNT：读锁小于最大值（65535）\n            //compareAndSetState(c, c + SHARED_UNIT))：CAS操作成功\n            if (!readerShouldBlock() &&\n                r < MAX_COUNT &&\n                compareAndSetState(c, c + SHARED_UNIT)) {\n                //r == 0：只有一个读锁（A），计数+1\n                if (r == 0) {\n                    firstReader = current;\n                    firstReaderHoldCount = 1;\n                //持有读锁的线程（A）重进入，计数++\n                } else if (firstReader == current) {\n                    firstReaderHoldCount++;\n                } else {\n                //另一个线程（B）进入，此时找到缓存的rh，将计数++；\n                    HoldCounter rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != getThreadId(current))\n                        cachedHoldCounter = rh = readHolds.get();\n                    else if (rh.count == 0)\n                        readHolds.set(rh);\n                    rh.count++;\n                }\n                return 1;\n            }\n            //循环尝试\n            return fullTryAcquireShared(current);\n        }\n```\n获取锁的过程如注释所示。  \n如果不满足第二个if语句中的判断，比如读锁需要阻塞，则会进入fullTryAcquireShared（current）方法，**该方法循环不断尝试修改状态直到成功或被写入锁占有。**\n    \n\n```\nfinal int fullTryAcquireShared(Thread current) {\n            HoldCounter rh = null;\n            for (;;) {\n                int c = getState();\n                //写锁存在但不是当前线程，直接失败\n                if (exclusiveCount(c) != 0) {\n                    if (getExclusiveOwnerThread() != current)\n                        return -1;\n                //读锁是否要阻塞（公平 or 非公平）\n                } else if (readerShouldBlock()) {\n                    if (firstReader == current) {\n                    } else {\n                        if (rh == null) {\n                            rh = cachedHoldCounter;\n                            if (rh == null || rh.tid != getThreadId(current)) {\n                                rh = readHolds.get();\n                                if (rh.count == 0)\n                                    readHolds.remove();\n                            }\n                        }\n                        if (rh.count == 0)\n                            return -1;\n                    }\n                }\n                //读锁达到最大值，不能再获取\n                if (sharedCount(c) == MAX_COUNT)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //CAS操作\n                if (compareAndSetState(c, c + SHARED_UNIT)) {\n                    if (sharedCount(c) == 0) {\n                        firstReader = current;\n                        firstReaderHoldCount = 1;\n                    } else if (firstReader == current) {\n                        firstReaderHoldCount++;\n                    } else {\n                        if (rh == null)\n                            rh = cachedHoldCounter;\n                        if (rh == null || rh.tid != getThreadId(current))\n                            rh = readHolds.get();\n                        else if (rh.count == 0)\n                            readHolds.set(rh);\n                        rh.count++;\n                        cachedHoldCounter = rh; \n                    }\n                    return 1;\n                }\n            }\n        }\n```\n以上的代码中多次出现了一个rh变量（HoldCounter），我们知道重入锁的原理就是计数器，同理这个rh变量也相当于一个计数器，记录线程获取读锁的次数。来看它的定义：\n\n```\n//HoldCounter类\nstatic final class HoldCounter {\n            int count = 0;\n            final long tid = getThreadId(Thread.currentThread());\n        }\n//继承ThreadLocal类        \nstatic final class ThreadLocalHoldCounter\n            extends ThreadLocal<HoldCounter> {\n            public HoldCounter initialValue() {\n                return new HoldCounter();\n            }\n        }\n```\nHoldCounter的定义只包含一个计数器和当前线程的Id，它的作用就是记录该线程获取读锁的次数，那么它是如何与线程绑定的呢？我们知道ThreadLocal类是线程维护的私有变量，利用它就可以和线程绑定。  \n\n注：（需要说明的是这样**HoldCounter绑定线程id而不绑定线程对象的原因是****避免HoldCounter和ThreadLocal互相绑定而GC难以释放它们**，所以其实这样做只是为了帮助GC快速回收对象而已。）\n\n---\n\n当读锁释放时，调用的是Sync的tryReleaseShared()方法：\n\n```\nprotected final boolean tryReleaseShared(int unused) {\n            Thread current = Thread.currentThread();\n            if (firstReader == current) {\n                if (firstReaderHoldCount == 1)\n                    firstReader = null;\n                else\n                    firstReaderHoldCount--;\n            } else {\n                HoldCounter rh = cachedHoldCounter;\n                if (rh == null || rh.tid != getThreadId(current))\n                    rh = readHolds.get();\n                int count = rh.count;\n                if (count <= 1) {\n                    readHolds.remove();\n                    if (count <= 0)\n                        throw unmatchedUnlockException();\n                }\n                --rh.count;\n            }\n            for (;;) {\n                int c = getState();\n                int nextc = c - SHARED_UNIT;\n                if (compareAndSetState(c, nextc))\n                    return nextc == 0;\n            }\n        }\n```\n循环CAS操作直到读锁的状态为0。\n#### 锁降级\n前面提到，读写锁有个特性是锁降级。  \n锁降级指的是：**写锁降级为读锁**。\n\n具体过程：**获取写锁的线程把持住写锁，然后获取读锁，再释放写锁。**  \n\n**目的：保证写锁修改的数据可以被其他线程看见，保证了数据的可见性。** \n\n\n锁降级中读锁的获取是否为必要？肯定是必要的。试想，假如当前线程A不获取读锁而是直接释放了写锁，这个时候另外一个线程B获取了写锁，那么这个线程B对数据的修改是不会对当前线程A可见的。   如果获取了读锁，则线程B在获取写锁过程中判断如果有读锁还没有释放则会被阻塞，只有当前线程A释放读锁后，线程B才会获取写锁成功。\n","slug":"ReentrantReadWriteLock可重入读写锁","published":1,"updated":"2018-04-11T10:02:31.869Z","_id":"cjfqzt25p001r50tcdjb1afhb","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、ReentrantReadWriteLock的概念\"><a href=\"#一、ReentrantReadWriteLock的概念\" class=\"headerlink\" title=\"一、ReentrantReadWriteLock的概念\"></a>一、ReentrantReadWriteLock的概念</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>前面提到的锁（独占锁、ReentrantLock）等都是排他锁，这些锁在同一时刻只允许一个线程访问。<br>而<strong>读写锁在同一时刻可以允许多个读线程访问，但在写线程访问时，所有读线程和其他写线程都阻塞。</strong></p>\n<p>ReadWriteLock并不是继承自Lock接口，而是一个单独的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReadWriteLock &#123;</div><div class=\"line\">    Lock readLock();</div><div class=\"line\">    Lock writeLock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReentrantReadWriteLock则是这个接口的实现。通过readLock()和writeLock()方法可分别获得一个ReadLock实例和一个WriteLock实例，这两个实例实现了Lock接口。<br>因此，我们可以调用Lock接口的相关方法来完成锁的语义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReentrantReadWriteLock rw = new ReentrantReadWriteLock();</div><div class=\"line\">Lock r = rw.readLock();</div><div class=\"line\">Lock w = rw.writeLock();</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ol>\n<li><p><strong>公平性：同样有公平锁和非公平锁；</strong>  </p>\n</li>\n<li><p><strong>重入性：读锁和写锁都支持重入（最大65535）；</strong></p>\n</li>\n<li><strong>锁降级：获取写锁之后，获取读锁，释放写锁，保留读锁；（按顺序）</strong></li>\n</ol>\n<h3 id=\"二、ReentrantReadWriteLock的实现原理\"><a href=\"#二、ReentrantReadWriteLock的实现原理\" class=\"headerlink\" title=\"二、ReentrantReadWriteLock的实现原理\"></a>二、ReentrantReadWriteLock的实现原理</h3><p>ReentrantReadWriteLock与ReentrantLock一样，锁的语义的实现依旧是依靠Sync（继承自AQS），它的读锁、写锁的实现原理如下：</p>\n<ul>\n<li><strong>读锁：AQS共享锁</strong></li>\n<li><strong>写锁：AQS独占锁</strong></li>\n</ul>\n<h4 id=\"读写状态\"><a href=\"#读写状态\" class=\"headerlink\" title=\"读写状态\"></a>读写状态</h4><p>读写锁的实现同样是依赖AQS来实现同步功能。<br>那么它的读写状态如何表示呢？<br>同样是<strong>使用一个int型的变量</strong>表示，将这个变量“按位切割”成两部分，<strong>高16位表示读，低16位表示写</strong>。这样我们就能通过位运算确定它的读写状态。（如下图）  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/duxiesuo.jpg\" alt=\"（图）\">  </p>\n<p>如果已知整体同步状态为S，那么：</p>\n<ul>\n<li><strong>写状态：S &amp; 0x0000FFFF</strong>（将高16位变0，抹去）</li>\n<li><strong>读状态：S&gt;&gt;&gt;16</strong> （无符号补0右移16位）  </li>\n</ul>\n<p><strong>注：当写状态为0，S不为0时，表示读状态不为0，读锁被获取。</strong></p>\n<h4 id=\"写锁的获取和释放\"><a href=\"#写锁的获取和释放\" class=\"headerlink\" title=\"写锁的获取和释放\"></a>写锁的获取和释放</h4><p>写锁是独占锁，获取时调用Sync中的tryAcquire()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            //获取状态</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            //获取写状态</div><div class=\"line\">            int w = exclusiveCount(c);</div><div class=\"line\">            if (c != 0) &#123;</div><div class=\"line\">                //写状态为0表示存在读线程，获取失败</div><div class=\"line\">                //或当前线程不是获取写锁的线程，获取失败</div><div class=\"line\">                if (w == 0 || current != getExclusiveOwnerThread())</div><div class=\"line\">                    return false;</div><div class=\"line\">                //超过写锁总数量</div><div class=\"line\">                if (w + exclusiveCount(acquires) &gt; MAX_COUNT)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                //当前线程是获取写锁的线程，重进入，获取成功</div><div class=\"line\">                setState(c + acquires);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //是否需要阻塞</div><div class=\"line\">            if (writerShouldBlock() ||</div><div class=\"line\">                !compareAndSetState(c, c + acquires))</div><div class=\"line\">                return false;</div><div class=\"line\">            setExclusiveOwnerThread(current);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>写锁的获取过程如代码中注释所示。<br>只有在以下情况才能获取写锁：</p>\n<ul>\n<li><strong>不存在读锁或当前线程是已经获取写锁的线程（可重入）</strong></li>\n</ul>\n<hr>\n<p>写锁的释放调用的是Sync的tryRelease()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            int nextc = getState() - releases;</div><div class=\"line\">            boolean free = exclusiveCount(nextc) == 0;</div><div class=\"line\">            if (free)</div><div class=\"line\">                setExclusiveOwnerThread(null);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return free;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>写锁的释放与重入锁的释放过程类似，每次释放时将写状态减少，直到写锁状态为0时，表示写锁释放。</p>\n<hr>\n<h4 id=\"读锁的获取和释放\"><a href=\"#读锁的获取和释放\" class=\"headerlink\" title=\"读锁的获取和释放\"></a>读锁的获取和释放</h4><p>读锁是共享锁，调用的是Sync的tryAcquireShared()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final int tryAcquireShared(int unused) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState(); //获取状态</div><div class=\"line\">            //写锁不为0  &amp;&amp; 且获取写锁的线程不是当前线程</div><div class=\"line\">            //直接失败</div><div class=\"line\">            if (exclusiveCount(c) != 0 &amp;&amp;</div><div class=\"line\">                getExclusiveOwnerThread() != current) </div><div class=\"line\">                return -1;</div><div class=\"line\">            //获取读锁</div><div class=\"line\">            int r = sharedCount(c);</div><div class=\"line\">            //readerShouldBlock()：读锁是否要等待（公平or非公平）</div><div class=\"line\">            // r &lt; MAX_COUNT：读锁小于最大值（65535）</div><div class=\"line\">            //compareAndSetState(c, c + SHARED_UNIT))：CAS操作成功</div><div class=\"line\">            if (!readerShouldBlock() &amp;&amp;</div><div class=\"line\">                r &lt; MAX_COUNT &amp;&amp;</div><div class=\"line\">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</div><div class=\"line\">                //r == 0：只有一个读锁（A），计数+1</div><div class=\"line\">                if (r == 0) &#123;</div><div class=\"line\">                    firstReader = current;</div><div class=\"line\">                    firstReaderHoldCount = 1;</div><div class=\"line\">                //持有读锁的线程（A）重进入，计数++</div><div class=\"line\">                &#125; else if (firstReader == current) &#123;</div><div class=\"line\">                    firstReaderHoldCount++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                //另一个线程（B）进入，此时找到缓存的rh，将计数++；</div><div class=\"line\">                    HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">                    if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                        cachedHoldCounter = rh = readHolds.get();</div><div class=\"line\">                    else if (rh.count == 0)</div><div class=\"line\">                        readHolds.set(rh);</div><div class=\"line\">                    rh.count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                return 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //循环尝试</div><div class=\"line\">            return fullTryAcquireShared(current);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>获取锁的过程如注释所示。<br>如果不满足第二个if语句中的判断，比如读锁需要阻塞，则会进入fullTryAcquireShared（current）方法，<strong>该方法循环不断尝试修改状态直到成功或被写入锁占有。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int fullTryAcquireShared(Thread current) &#123;</div><div class=\"line\">            HoldCounter rh = null;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                //写锁存在但不是当前线程，直接失败</div><div class=\"line\">                if (exclusiveCount(c) != 0) &#123;</div><div class=\"line\">                    if (getExclusiveOwnerThread() != current)</div><div class=\"line\">                        return -1;</div><div class=\"line\">                //读锁是否要阻塞（公平 or 非公平）</div><div class=\"line\">                &#125; else if (readerShouldBlock()) &#123;</div><div class=\"line\">                    if (firstReader == current) &#123;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        if (rh == null) &#123;</div><div class=\"line\">                            rh = cachedHoldCounter;</div><div class=\"line\">                            if (rh == null || rh.tid != getThreadId(current)) &#123;</div><div class=\"line\">                                rh = readHolds.get();</div><div class=\"line\">                                if (rh.count == 0)</div><div class=\"line\">                                    readHolds.remove();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (rh.count == 0)</div><div class=\"line\">                            return -1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                //读锁达到最大值，不能再获取</div><div class=\"line\">                if (sharedCount(c) == MAX_COUNT)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                //CAS操作</div><div class=\"line\">                if (compareAndSetState(c, c + SHARED_UNIT)) &#123;</div><div class=\"line\">                    if (sharedCount(c) == 0) &#123;</div><div class=\"line\">                        firstReader = current;</div><div class=\"line\">                        firstReaderHoldCount = 1;</div><div class=\"line\">                    &#125; else if (firstReader == current) &#123;</div><div class=\"line\">                        firstReaderHoldCount++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        if (rh == null)</div><div class=\"line\">                            rh = cachedHoldCounter;</div><div class=\"line\">                        if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                            rh = readHolds.get();</div><div class=\"line\">                        else if (rh.count == 0)</div><div class=\"line\">                            readHolds.set(rh);</div><div class=\"line\">                        rh.count++;</div><div class=\"line\">                        cachedHoldCounter = rh; </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    return 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>以上的代码中多次出现了一个rh变量（HoldCounter），我们知道重入锁的原理就是计数器，同理这个rh变量也相当于一个计数器，记录线程获取读锁的次数。来看它的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HoldCounter类</div><div class=\"line\">static final class HoldCounter &#123;</div><div class=\"line\">            int count = 0;</div><div class=\"line\">            final long tid = getThreadId(Thread.currentThread());</div><div class=\"line\">        &#125;</div><div class=\"line\">//继承ThreadLocal类        </div><div class=\"line\">static final class ThreadLocalHoldCounter</div><div class=\"line\">            extends ThreadLocal&lt;HoldCounter&gt; &#123;</div><div class=\"line\">            public HoldCounter initialValue() &#123;</div><div class=\"line\">                return new HoldCounter();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>HoldCounter的定义只包含一个计数器和当前线程的Id，它的作用就是记录该线程获取读锁的次数，那么它是如何与线程绑定的呢？我们知道ThreadLocal类是线程维护的私有变量，利用它就可以和线程绑定。  </p>\n<p>注：（需要说明的是这样<strong>HoldCounter绑定线程id而不绑定线程对象的原因是**</strong>避免HoldCounter和ThreadLocal互相绑定而GC难以释放它们**，所以其实这样做只是为了帮助GC快速回收对象而已。）</p>\n<hr>\n<p>当读锁释放时，调用的是Sync的tryReleaseShared()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int unused) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            if (firstReader == current) &#123;</div><div class=\"line\">                if (firstReaderHoldCount == 1)</div><div class=\"line\">                    firstReader = null;</div><div class=\"line\">                else</div><div class=\"line\">                    firstReaderHoldCount--;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">                if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                    rh = readHolds.get();</div><div class=\"line\">                int count = rh.count;</div><div class=\"line\">                if (count &lt;= 1) &#123;</div><div class=\"line\">                    readHolds.remove();</div><div class=\"line\">                    if (count &lt;= 0)</div><div class=\"line\">                        throw unmatchedUnlockException();</div><div class=\"line\">                &#125;</div><div class=\"line\">                --rh.count;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                int nextc = c - SHARED_UNIT;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>循环CAS操作直到读锁的状态为0。</p>\n<h4 id=\"锁降级\"><a href=\"#锁降级\" class=\"headerlink\" title=\"锁降级\"></a>锁降级</h4><p>前面提到，读写锁有个特性是锁降级。<br>锁降级指的是：<strong>写锁降级为读锁</strong>。</p>\n<p>具体过程：<strong>获取写锁的线程把持住写锁，然后获取读锁，再释放写锁。</strong>  </p>\n<p><strong>目的：保证写锁修改的数据可以被其他线程看见，保证了数据的可见性。</strong> </p>\n<p>锁降级中读锁的获取是否为必要？肯定是必要的。试想，假如当前线程A不获取读锁而是直接释放了写锁，这个时候另外一个线程B获取了写锁，那么这个线程B对数据的修改是不会对当前线程A可见的。   如果获取了读锁，则线程B在获取写锁过程中判断如果有读锁还没有释放则会被阻塞，只有当前线程A释放读锁后，线程B才会获取写锁成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、ReentrantReadWriteLock的概念\"><a href=\"#一、ReentrantReadWriteLock的概念\" class=\"headerlink\" title=\"一、ReentrantReadWriteLock的概念\"></a>一、ReentrantReadWriteLock的概念</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>前面提到的锁（独占锁、ReentrantLock）等都是排他锁，这些锁在同一时刻只允许一个线程访问。<br>而<strong>读写锁在同一时刻可以允许多个读线程访问，但在写线程访问时，所有读线程和其他写线程都阻塞。</strong></p>\n<p>ReadWriteLock并不是继承自Lock接口，而是一个单独的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReadWriteLock &#123;</div><div class=\"line\">    Lock readLock();</div><div class=\"line\">    Lock writeLock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReentrantReadWriteLock则是这个接口的实现。通过readLock()和writeLock()方法可分别获得一个ReadLock实例和一个WriteLock实例，这两个实例实现了Lock接口。<br>因此，我们可以调用Lock接口的相关方法来完成锁的语义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReentrantReadWriteLock rw = new ReentrantReadWriteLock();</div><div class=\"line\">Lock r = rw.readLock();</div><div class=\"line\">Lock w = rw.writeLock();</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ol>\n<li><p><strong>公平性：同样有公平锁和非公平锁；</strong>  </p>\n</li>\n<li><p><strong>重入性：读锁和写锁都支持重入（最大65535）；</strong></p>\n</li>\n<li><strong>锁降级：获取写锁之后，获取读锁，释放写锁，保留读锁；（按顺序）</strong></li>\n</ol>\n<h3 id=\"二、ReentrantReadWriteLock的实现原理\"><a href=\"#二、ReentrantReadWriteLock的实现原理\" class=\"headerlink\" title=\"二、ReentrantReadWriteLock的实现原理\"></a>二、ReentrantReadWriteLock的实现原理</h3><p>ReentrantReadWriteLock与ReentrantLock一样，锁的语义的实现依旧是依靠Sync（继承自AQS），它的读锁、写锁的实现原理如下：</p>\n<ul>\n<li><strong>读锁：AQS共享锁</strong></li>\n<li><strong>写锁：AQS独占锁</strong></li>\n</ul>\n<h4 id=\"读写状态\"><a href=\"#读写状态\" class=\"headerlink\" title=\"读写状态\"></a>读写状态</h4><p>读写锁的实现同样是依赖AQS来实现同步功能。<br>那么它的读写状态如何表示呢？<br>同样是<strong>使用一个int型的变量</strong>表示，将这个变量“按位切割”成两部分，<strong>高16位表示读，低16位表示写</strong>。这样我们就能通过位运算确定它的读写状态。（如下图）  </p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/duxiesuo.jpg\" alt=\"（图）\">  </p>\n<p>如果已知整体同步状态为S，那么：</p>\n<ul>\n<li><strong>写状态：S &amp; 0x0000FFFF</strong>（将高16位变0，抹去）</li>\n<li><strong>读状态：S&gt;&gt;&gt;16</strong> （无符号补0右移16位）  </li>\n</ul>\n<p><strong>注：当写状态为0，S不为0时，表示读状态不为0，读锁被获取。</strong></p>\n<h4 id=\"写锁的获取和释放\"><a href=\"#写锁的获取和释放\" class=\"headerlink\" title=\"写锁的获取和释放\"></a>写锁的获取和释放</h4><p>写锁是独占锁，获取时调用Sync中的tryAcquire()方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            //获取状态</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            //获取写状态</div><div class=\"line\">            int w = exclusiveCount(c);</div><div class=\"line\">            if (c != 0) &#123;</div><div class=\"line\">                //写状态为0表示存在读线程，获取失败</div><div class=\"line\">                //或当前线程不是获取写锁的线程，获取失败</div><div class=\"line\">                if (w == 0 || current != getExclusiveOwnerThread())</div><div class=\"line\">                    return false;</div><div class=\"line\">                //超过写锁总数量</div><div class=\"line\">                if (w + exclusiveCount(acquires) &gt; MAX_COUNT)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                //当前线程是获取写锁的线程，重进入，获取成功</div><div class=\"line\">                setState(c + acquires);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //是否需要阻塞</div><div class=\"line\">            if (writerShouldBlock() ||</div><div class=\"line\">                !compareAndSetState(c, c + acquires))</div><div class=\"line\">                return false;</div><div class=\"line\">            setExclusiveOwnerThread(current);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>写锁的获取过程如代码中注释所示。<br>只有在以下情况才能获取写锁：</p>\n<ul>\n<li><strong>不存在读锁或当前线程是已经获取写锁的线程（可重入）</strong></li>\n</ul>\n<hr>\n<p>写锁的释放调用的是Sync的tryRelease()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">            if (!isHeldExclusively())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            int nextc = getState() - releases;</div><div class=\"line\">            boolean free = exclusiveCount(nextc) == 0;</div><div class=\"line\">            if (free)</div><div class=\"line\">                setExclusiveOwnerThread(null);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return free;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>写锁的释放与重入锁的释放过程类似，每次释放时将写状态减少，直到写锁状态为0时，表示写锁释放。</p>\n<hr>\n<h4 id=\"读锁的获取和释放\"><a href=\"#读锁的获取和释放\" class=\"headerlink\" title=\"读锁的获取和释放\"></a>读锁的获取和释放</h4><p>读锁是共享锁，调用的是Sync的tryAcquireShared()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final int tryAcquireShared(int unused) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState(); //获取状态</div><div class=\"line\">            //写锁不为0  &amp;&amp; 且获取写锁的线程不是当前线程</div><div class=\"line\">            //直接失败</div><div class=\"line\">            if (exclusiveCount(c) != 0 &amp;&amp;</div><div class=\"line\">                getExclusiveOwnerThread() != current) </div><div class=\"line\">                return -1;</div><div class=\"line\">            //获取读锁</div><div class=\"line\">            int r = sharedCount(c);</div><div class=\"line\">            //readerShouldBlock()：读锁是否要等待（公平or非公平）</div><div class=\"line\">            // r &lt; MAX_COUNT：读锁小于最大值（65535）</div><div class=\"line\">            //compareAndSetState(c, c + SHARED_UNIT))：CAS操作成功</div><div class=\"line\">            if (!readerShouldBlock() &amp;&amp;</div><div class=\"line\">                r &lt; MAX_COUNT &amp;&amp;</div><div class=\"line\">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</div><div class=\"line\">                //r == 0：只有一个读锁（A），计数+1</div><div class=\"line\">                if (r == 0) &#123;</div><div class=\"line\">                    firstReader = current;</div><div class=\"line\">                    firstReaderHoldCount = 1;</div><div class=\"line\">                //持有读锁的线程（A）重进入，计数++</div><div class=\"line\">                &#125; else if (firstReader == current) &#123;</div><div class=\"line\">                    firstReaderHoldCount++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                //另一个线程（B）进入，此时找到缓存的rh，将计数++；</div><div class=\"line\">                    HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">                    if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                        cachedHoldCounter = rh = readHolds.get();</div><div class=\"line\">                    else if (rh.count == 0)</div><div class=\"line\">                        readHolds.set(rh);</div><div class=\"line\">                    rh.count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                return 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //循环尝试</div><div class=\"line\">            return fullTryAcquireShared(current);</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>获取锁的过程如注释所示。<br>如果不满足第二个if语句中的判断，比如读锁需要阻塞，则会进入fullTryAcquireShared（current）方法，<strong>该方法循环不断尝试修改状态直到成功或被写入锁占有。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int fullTryAcquireShared(Thread current) &#123;</div><div class=\"line\">            HoldCounter rh = null;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                //写锁存在但不是当前线程，直接失败</div><div class=\"line\">                if (exclusiveCount(c) != 0) &#123;</div><div class=\"line\">                    if (getExclusiveOwnerThread() != current)</div><div class=\"line\">                        return -1;</div><div class=\"line\">                //读锁是否要阻塞（公平 or 非公平）</div><div class=\"line\">                &#125; else if (readerShouldBlock()) &#123;</div><div class=\"line\">                    if (firstReader == current) &#123;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        if (rh == null) &#123;</div><div class=\"line\">                            rh = cachedHoldCounter;</div><div class=\"line\">                            if (rh == null || rh.tid != getThreadId(current)) &#123;</div><div class=\"line\">                                rh = readHolds.get();</div><div class=\"line\">                                if (rh.count == 0)</div><div class=\"line\">                                    readHolds.remove();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (rh.count == 0)</div><div class=\"line\">                            return -1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                //读锁达到最大值，不能再获取</div><div class=\"line\">                if (sharedCount(c) == MAX_COUNT)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                //CAS操作</div><div class=\"line\">                if (compareAndSetState(c, c + SHARED_UNIT)) &#123;</div><div class=\"line\">                    if (sharedCount(c) == 0) &#123;</div><div class=\"line\">                        firstReader = current;</div><div class=\"line\">                        firstReaderHoldCount = 1;</div><div class=\"line\">                    &#125; else if (firstReader == current) &#123;</div><div class=\"line\">                        firstReaderHoldCount++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        if (rh == null)</div><div class=\"line\">                            rh = cachedHoldCounter;</div><div class=\"line\">                        if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                            rh = readHolds.get();</div><div class=\"line\">                        else if (rh.count == 0)</div><div class=\"line\">                            readHolds.set(rh);</div><div class=\"line\">                        rh.count++;</div><div class=\"line\">                        cachedHoldCounter = rh; </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    return 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>以上的代码中多次出现了一个rh变量（HoldCounter），我们知道重入锁的原理就是计数器，同理这个rh变量也相当于一个计数器，记录线程获取读锁的次数。来看它的定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HoldCounter类</div><div class=\"line\">static final class HoldCounter &#123;</div><div class=\"line\">            int count = 0;</div><div class=\"line\">            final long tid = getThreadId(Thread.currentThread());</div><div class=\"line\">        &#125;</div><div class=\"line\">//继承ThreadLocal类        </div><div class=\"line\">static final class ThreadLocalHoldCounter</div><div class=\"line\">            extends ThreadLocal&lt;HoldCounter&gt; &#123;</div><div class=\"line\">            public HoldCounter initialValue() &#123;</div><div class=\"line\">                return new HoldCounter();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>HoldCounter的定义只包含一个计数器和当前线程的Id，它的作用就是记录该线程获取读锁的次数，那么它是如何与线程绑定的呢？我们知道ThreadLocal类是线程维护的私有变量，利用它就可以和线程绑定。  </p>\n<p>注：（需要说明的是这样<strong>HoldCounter绑定线程id而不绑定线程对象的原因是**</strong>避免HoldCounter和ThreadLocal互相绑定而GC难以释放它们**，所以其实这样做只是为了帮助GC快速回收对象而已。）</p>\n<hr>\n<p>当读锁释放时，调用的是Sync的tryReleaseShared()方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int unused) &#123;</div><div class=\"line\">            Thread current = Thread.currentThread();</div><div class=\"line\">            if (firstReader == current) &#123;</div><div class=\"line\">                if (firstReaderHoldCount == 1)</div><div class=\"line\">                    firstReader = null;</div><div class=\"line\">                else</div><div class=\"line\">                    firstReaderHoldCount--;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">                if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                    rh = readHolds.get();</div><div class=\"line\">                int count = rh.count;</div><div class=\"line\">                if (count &lt;= 1) &#123;</div><div class=\"line\">                    readHolds.remove();</div><div class=\"line\">                    if (count &lt;= 0)</div><div class=\"line\">                        throw unmatchedUnlockException();</div><div class=\"line\">                &#125;</div><div class=\"line\">                --rh.count;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (;;) &#123;</div><div class=\"line\">                int c = getState();</div><div class=\"line\">                int nextc = c - SHARED_UNIT;</div><div class=\"line\">                if (compareAndSetState(c, nextc))</div><div class=\"line\">                    return nextc == 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>循环CAS操作直到读锁的状态为0。</p>\n<h4 id=\"锁降级\"><a href=\"#锁降级\" class=\"headerlink\" title=\"锁降级\"></a>锁降级</h4><p>前面提到，读写锁有个特性是锁降级。<br>锁降级指的是：<strong>写锁降级为读锁</strong>。</p>\n<p>具体过程：<strong>获取写锁的线程把持住写锁，然后获取读锁，再释放写锁。</strong>  </p>\n<p><strong>目的：保证写锁修改的数据可以被其他线程看见，保证了数据的可见性。</strong> </p>\n<p>锁降级中读锁的获取是否为必要？肯定是必要的。试想，假如当前线程A不获取读锁而是直接释放了写锁，这个时候另外一个线程B获取了写锁，那么这个线程B对数据的修改是不会对当前线程A可见的。   如果获取了读锁，则线程B在获取写锁过程中判断如果有读锁还没有释放则会被阻塞，只有当前线程A释放读锁后，线程B才会获取写锁成功。</p>\n"},{"title":"ReentrantLock重入锁","date":"2017-10-20T11:48:18.000Z","_content":"### 一、ReentrantLock概念\n#### 重入锁概念\n什么是重入锁？   顾名思义，就是支持重复进入的锁。  \n**定义：支持一个线程对资源的重复加锁。（注意是一个线程）**\n\n回忆前面有关AQS实现的文章，关于独占锁，当一个线程获取锁后，如果该线程再次调用lock()方法，那么该线程会被自己阻塞。  \n原因是在实现tryAcquire()时没有考虑占有锁的线程再次获取锁的场景。因此这个锁是不支持重入的锁。  \n\n回顾synchronized的实现原理，我们知道它也是支持重进入的锁，即可以多次获取锁。\n\n那么Lock能不能实现这个功能呢？当然是可以的。  \nReentrantLock就是一个支持重进入的锁：**在调用lock()方法时，已经获取到锁的线程，可以再次调用lock()方法获取锁而不被阻塞。**\n#### 公平与非公平\n关于锁的获取，还有一个公平性的问题，于是就有了公平锁与非公平锁：  \n\n-   **公平锁：获取锁是顺序的。先对锁请求的线程先获取；**  \n-   **非公平锁：获取锁是无序的。任意线程都可以获取，无关请求先后；**\n\n来看看ReentrantLock的构造函数：\n\n```\npublic ReentrantLock() {\n        sync = new NonfairSync();\n    }\npublic ReentrantLock(boolean fair) {\n        sync = fair ? new FairSync() : new NonfairSync();\n    }\n```\n\n\n可以看到，ReentrantLock默认构造函数是非公平锁，另一个构造函数：  \n-   传入true：公平锁  \n-   传入false：非公平锁\n\n\n\n### 二、ReentrantLock的实现原理\n#### 重进入\n\n**重进入的实现原理是定义了一个获取锁的计数器**。 涉及到以下两个问题：  \n\n1. **线程再次获取锁。**  \n锁需要识别获取锁的线程是否为当前占据锁的线程，如果是，则再次获取锁成功，计数器+1。\n2. **锁的最终释放。**  \n线程重复n次获取了锁，在第n次释放锁后，其他线程能够获取到锁。释放锁时，计数器-1，计数器为0时表示锁释放成功。\n\n---\n\n**ReentrantLock**\n```\npublic class ReentrantLock implements Lock, java.io.Serializable {\nprivate final Sync sync;\n//AQS\nabstract static class Sync extends AbstractQueuedSynchronizer {...};\n//非公平锁\nstatic final class NonfairSync extends Sync {...};\n//公平锁\nstatic final class FairSync extends Sync {...};\n\n....(省略)\n}\n```\n从源码可以看到，**ReentrantLock的实现依旧是依靠队列同步器AQS（Sync继承自AQS），不同的是这里有两个AQS的实现类，NonfairSync和FairSync，分别实现非公平锁和公平锁的功能。**\n\n\n#### 非公平锁的实现\n\n非公平锁获取锁的方法：\n```\nfinal boolean nonfairTryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {  //判断\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\n该方法是Sync中的方法，NonfairSync通过重写tryAcquire()调用。  \n可以看到，该方法增加了一个判断：如果当前线程是已经获取锁的线程，那么将同步状态值State增加 **（这里不需要CAS操作，因为该线程已经获取了锁，没有竞争——相当于偏向锁）**，并返回true，表示同步状态获取成功。\n\n\n非公平锁释放锁的方法：\n\n```\nprotected final boolean tryRelease(int releases) {\n            int c = getState() - releases;\n            if (Thread.currentThread() != getExclusiveOwnerThread())\n                throw new IllegalMonitorStateException();\n            boolean free = false;\n            if (c == 0) {\n                free = true;\n                setExclusiveOwnerThread(null);\n            }\n            setState(c);\n            return free;\n        }\n```\n该方法也是由Sync实现。\n\n既然获取锁的时候增加了同步状态值，那么释放时自然要减少。\n可以看到，只有当State值减为0的时候，才返回true，表示释放锁成功，并将占有线程设置为null。\n\n\n#### 公平锁的实现\n\n公平锁获取锁的方法：\n\n```\nprotected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (!hasQueuedPredecessors() &&\n                    compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n    }\n```\n该方法是FairSync重写的tryAcquire()方法。  \n对比非公平锁的获取，**唯一不同的是该方法在判断时增加了一个条件——hasQueuedPredecessors()方法，该方法判断同步队列中当前节点是否有前驱节点，如果有，表示有线程比当前线程更早请求，则需要等待前面的线程获取释放锁之后才能获取锁。**\n\n    \n公平锁释放锁的方法：  \n\n同样也是调用Sync中的tryRelease()方法，这里不再赘述。\n\n\n#### 公平锁与非公平锁的对比\n\n**公平锁：**\n- 保证了锁的获取顺序，FIFO原则\n- 不足是需要进行大量的线程切换\n\n**非公平锁**：  \n\n- 保证了更大的吞吐量（极少的线程切换）\n- 不足是可能造成线程“饥饿”（等待很久）\n\n**频繁的线程切换对性能有很大的影响，因此ReentrantLock的默认实现是非公平锁。**","source":"_posts/ReentrantLock重入锁.md","raw":"---\ntitle: ReentrantLock重入锁\ndate: 2017-10-20 19:48:18\ntags: [并发,ReentrantLock,重入锁]\ncategories: 技术\n---\n### 一、ReentrantLock概念\n#### 重入锁概念\n什么是重入锁？   顾名思义，就是支持重复进入的锁。  \n**定义：支持一个线程对资源的重复加锁。（注意是一个线程）**\n\n回忆前面有关AQS实现的文章，关于独占锁，当一个线程获取锁后，如果该线程再次调用lock()方法，那么该线程会被自己阻塞。  \n原因是在实现tryAcquire()时没有考虑占有锁的线程再次获取锁的场景。因此这个锁是不支持重入的锁。  \n\n回顾synchronized的实现原理，我们知道它也是支持重进入的锁，即可以多次获取锁。\n\n那么Lock能不能实现这个功能呢？当然是可以的。  \nReentrantLock就是一个支持重进入的锁：**在调用lock()方法时，已经获取到锁的线程，可以再次调用lock()方法获取锁而不被阻塞。**\n#### 公平与非公平\n关于锁的获取，还有一个公平性的问题，于是就有了公平锁与非公平锁：  \n\n-   **公平锁：获取锁是顺序的。先对锁请求的线程先获取；**  \n-   **非公平锁：获取锁是无序的。任意线程都可以获取，无关请求先后；**\n\n来看看ReentrantLock的构造函数：\n\n```\npublic ReentrantLock() {\n        sync = new NonfairSync();\n    }\npublic ReentrantLock(boolean fair) {\n        sync = fair ? new FairSync() : new NonfairSync();\n    }\n```\n\n\n可以看到，ReentrantLock默认构造函数是非公平锁，另一个构造函数：  \n-   传入true：公平锁  \n-   传入false：非公平锁\n\n\n\n### 二、ReentrantLock的实现原理\n#### 重进入\n\n**重进入的实现原理是定义了一个获取锁的计数器**。 涉及到以下两个问题：  \n\n1. **线程再次获取锁。**  \n锁需要识别获取锁的线程是否为当前占据锁的线程，如果是，则再次获取锁成功，计数器+1。\n2. **锁的最终释放。**  \n线程重复n次获取了锁，在第n次释放锁后，其他线程能够获取到锁。释放锁时，计数器-1，计数器为0时表示锁释放成功。\n\n---\n\n**ReentrantLock**\n```\npublic class ReentrantLock implements Lock, java.io.Serializable {\nprivate final Sync sync;\n//AQS\nabstract static class Sync extends AbstractQueuedSynchronizer {...};\n//非公平锁\nstatic final class NonfairSync extends Sync {...};\n//公平锁\nstatic final class FairSync extends Sync {...};\n\n....(省略)\n}\n```\n从源码可以看到，**ReentrantLock的实现依旧是依靠队列同步器AQS（Sync继承自AQS），不同的是这里有两个AQS的实现类，NonfairSync和FairSync，分别实现非公平锁和公平锁的功能。**\n\n\n#### 非公平锁的实现\n\n非公平锁获取锁的方法：\n```\nfinal boolean nonfairTryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {  //判断\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n```\n该方法是Sync中的方法，NonfairSync通过重写tryAcquire()调用。  \n可以看到，该方法增加了一个判断：如果当前线程是已经获取锁的线程，那么将同步状态值State增加 **（这里不需要CAS操作，因为该线程已经获取了锁，没有竞争——相当于偏向锁）**，并返回true，表示同步状态获取成功。\n\n\n非公平锁释放锁的方法：\n\n```\nprotected final boolean tryRelease(int releases) {\n            int c = getState() - releases;\n            if (Thread.currentThread() != getExclusiveOwnerThread())\n                throw new IllegalMonitorStateException();\n            boolean free = false;\n            if (c == 0) {\n                free = true;\n                setExclusiveOwnerThread(null);\n            }\n            setState(c);\n            return free;\n        }\n```\n该方法也是由Sync实现。\n\n既然获取锁的时候增加了同步状态值，那么释放时自然要减少。\n可以看到，只有当State值减为0的时候，才返回true，表示释放锁成功，并将占有线程设置为null。\n\n\n#### 公平锁的实现\n\n公平锁获取锁的方法：\n\n```\nprotected final boolean tryAcquire(int acquires) {\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) {\n                if (!hasQueuedPredecessors() &&\n                    compareAndSetState(0, acquires)) {\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) {\n                int nextc = c + acquires;\n                if (nextc < 0)\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n    }\n```\n该方法是FairSync重写的tryAcquire()方法。  \n对比非公平锁的获取，**唯一不同的是该方法在判断时增加了一个条件——hasQueuedPredecessors()方法，该方法判断同步队列中当前节点是否有前驱节点，如果有，表示有线程比当前线程更早请求，则需要等待前面的线程获取释放锁之后才能获取锁。**\n\n    \n公平锁释放锁的方法：  \n\n同样也是调用Sync中的tryRelease()方法，这里不再赘述。\n\n\n#### 公平锁与非公平锁的对比\n\n**公平锁：**\n- 保证了锁的获取顺序，FIFO原则\n- 不足是需要进行大量的线程切换\n\n**非公平锁**：  \n\n- 保证了更大的吞吐量（极少的线程切换）\n- 不足是可能造成线程“饥饿”（等待很久）\n\n**频繁的线程切换对性能有很大的影响，因此ReentrantLock的默认实现是非公平锁。**","slug":"ReentrantLock重入锁","published":1,"updated":"2018-04-11T10:02:31.869Z","_id":"cjfqzt25p001u50tce59uniua","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、ReentrantLock概念\"><a href=\"#一、ReentrantLock概念\" class=\"headerlink\" title=\"一、ReentrantLock概念\"></a>一、ReentrantLock概念</h3><h4 id=\"重入锁概念\"><a href=\"#重入锁概念\" class=\"headerlink\" title=\"重入锁概念\"></a>重入锁概念</h4><p>什么是重入锁？   顾名思义，就是支持重复进入的锁。<br><strong>定义：支持一个线程对资源的重复加锁。（注意是一个线程）</strong></p>\n<p>回忆前面有关AQS实现的文章，关于独占锁，当一个线程获取锁后，如果该线程再次调用lock()方法，那么该线程会被自己阻塞。<br>原因是在实现tryAcquire()时没有考虑占有锁的线程再次获取锁的场景。因此这个锁是不支持重入的锁。  </p>\n<p>回顾synchronized的实现原理，我们知道它也是支持重进入的锁，即可以多次获取锁。</p>\n<p>那么Lock能不能实现这个功能呢？当然是可以的。<br>ReentrantLock就是一个支持重进入的锁：<strong>在调用lock()方法时，已经获取到锁的线程，可以再次调用lock()方法获取锁而不被阻塞。</strong></p>\n<h4 id=\"公平与非公平\"><a href=\"#公平与非公平\" class=\"headerlink\" title=\"公平与非公平\"></a>公平与非公平</h4><p>关于锁的获取，还有一个公平性的问题，于是就有了公平锁与非公平锁：  </p>\n<ul>\n<li><strong>公平锁：获取锁是顺序的。先对锁请求的线程先获取；</strong>  </li>\n<li><strong>非公平锁：获取锁是无序的。任意线程都可以获取，无关请求先后；</strong></li>\n</ul>\n<p>来看看ReentrantLock的构造函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReentrantLock() &#123;</div><div class=\"line\">        sync = new NonfairSync();</div><div class=\"line\">    &#125;</div><div class=\"line\">public ReentrantLock(boolean fair) &#123;</div><div class=\"line\">        sync = fair ? new FairSync() : new NonfairSync();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，ReentrantLock默认构造函数是非公平锁，另一个构造函数：  </p>\n<ul>\n<li>传入true：公平锁  </li>\n<li>传入false：非公平锁</li>\n</ul>\n<h3 id=\"二、ReentrantLock的实现原理\"><a href=\"#二、ReentrantLock的实现原理\" class=\"headerlink\" title=\"二、ReentrantLock的实现原理\"></a>二、ReentrantLock的实现原理</h3><h4 id=\"重进入\"><a href=\"#重进入\" class=\"headerlink\" title=\"重进入\"></a>重进入</h4><p><strong>重进入的实现原理是定义了一个获取锁的计数器</strong>。 涉及到以下两个问题：  </p>\n<ol>\n<li><strong>线程再次获取锁。</strong><br>锁需要识别获取锁的线程是否为当前占据锁的线程，如果是，则再次获取锁成功，计数器+1。</li>\n<li><strong>锁的最终释放。</strong><br>线程重复n次获取了锁，在第n次释放锁后，其他线程能够获取到锁。释放锁时，计数器-1，计数器为0时表示锁释放成功。</li>\n</ol>\n<hr>\n<p><strong>ReentrantLock</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ReentrantLock implements Lock, java.io.Serializable &#123;</div><div class=\"line\">private final Sync sync;</div><div class=\"line\">//AQS</div><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;...&#125;;</div><div class=\"line\">//非公平锁</div><div class=\"line\">static final class NonfairSync extends Sync &#123;...&#125;;</div><div class=\"line\">//公平锁</div><div class=\"line\">static final class FairSync extends Sync &#123;...&#125;;</div><div class=\"line\"></div><div class=\"line\">....(省略)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码可以看到，<strong>ReentrantLock的实现依旧是依靠队列同步器AQS（Sync继承自AQS），不同的是这里有两个AQS的实现类，NonfairSync和FairSync，分别实现非公平锁和公平锁的功能。</strong></p>\n<h4 id=\"非公平锁的实现\"><a href=\"#非公平锁的实现\" class=\"headerlink\" title=\"非公平锁的实现\"></a>非公平锁的实现</h4><p>非公平锁获取锁的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean nonfairTryAcquire(int acquires) &#123;</div><div class=\"line\">            final Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                if (compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (current == getExclusiveOwnerThread()) &#123;  //判断</div><div class=\"line\">                int nextc = c + acquires;</div><div class=\"line\">                if (nextc &lt; 0) // overflow</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法是Sync中的方法，NonfairSync通过重写tryAcquire()调用。<br>可以看到，该方法增加了一个判断：如果当前线程是已经获取锁的线程，那么将同步状态值State增加 <strong>（这里不需要CAS操作，因为该线程已经获取了锁，没有竞争——相当于偏向锁）</strong>，并返回true，表示同步状态获取成功。</p>\n<p>非公平锁释放锁的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">            int c = getState() - releases;</div><div class=\"line\">            if (Thread.currentThread() != getExclusiveOwnerThread())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            boolean free = false;</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                free = true;</div><div class=\"line\">                setExclusiveOwnerThread(null);</div><div class=\"line\">            &#125;</div><div class=\"line\">            setState(c);</div><div class=\"line\">            return free;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>该方法也是由Sync实现。</p>\n<p>既然获取锁的时候增加了同步状态值，那么释放时自然要减少。<br>可以看到，只有当State值减为0的时候，才返回true，表示释放锁成功，并将占有线程设置为null。</p>\n<h4 id=\"公平锁的实现\"><a href=\"#公平锁的实现\" class=\"headerlink\" title=\"公平锁的实现\"></a>公平锁的实现</h4><p>公平锁获取锁的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">            final Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                if (!hasQueuedPredecessors() &amp;&amp;</div><div class=\"line\">                    compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">                int nextc = c + acquires;</div><div class=\"line\">                if (nextc &lt; 0)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>该方法是FairSync重写的tryAcquire()方法。<br>对比非公平锁的获取，<strong>唯一不同的是该方法在判断时增加了一个条件——hasQueuedPredecessors()方法，该方法判断同步队列中当前节点是否有前驱节点，如果有，表示有线程比当前线程更早请求，则需要等待前面的线程获取释放锁之后才能获取锁。</strong></p>\n<p>公平锁释放锁的方法：  </p>\n<p>同样也是调用Sync中的tryRelease()方法，这里不再赘述。</p>\n<h4 id=\"公平锁与非公平锁的对比\"><a href=\"#公平锁与非公平锁的对比\" class=\"headerlink\" title=\"公平锁与非公平锁的对比\"></a>公平锁与非公平锁的对比</h4><p><strong>公平锁：</strong></p>\n<ul>\n<li>保证了锁的获取顺序，FIFO原则</li>\n<li>不足是需要进行大量的线程切换</li>\n</ul>\n<p><strong>非公平锁</strong>：  </p>\n<ul>\n<li>保证了更大的吞吐量（极少的线程切换）</li>\n<li>不足是可能造成线程“饥饿”（等待很久）</li>\n</ul>\n<p><strong>频繁的线程切换对性能有很大的影响，因此ReentrantLock的默认实现是非公平锁。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、ReentrantLock概念\"><a href=\"#一、ReentrantLock概念\" class=\"headerlink\" title=\"一、ReentrantLock概念\"></a>一、ReentrantLock概念</h3><h4 id=\"重入锁概念\"><a href=\"#重入锁概念\" class=\"headerlink\" title=\"重入锁概念\"></a>重入锁概念</h4><p>什么是重入锁？   顾名思义，就是支持重复进入的锁。<br><strong>定义：支持一个线程对资源的重复加锁。（注意是一个线程）</strong></p>\n<p>回忆前面有关AQS实现的文章，关于独占锁，当一个线程获取锁后，如果该线程再次调用lock()方法，那么该线程会被自己阻塞。<br>原因是在实现tryAcquire()时没有考虑占有锁的线程再次获取锁的场景。因此这个锁是不支持重入的锁。  </p>\n<p>回顾synchronized的实现原理，我们知道它也是支持重进入的锁，即可以多次获取锁。</p>\n<p>那么Lock能不能实现这个功能呢？当然是可以的。<br>ReentrantLock就是一个支持重进入的锁：<strong>在调用lock()方法时，已经获取到锁的线程，可以再次调用lock()方法获取锁而不被阻塞。</strong></p>\n<h4 id=\"公平与非公平\"><a href=\"#公平与非公平\" class=\"headerlink\" title=\"公平与非公平\"></a>公平与非公平</h4><p>关于锁的获取，还有一个公平性的问题，于是就有了公平锁与非公平锁：  </p>\n<ul>\n<li><strong>公平锁：获取锁是顺序的。先对锁请求的线程先获取；</strong>  </li>\n<li><strong>非公平锁：获取锁是无序的。任意线程都可以获取，无关请求先后；</strong></li>\n</ul>\n<p>来看看ReentrantLock的构造函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReentrantLock() &#123;</div><div class=\"line\">        sync = new NonfairSync();</div><div class=\"line\">    &#125;</div><div class=\"line\">public ReentrantLock(boolean fair) &#123;</div><div class=\"line\">        sync = fair ? new FairSync() : new NonfairSync();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到，ReentrantLock默认构造函数是非公平锁，另一个构造函数：  </p>\n<ul>\n<li>传入true：公平锁  </li>\n<li>传入false：非公平锁</li>\n</ul>\n<h3 id=\"二、ReentrantLock的实现原理\"><a href=\"#二、ReentrantLock的实现原理\" class=\"headerlink\" title=\"二、ReentrantLock的实现原理\"></a>二、ReentrantLock的实现原理</h3><h4 id=\"重进入\"><a href=\"#重进入\" class=\"headerlink\" title=\"重进入\"></a>重进入</h4><p><strong>重进入的实现原理是定义了一个获取锁的计数器</strong>。 涉及到以下两个问题：  </p>\n<ol>\n<li><strong>线程再次获取锁。</strong><br>锁需要识别获取锁的线程是否为当前占据锁的线程，如果是，则再次获取锁成功，计数器+1。</li>\n<li><strong>锁的最终释放。</strong><br>线程重复n次获取了锁，在第n次释放锁后，其他线程能够获取到锁。释放锁时，计数器-1，计数器为0时表示锁释放成功。</li>\n</ol>\n<hr>\n<p><strong>ReentrantLock</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ReentrantLock implements Lock, java.io.Serializable &#123;</div><div class=\"line\">private final Sync sync;</div><div class=\"line\">//AQS</div><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;...&#125;;</div><div class=\"line\">//非公平锁</div><div class=\"line\">static final class NonfairSync extends Sync &#123;...&#125;;</div><div class=\"line\">//公平锁</div><div class=\"line\">static final class FairSync extends Sync &#123;...&#125;;</div><div class=\"line\"></div><div class=\"line\">....(省略)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从源码可以看到，<strong>ReentrantLock的实现依旧是依靠队列同步器AQS（Sync继承自AQS），不同的是这里有两个AQS的实现类，NonfairSync和FairSync，分别实现非公平锁和公平锁的功能。</strong></p>\n<h4 id=\"非公平锁的实现\"><a href=\"#非公平锁的实现\" class=\"headerlink\" title=\"非公平锁的实现\"></a>非公平锁的实现</h4><p>非公平锁获取锁的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean nonfairTryAcquire(int acquires) &#123;</div><div class=\"line\">            final Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                if (compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (current == getExclusiveOwnerThread()) &#123;  //判断</div><div class=\"line\">                int nextc = c + acquires;</div><div class=\"line\">                if (nextc &lt; 0) // overflow</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>该方法是Sync中的方法，NonfairSync通过重写tryAcquire()调用。<br>可以看到，该方法增加了一个判断：如果当前线程是已经获取锁的线程，那么将同步状态值State增加 <strong>（这里不需要CAS操作，因为该线程已经获取了锁，没有竞争——相当于偏向锁）</strong>，并返回true，表示同步状态获取成功。</p>\n<p>非公平锁释放锁的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">            int c = getState() - releases;</div><div class=\"line\">            if (Thread.currentThread() != getExclusiveOwnerThread())</div><div class=\"line\">                throw new IllegalMonitorStateException();</div><div class=\"line\">            boolean free = false;</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                free = true;</div><div class=\"line\">                setExclusiveOwnerThread(null);</div><div class=\"line\">            &#125;</div><div class=\"line\">            setState(c);</div><div class=\"line\">            return free;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>该方法也是由Sync实现。</p>\n<p>既然获取锁的时候增加了同步状态值，那么释放时自然要减少。<br>可以看到，只有当State值减为0的时候，才返回true，表示释放锁成功，并将占有线程设置为null。</p>\n<h4 id=\"公平锁的实现\"><a href=\"#公平锁的实现\" class=\"headerlink\" title=\"公平锁的实现\"></a>公平锁的实现</h4><p>公平锁获取锁的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">            final Thread current = Thread.currentThread();</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0) &#123;</div><div class=\"line\">                if (!hasQueuedPredecessors() &amp;&amp;</div><div class=\"line\">                    compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                    setExclusiveOwnerThread(current);</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">                int nextc = c + acquires;</div><div class=\"line\">                if (nextc &lt; 0)</div><div class=\"line\">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">                setState(nextc);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>该方法是FairSync重写的tryAcquire()方法。<br>对比非公平锁的获取，<strong>唯一不同的是该方法在判断时增加了一个条件——hasQueuedPredecessors()方法，该方法判断同步队列中当前节点是否有前驱节点，如果有，表示有线程比当前线程更早请求，则需要等待前面的线程获取释放锁之后才能获取锁。</strong></p>\n<p>公平锁释放锁的方法：  </p>\n<p>同样也是调用Sync中的tryRelease()方法，这里不再赘述。</p>\n<h4 id=\"公平锁与非公平锁的对比\"><a href=\"#公平锁与非公平锁的对比\" class=\"headerlink\" title=\"公平锁与非公平锁的对比\"></a>公平锁与非公平锁的对比</h4><p><strong>公平锁：</strong></p>\n<ul>\n<li>保证了锁的获取顺序，FIFO原则</li>\n<li>不足是需要进行大量的线程切换</li>\n</ul>\n<p><strong>非公平锁</strong>：  </p>\n<ul>\n<li>保证了更大的吞吐量（极少的线程切换）</li>\n<li>不足是可能造成线程“饥饿”（等待很久）</li>\n</ul>\n<p><strong>频繁的线程切换对性能有很大的影响，因此ReentrantLock的默认实现是非公平锁。</strong></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-10-09T16:08:31.273Z","updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt25p001x50tcglvdl9x2","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Jersey—— 一个基于Rest风格的Web Service开发框架","date":"2017-07-10T13:54:27.000Z","_content":"一、什么是Jersey\n-----------\n\n   Jersey 是一个Java规范（JAX-RS）下的基于Rest风格的Web Service开发框架。\n   \n   说的直白一点，主要应用于移动项目，用来给移动终端和服务端传递数据。\n   \n   Rest则是一种目前主流的软件架构风格，它可以通过一套统一的接口为 Web，iOS和Android提供服务。因为有些平台不需要显式的前端，只需要一套提供服务的接口，于是就有了Rest风格的软件架构。\n\n二、Jersey+Spring+Mybatis搭建一个简单的Web Service\n-----------------------------------------\n\n#### 1、在Eclipse下创建一个Maven工程\n工程目录结构如下图：\n\n![目录](http://img.blog.csdn.net/20170710212939408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFieWxvdmVfQmFMZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n   上图中——com.zy包下存放业务代码\n              ——resources文件夹下存放资源文件\n              ——其它主要有Web.xml和Pom.xml文件\n#### 2、pom.xml\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">  \n  <modelVersion>4.0.0</modelVersion>  \n  <groupId>com.zy</groupId>  \n  <artifactId>jersey</artifactId>  \n  <packaging>war</packaging>  \n  <version>0.0.1-SNAPSHOT</version>  \n  <name>jersey Maven Webapp</name>  \n  <url>http://maven.apache.org</url>  \n    \n  <properties>  \n        <!-- 指明使用JDK8 -->  \n        <java-version>1.8</java-version>  \n        <!-- 指明使用utf-8编码 -->  \n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  \n        <spring3.version>4.2.6.RELEASE</spring3.version>  \n        <jersey.version>2.22.2</jersey.version>  \n    </properties>  \n      \n      \n  <dependencies>  \n    <dependency>  \n      <groupId>junit</groupId>  \n      <artifactId>junit</artifactId>  \n      <version>3.8.1</version>  \n      <scope>test</scope>  \n    </dependency>  \n    <dependency>  \n    <groupId>redis.clients</groupId>  \n    <artifactId>jedis</artifactId>  \n    <version>2.9.0</version>  \n    </dependency>  \n    <!-- Jersey依赖 -->  \n    <dependency>  \n            <groupId>org.glassfish.jersey.containers</groupId>  \n            <artifactId>jersey-container-servlet</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.springframework</groupId>  \n            <artifactId>spring-web</artifactId>  \n            <version>${spring3.version}</version>  \n            <scope>compile</scope>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.glassfish.jersey.ext</groupId>  \n            <artifactId>jersey-spring3</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.glassfish.jersey.media</groupId>  \n            <artifactId>jersey-media-json-jackson</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n    <!-- 加入mysql驱动依赖包 -->  \n    <dependency>  \n            <groupId>mysql</groupId>  \n            <artifactId>mysql-connector-java</artifactId>  \n            <version>5.1.27</version>  \n    </dependency>  \n      \n    <!-- 引入mybatis -->  \n        <dependency>  \n            <groupId>org.mybatis</groupId>  \n            <artifactId>mybatis-spring</artifactId>  \n            <version>1.1.1</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.mybatis</groupId>  \n            <artifactId>mybatis</artifactId>  \n            <version>3.2.8</version>  \n        </dependency>  \n    <!-- 引入数据源 -->  \n        <dependency>  \n            <groupId>com.alibaba</groupId>  \n            <artifactId>druid</artifactId>  \n            <version>1.0.1</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.aspectj</groupId>  \n            <artifactId>aspectjweaver</artifactId>  \n            <version>1.7.4</version>  \n        </dependency>  \n        <!-- 加入fastjson依赖包 -->  \n        <dependency>  \n            <groupId>com.alibaba</groupId>  \n            <artifactId>fastjson</artifactId>  \n            <version>1.1.37</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>com.github.pagehelper</groupId>  \n            <artifactId>pagehelper</artifactId>  \n            <version>3.7.6</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>cglib</groupId>  \n            <artifactId>cglib</artifactId>  \n            <version>2.2.2</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>commons-io</groupId>  \n            <artifactId>commons-io</artifactId>  \n            <version>2.4</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.glassfish.jersey.ext</groupId>  \n            <artifactId>jersey-bean-validation</artifactId>  \n            <version>2.22.2</version>  \n            <exclusions>  \n                <exclusion>  \n                    <groupId>org.hibernate</groupId>  \n                    <artifactId>hibernate-validator</artifactId>  \n                </exclusion>  \n            </exclusions>  \n        </dependency>  \n        <dependency>  \n            <groupId>commons-beanutils</groupId>  \n            <artifactId>commons-beanutils</artifactId>  \n            <version>1.7.0</version>  \n        </dependency>  \n          \n        <dependency>  \n            <groupId>org.slf4j</groupId>  \n            <artifactId>slf4j-log4j12</artifactId>  \n            <version>1.7.5</version>  \n        </dependency>  \n        <!-- E起充解码包 -->  \n        <dependency>  \n            <groupId>com.extracme.evready</groupId>  \n            <artifactId>decode</artifactId>  \n            <version>1.1.6</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>com.extracme</groupId>  \n            <artifactId>evreadyHelp</artifactId>  \n            <version>0.0.1-SNAPSHOT</version>  \n        </dependency>  \n        <!-- disconf注解插件 -->  \n        <dependency>  \n            <groupId>com.baidu.disconf</groupId>  \n            <artifactId>disconf-client</artifactId>  \n            <version>2.6.36</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.apache.httpcomponents</groupId>  \n            <artifactId>httpclient</artifactId>  \n            <version>4.5.2</version>  \n        </dependency>  \n  </dependencies>  \n   \n  <build>  \n    <finalName>jersey</finalName>  \n        <plugins>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-surefire-plugin</artifactId>  \n                <version>2.18.1</version>  \n                <configuration>  \n                    <skipTests>true</skipTests>  \n                </configuration>  \n            </plugin>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-compiler-plugin</artifactId>  \n                <version>2.3.2</version>  \n                <configuration>  \n                    <skipTests>true</skipTests>  \n                    <source>1.8</source>  \n                    <target>1.8</target>  \n                </configuration>  \n            </plugin>  \n        </plugins>  \n  </build>  \n</project>  \n```\n\n以上就是项目所依赖的jar包，其中有一些是项目需要的可以忽略，重点是Jersey和spring以及mybatis的依赖，上面有相关的注释。\n#### 3、web.xml\n```\n<web-app>  \n      \n    <listener>  \n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  \n    </listener>  \n    <listener>  \n        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>  \n    </listener>  \n    <context-param>  \n        <param-name>contextConfigLocation</param-name>  \n        <param-value>classpath:spring.xml</param-value>  \n    </context-param>  \n    <servlet>  \n        <servlet-name>jersey</servlet-name>  \n        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>  \n        <init-param>  \n            <param-name>javax.ws.rs.Application</param-name>  \n            <param-value>com.zy.StartApplication</param-value>  \n              \n        </init-param>  \n        <load-on-startup>1</load-on-startup>  \n    </servlet>  \n    <servlet-mapping>  \n        <servlet-name>jersey</servlet-name>  \n        <url-pattern>/*</url-pattern>  \n    </servlet-mapping>  \n</web-app>  \n```\n以上是web.xml的配置。\n——listener定义了Spring框架中的Bean随着Web容器启动而被创建。\n——context-param定义了Spring.xml的位置。\n——servlet定义了org.glassfish.jersey.servlet.ServletContainer，相当于对客户端的请求（/*）进行了拦截，同时还有一个启动参数，它是Application类的实现，需要我们自己定义，利用它来注册资源，实现如下：\n\n```\npublic class StartApplication extends ResourceConfig {  \n  \n    /**  \n     * Register JAX-RS application components.  \n     */  \n    public StartApplication() {  \n        //register(AuthRequestFilter.class);  \n        packages(\"com.zy.resource\");  \n      \n    }  \n}  \n```\n#### 4、spring-mybatis.xml和mybatis-config.xml以及spring.xml\nSpring-mybatis.xml如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xmlns:c=\"http://www.springframework.org/schema/c\" xmlns:cache=\"http://www.springframework.org/schema/cache\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:jee=\"http://www.springframework.org/schema/jee\"  \n    xmlns:lang=\"http://www.springframework.org/schema/lang\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:task=\"http://www.springframework.org/schema/task\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:util=\"http://www.springframework.org/schema/util\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  \n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  \n        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd  \n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  \n        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  \n        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  \n        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd  \n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  \n        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd  \n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  \n        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\">  \n          \n      \n          \n          \n    <!-- 配置测试环境数据源 -->  \n    <bean name=\"test-dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"  \n        init-method=\"init\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/jersey-test?useUnicode=true&characterEncoding=UTF-8\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"\" />  \n  \n        <!-- 初始化连接大小 -->  \n        <property name=\"initialSize\" value=\"0\" />  \n        <!-- 连接池最大使用连接数量 -->  \n        <property name=\"maxActive\" value=\"20\" />  \n        <!-- 连接池最小空闲 -->  \n        <property name=\"minIdle\" value=\"0\" />  \n        <!-- 获取连接最大等待时间 -->  \n        <property name=\"maxWait\" value=\"60000\" />  \n  \n        <property name=\"testOnBorrow\" value=\"false\" />  \n        <property name=\"testOnReturn\" value=\"false\" />  \n        <property name=\"testWhileIdle\" value=\"true\" />  \n  \n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  \n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />  \n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  \n        <property name=\"minEvictableIdleTimeMillis\" value=\"25200000\" />  \n  \n        <!-- 打开removeAbandoned功能 -->  \n        <property name=\"removeAbandoned\" value=\"true\" />  \n        <!-- 1800秒，也就是30分钟 -->  \n        <property name=\"removeAbandonedTimeout\" value=\"1800\" />  \n        <!-- 关闭abanded连接时输出错误日志 -->  \n        <property name=\"logAbandoned\" value=\"true\" />  \n  \n        <!-- 监控数据库 -->  \n        <!-- <property name=\"filters\" value=\"mergeStat\" /> -->  \n        <property name=\"filters\" value=\"stat\" />  \n    </bean>  \n      \n          \n          \n    <!--根据dataSource和configLocation创建一个sqlSessionFactory -->  \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"test-dataSource\" />  \n        <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"></property>  \n    </bean>  \n    <bean id=\"sqlSession\" class=\"org.mybatis.spring.SqlSessionTemplate\"  \n        scope=\"prototype\">  \n        <constructor-arg index=\"0\" ref=\"sqlSessionFactory\" />  \n    </bean>  \n     <!-- 配置事务管理器 -->  \n    <bean name=\"transactionManager\"  \n        class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n        <property name=\"dataSource\" ref=\"test-dataSource\"></property>  \n    </bean>  \n  \n    <!-- 注解方式配置事物 -->  \n     <tx:annotation-driven transaction-manager=\"transactionManager\" />   \n  \n    <bean id=\"sqlSessionCache\" class=\"com.zy.utils.SqlSessionCache\"  \n        init-method=\"initMapper\">  \n        <!-- 扫描的映射mapper.xml的文件路径 -->  \n        <property name=\"packageSearchPath\" value=\"classpath*:com/zy/*/sql/*.xml\"></property>  \n        <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"></property>  \n    </bean>  \n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">  \n        <property name=\"basePackage\" value=\"com.zy.*.mapper\" />  \n    </bean>  \n      \n    <bean id=\"framelnterceptor\" class=\"com.zy.utils.Framelnterceptor\" />   \n    <aop:aspectj-autoproxy/>     \n</beans>  \n```\nmybatis-config.xml如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE configuration PUBLIC    \n    \"-//mybatis.org//DTD Config 3.0//EN\"    \n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">    \n<configuration>    \n<!--     <properties resource=\"project.properties\" /> -->  \n    <settings>    \n        <setting name=\"cacheEnabled\" value=\"true\" />  \n        <setting name=\"lazyLoadingEnabled\" value=\"true\" />  \n        <setting name=\"multipleResultSetsEnabled\" value=\"true\" />  \n        <setting name=\"useColumnLabel\" value=\"true\" />  \n        <setting name=\"useGeneratedKeys\" value=\"false\" />  \n        <setting name=\"autoMappingBehavior\" value=\"PARTIAL\" />  \n        <setting name=\"defaultExecutorType\" value=\"SIMPLE\" />  \n        <setting name=\"defaultStatementTimeout\" value=\"25\" />  \n        <setting name=\"safeRowBoundsEnabled\" value=\"false\" />  \n        <setting name=\"mapUnderscoreToCamelCase\" value=\"false\" />  \n        <setting name=\"localCacheScope\" value=\"SESSION\" />  \n        <!-- <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" /> -->  \n        <setting name=\"jdbcTypeForNull\" value=\"OTHER\" />  \n        <setting name=\"lazyLoadTriggerMethods\" value=\"equals,clone,hashCode,toString\" />   \n    </settings></configuration> \n```\nSpring.xml的配置如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n       xmlns:context=\"http://www.springframework.org/schema/context\"  \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans  \n  http://www.springframework.org/schema/beans/spring-beans.xsd  \n  http://www.springframework.org/schema/context  \n  http://www.springframework.org/schema/context/spring-context.xsd\"  \n        >  \n    <!-- 自动扫描dao和service包(自动注入) -->  \n    <context:component-scan base-package=\"com.zy.*\" />  \n    <import resource=\"classpath:spring-mybatis.xml\" />  \n</beans> \n\n```\n\n注意：在spring-mybatis.xml配置文件的底部配置了一个拦截器——\n`<bean id=\"framelnterceptor\" class=\"com.zy.utils.Framelnterceptor\" />\n`     ——作用是输出请求接口的信息和接口返回的信息，以及获取某些与Token相关的信息。\n\n#### 5、请求过程\n\n```\nResources\npackage com.zy.resource;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n\n@Path(\"/helloworld\")\npublic class RestHelloWorld {\n\t\n\t@GET\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(\"application/json;charset=UTF-8\")\n\tpublic String sayHelloWorld(){\n\t\treturn \"Hello ZY!!!大苏打\";\n\t}\n}\n\n```\n\n————这是一个简单的获取资源，使用GET方式获取，屏幕输出     Hello ZY!!!大苏打 。\n\n资源类是一个简单的 Java 对象 (POJO)，可以实现任何接口，简单、可重用性强。\n资源类上的常用注解有：\n@Path，标注资源类或者方法的相对路径\n@GET，@PUT，@POST，@DELETE，标注方法是HTTP请求的类型。\n@Produces，标注返回的MIME媒体类型\n@Consumes，标注可接受请求的MIME媒体类型\n@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam\n分别标注方法的参数来自于HTTP请求的不同位置，例如\n@PathParam来自于URL的路径，\n@QueryParam来自于URL的查询参数，\n@HeaderParam来自于HTTP请求的头信息，\n@CookieParam来自于HTTP请求的Cookie。\n##**总结：以上就是一个简单的Jersey框架搭建过程，其中涉及到的很多东西这里没有详细解释，日后深入理解再详谈。**\n","source":"_posts/jersey2.md","raw":"---\ntitle: Jersey—— 一个基于Rest风格的Web Service开发框架\ndate: 2017-07-10 21:54:27\ntags: [Java,Jersey]\ncategories: 技术\n---\n一、什么是Jersey\n-----------\n\n   Jersey 是一个Java规范（JAX-RS）下的基于Rest风格的Web Service开发框架。\n   \n   说的直白一点，主要应用于移动项目，用来给移动终端和服务端传递数据。\n   \n   Rest则是一种目前主流的软件架构风格，它可以通过一套统一的接口为 Web，iOS和Android提供服务。因为有些平台不需要显式的前端，只需要一套提供服务的接口，于是就有了Rest风格的软件架构。\n\n二、Jersey+Spring+Mybatis搭建一个简单的Web Service\n-----------------------------------------\n\n#### 1、在Eclipse下创建一个Maven工程\n工程目录结构如下图：\n\n![目录](http://img.blog.csdn.net/20170710212939408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFieWxvdmVfQmFMZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n   上图中——com.zy包下存放业务代码\n              ——resources文件夹下存放资源文件\n              ——其它主要有Web.xml和Pom.xml文件\n#### 2、pom.xml\n\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">  \n  <modelVersion>4.0.0</modelVersion>  \n  <groupId>com.zy</groupId>  \n  <artifactId>jersey</artifactId>  \n  <packaging>war</packaging>  \n  <version>0.0.1-SNAPSHOT</version>  \n  <name>jersey Maven Webapp</name>  \n  <url>http://maven.apache.org</url>  \n    \n  <properties>  \n        <!-- 指明使用JDK8 -->  \n        <java-version>1.8</java-version>  \n        <!-- 指明使用utf-8编码 -->  \n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  \n        <spring3.version>4.2.6.RELEASE</spring3.version>  \n        <jersey.version>2.22.2</jersey.version>  \n    </properties>  \n      \n      \n  <dependencies>  \n    <dependency>  \n      <groupId>junit</groupId>  \n      <artifactId>junit</artifactId>  \n      <version>3.8.1</version>  \n      <scope>test</scope>  \n    </dependency>  \n    <dependency>  \n    <groupId>redis.clients</groupId>  \n    <artifactId>jedis</artifactId>  \n    <version>2.9.0</version>  \n    </dependency>  \n    <!-- Jersey依赖 -->  \n    <dependency>  \n            <groupId>org.glassfish.jersey.containers</groupId>  \n            <artifactId>jersey-container-servlet</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.springframework</groupId>  \n            <artifactId>spring-web</artifactId>  \n            <version>${spring3.version}</version>  \n            <scope>compile</scope>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.glassfish.jersey.ext</groupId>  \n            <artifactId>jersey-spring3</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>org.glassfish.jersey.media</groupId>  \n            <artifactId>jersey-media-json-jackson</artifactId>  \n            <version>${jersey.version}</version>  \n        </dependency>  \n    <!-- 加入mysql驱动依赖包 -->  \n    <dependency>  \n            <groupId>mysql</groupId>  \n            <artifactId>mysql-connector-java</artifactId>  \n            <version>5.1.27</version>  \n    </dependency>  \n      \n    <!-- 引入mybatis -->  \n        <dependency>  \n            <groupId>org.mybatis</groupId>  \n            <artifactId>mybatis-spring</artifactId>  \n            <version>1.1.1</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.mybatis</groupId>  \n            <artifactId>mybatis</artifactId>  \n            <version>3.2.8</version>  \n        </dependency>  \n    <!-- 引入数据源 -->  \n        <dependency>  \n            <groupId>com.alibaba</groupId>  \n            <artifactId>druid</artifactId>  \n            <version>1.0.1</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.aspectj</groupId>  \n            <artifactId>aspectjweaver</artifactId>  \n            <version>1.7.4</version>  \n        </dependency>  \n        <!-- 加入fastjson依赖包 -->  \n        <dependency>  \n            <groupId>com.alibaba</groupId>  \n            <artifactId>fastjson</artifactId>  \n            <version>1.1.37</version>  \n        </dependency>  \n  \n        <dependency>  \n            <groupId>com.github.pagehelper</groupId>  \n            <artifactId>pagehelper</artifactId>  \n            <version>3.7.6</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>cglib</groupId>  \n            <artifactId>cglib</artifactId>  \n            <version>2.2.2</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>commons-io</groupId>  \n            <artifactId>commons-io</artifactId>  \n            <version>2.4</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.glassfish.jersey.ext</groupId>  \n            <artifactId>jersey-bean-validation</artifactId>  \n            <version>2.22.2</version>  \n            <exclusions>  \n                <exclusion>  \n                    <groupId>org.hibernate</groupId>  \n                    <artifactId>hibernate-validator</artifactId>  \n                </exclusion>  \n            </exclusions>  \n        </dependency>  \n        <dependency>  \n            <groupId>commons-beanutils</groupId>  \n            <artifactId>commons-beanutils</artifactId>  \n            <version>1.7.0</version>  \n        </dependency>  \n          \n        <dependency>  \n            <groupId>org.slf4j</groupId>  \n            <artifactId>slf4j-log4j12</artifactId>  \n            <version>1.7.5</version>  \n        </dependency>  \n        <!-- E起充解码包 -->  \n        <dependency>  \n            <groupId>com.extracme.evready</groupId>  \n            <artifactId>decode</artifactId>  \n            <version>1.1.6</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>com.extracme</groupId>  \n            <artifactId>evreadyHelp</artifactId>  \n            <version>0.0.1-SNAPSHOT</version>  \n        </dependency>  \n        <!-- disconf注解插件 -->  \n        <dependency>  \n            <groupId>com.baidu.disconf</groupId>  \n            <artifactId>disconf-client</artifactId>  \n            <version>2.6.36</version>  \n        </dependency>  \n        <dependency>  \n            <groupId>org.apache.httpcomponents</groupId>  \n            <artifactId>httpclient</artifactId>  \n            <version>4.5.2</version>  \n        </dependency>  \n  </dependencies>  \n   \n  <build>  \n    <finalName>jersey</finalName>  \n        <plugins>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-surefire-plugin</artifactId>  \n                <version>2.18.1</version>  \n                <configuration>  \n                    <skipTests>true</skipTests>  \n                </configuration>  \n            </plugin>  \n            <plugin>  \n                <groupId>org.apache.maven.plugins</groupId>  \n                <artifactId>maven-compiler-plugin</artifactId>  \n                <version>2.3.2</version>  \n                <configuration>  \n                    <skipTests>true</skipTests>  \n                    <source>1.8</source>  \n                    <target>1.8</target>  \n                </configuration>  \n            </plugin>  \n        </plugins>  \n  </build>  \n</project>  \n```\n\n以上就是项目所依赖的jar包，其中有一些是项目需要的可以忽略，重点是Jersey和spring以及mybatis的依赖，上面有相关的注释。\n#### 3、web.xml\n```\n<web-app>  \n      \n    <listener>  \n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  \n    </listener>  \n    <listener>  \n        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>  \n    </listener>  \n    <context-param>  \n        <param-name>contextConfigLocation</param-name>  \n        <param-value>classpath:spring.xml</param-value>  \n    </context-param>  \n    <servlet>  \n        <servlet-name>jersey</servlet-name>  \n        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>  \n        <init-param>  \n            <param-name>javax.ws.rs.Application</param-name>  \n            <param-value>com.zy.StartApplication</param-value>  \n              \n        </init-param>  \n        <load-on-startup>1</load-on-startup>  \n    </servlet>  \n    <servlet-mapping>  \n        <servlet-name>jersey</servlet-name>  \n        <url-pattern>/*</url-pattern>  \n    </servlet-mapping>  \n</web-app>  \n```\n以上是web.xml的配置。\n——listener定义了Spring框架中的Bean随着Web容器启动而被创建。\n——context-param定义了Spring.xml的位置。\n——servlet定义了org.glassfish.jersey.servlet.ServletContainer，相当于对客户端的请求（/*）进行了拦截，同时还有一个启动参数，它是Application类的实现，需要我们自己定义，利用它来注册资源，实现如下：\n\n```\npublic class StartApplication extends ResourceConfig {  \n  \n    /**  \n     * Register JAX-RS application components.  \n     */  \n    public StartApplication() {  \n        //register(AuthRequestFilter.class);  \n        packages(\"com.zy.resource\");  \n      \n    }  \n}  \n```\n#### 4、spring-mybatis.xml和mybatis-config.xml以及spring.xml\nSpring-mybatis.xml如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"  \n    xmlns:c=\"http://www.springframework.org/schema/c\" xmlns:cache=\"http://www.springframework.org/schema/cache\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\" xmlns:jee=\"http://www.springframework.org/schema/jee\"  \n    xmlns:lang=\"http://www.springframework.org/schema/lang\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\"  \n    xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:task=\"http://www.springframework.org/schema/task\"  \n    xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:util=\"http://www.springframework.org/schema/util\"  \n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  \n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  \n        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd  \n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  \n        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  \n        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  \n        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd  \n        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  \n        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd  \n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  \n        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\">  \n          \n      \n          \n          \n    <!-- 配置测试环境数据源 -->  \n    <bean name=\"test-dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"  \n        init-method=\"init\" destroy-method=\"close\">  \n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />  \n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/jersey-test?useUnicode=true&characterEncoding=UTF-8\" />  \n        <property name=\"username\" value=\"root\" />  \n        <property name=\"password\" value=\"\" />  \n  \n        <!-- 初始化连接大小 -->  \n        <property name=\"initialSize\" value=\"0\" />  \n        <!-- 连接池最大使用连接数量 -->  \n        <property name=\"maxActive\" value=\"20\" />  \n        <!-- 连接池最小空闲 -->  \n        <property name=\"minIdle\" value=\"0\" />  \n        <!-- 获取连接最大等待时间 -->  \n        <property name=\"maxWait\" value=\"60000\" />  \n  \n        <property name=\"testOnBorrow\" value=\"false\" />  \n        <property name=\"testOnReturn\" value=\"false\" />  \n        <property name=\"testWhileIdle\" value=\"true\" />  \n  \n        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  \n        <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\" />  \n        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  \n        <property name=\"minEvictableIdleTimeMillis\" value=\"25200000\" />  \n  \n        <!-- 打开removeAbandoned功能 -->  \n        <property name=\"removeAbandoned\" value=\"true\" />  \n        <!-- 1800秒，也就是30分钟 -->  \n        <property name=\"removeAbandonedTimeout\" value=\"1800\" />  \n        <!-- 关闭abanded连接时输出错误日志 -->  \n        <property name=\"logAbandoned\" value=\"true\" />  \n  \n        <!-- 监控数据库 -->  \n        <!-- <property name=\"filters\" value=\"mergeStat\" /> -->  \n        <property name=\"filters\" value=\"stat\" />  \n    </bean>  \n      \n          \n          \n    <!--根据dataSource和configLocation创建一个sqlSessionFactory -->  \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">  \n        <property name=\"dataSource\" ref=\"test-dataSource\" />  \n        <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"></property>  \n    </bean>  \n    <bean id=\"sqlSession\" class=\"org.mybatis.spring.SqlSessionTemplate\"  \n        scope=\"prototype\">  \n        <constructor-arg index=\"0\" ref=\"sqlSessionFactory\" />  \n    </bean>  \n     <!-- 配置事务管理器 -->  \n    <bean name=\"transactionManager\"  \n        class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">  \n        <property name=\"dataSource\" ref=\"test-dataSource\"></property>  \n    </bean>  \n  \n    <!-- 注解方式配置事物 -->  \n     <tx:annotation-driven transaction-manager=\"transactionManager\" />   \n  \n    <bean id=\"sqlSessionCache\" class=\"com.zy.utils.SqlSessionCache\"  \n        init-method=\"initMapper\">  \n        <!-- 扫描的映射mapper.xml的文件路径 -->  \n        <property name=\"packageSearchPath\" value=\"classpath*:com/zy/*/sql/*.xml\"></property>  \n        <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"></property>  \n    </bean>  \n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">  \n        <property name=\"basePackage\" value=\"com.zy.*.mapper\" />  \n    </bean>  \n      \n    <bean id=\"framelnterceptor\" class=\"com.zy.utils.Framelnterceptor\" />   \n    <aop:aspectj-autoproxy/>     \n</beans>  \n```\nmybatis-config.xml如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE configuration PUBLIC    \n    \"-//mybatis.org//DTD Config 3.0//EN\"    \n    \"http://mybatis.org/dtd/mybatis-3-config.dtd\">    \n<configuration>    \n<!--     <properties resource=\"project.properties\" /> -->  \n    <settings>    \n        <setting name=\"cacheEnabled\" value=\"true\" />  \n        <setting name=\"lazyLoadingEnabled\" value=\"true\" />  \n        <setting name=\"multipleResultSetsEnabled\" value=\"true\" />  \n        <setting name=\"useColumnLabel\" value=\"true\" />  \n        <setting name=\"useGeneratedKeys\" value=\"false\" />  \n        <setting name=\"autoMappingBehavior\" value=\"PARTIAL\" />  \n        <setting name=\"defaultExecutorType\" value=\"SIMPLE\" />  \n        <setting name=\"defaultStatementTimeout\" value=\"25\" />  \n        <setting name=\"safeRowBoundsEnabled\" value=\"false\" />  \n        <setting name=\"mapUnderscoreToCamelCase\" value=\"false\" />  \n        <setting name=\"localCacheScope\" value=\"SESSION\" />  \n        <!-- <setting name=\"logImpl\" value=\"STDOUT_LOGGING\" /> -->  \n        <setting name=\"jdbcTypeForNull\" value=\"OTHER\" />  \n        <setting name=\"lazyLoadTriggerMethods\" value=\"equals,clone,hashCode,toString\" />   \n    </settings></configuration> \n```\nSpring.xml的配置如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n       xmlns:context=\"http://www.springframework.org/schema/context\"  \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans  \n  http://www.springframework.org/schema/beans/spring-beans.xsd  \n  http://www.springframework.org/schema/context  \n  http://www.springframework.org/schema/context/spring-context.xsd\"  \n        >  \n    <!-- 自动扫描dao和service包(自动注入) -->  \n    <context:component-scan base-package=\"com.zy.*\" />  \n    <import resource=\"classpath:spring-mybatis.xml\" />  \n</beans> \n\n```\n\n注意：在spring-mybatis.xml配置文件的底部配置了一个拦截器——\n`<bean id=\"framelnterceptor\" class=\"com.zy.utils.Framelnterceptor\" />\n`     ——作用是输出请求接口的信息和接口返回的信息，以及获取某些与Token相关的信息。\n\n#### 5、请求过程\n\n```\nResources\npackage com.zy.resource;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n\n\n@Path(\"/helloworld\")\npublic class RestHelloWorld {\n\t\n\t@GET\n\t@Consumes(MediaType.APPLICATION_JSON)\n\t@Produces(\"application/json;charset=UTF-8\")\n\tpublic String sayHelloWorld(){\n\t\treturn \"Hello ZY!!!大苏打\";\n\t}\n}\n\n```\n\n————这是一个简单的获取资源，使用GET方式获取，屏幕输出     Hello ZY!!!大苏打 。\n\n资源类是一个简单的 Java 对象 (POJO)，可以实现任何接口，简单、可重用性强。\n资源类上的常用注解有：\n@Path，标注资源类或者方法的相对路径\n@GET，@PUT，@POST，@DELETE，标注方法是HTTP请求的类型。\n@Produces，标注返回的MIME媒体类型\n@Consumes，标注可接受请求的MIME媒体类型\n@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam\n分别标注方法的参数来自于HTTP请求的不同位置，例如\n@PathParam来自于URL的路径，\n@QueryParam来自于URL的查询参数，\n@HeaderParam来自于HTTP请求的头信息，\n@CookieParam来自于HTTP请求的Cookie。\n##**总结：以上就是一个简单的Jersey框架搭建过程，其中涉及到的很多东西这里没有详细解释，日后深入理解再详谈。**\n","slug":"jersey2","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt25p002150tcr0yuxhqs","content":"<h2 id=\"一、什么是Jersey\"><a href=\"#一、什么是Jersey\" class=\"headerlink\" title=\"一、什么是Jersey\"></a>一、什么是Jersey</h2><p>   Jersey 是一个Java规范（JAX-RS）下的基于Rest风格的Web Service开发框架。</p>\n<p>   说的直白一点，主要应用于移动项目，用来给移动终端和服务端传递数据。</p>\n<p>   Rest则是一种目前主流的软件架构风格，它可以通过一套统一的接口为 Web，iOS和Android提供服务。因为有些平台不需要显式的前端，只需要一套提供服务的接口，于是就有了Rest风格的软件架构。</p>\n<h2 id=\"二、Jersey-Spring-Mybatis搭建一个简单的Web-Service\"><a href=\"#二、Jersey-Spring-Mybatis搭建一个简单的Web-Service\" class=\"headerlink\" title=\"二、Jersey+Spring+Mybatis搭建一个简单的Web Service\"></a>二、Jersey+Spring+Mybatis搭建一个简单的Web Service</h2><h4 id=\"1、在Eclipse下创建一个Maven工程\"><a href=\"#1、在Eclipse下创建一个Maven工程\" class=\"headerlink\" title=\"1、在Eclipse下创建一个Maven工程\"></a>1、在Eclipse下创建一个Maven工程</h4><p>工程目录结构如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170710212939408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFieWxvdmVfQmFMZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"目录\"><br>   上图中——com.zy包下存放业务代码<br>              ——resources文件夹下存放资源文件<br>              ——其它主要有Web.xml和Pom.xml文件</p>\n<h4 id=\"2、pom-xml\"><a href=\"#2、pom-xml\" class=\"headerlink\" title=\"2、pom.xml\"></a>2、pom.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </div><div class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;  </div><div class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  </div><div class=\"line\">  &lt;groupId&gt;com.zy&lt;/groupId&gt;  </div><div class=\"line\">  &lt;artifactId&gt;jersey&lt;/artifactId&gt;  </div><div class=\"line\">  &lt;packaging&gt;war&lt;/packaging&gt;  </div><div class=\"line\">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </div><div class=\"line\">  &lt;name&gt;jersey Maven Webapp&lt;/name&gt;  </div><div class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;  </div><div class=\"line\">    </div><div class=\"line\">  &lt;properties&gt;  </div><div class=\"line\">        &lt;!-- 指明使用JDK8 --&gt;  </div><div class=\"line\">        &lt;java-version&gt;1.8&lt;/java-version&gt;  </div><div class=\"line\">        &lt;!-- 指明使用utf-8编码 --&gt;  </div><div class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  </div><div class=\"line\">        &lt;spring3.version&gt;4.2.6.RELEASE&lt;/spring3.version&gt;  </div><div class=\"line\">        &lt;jersey.version&gt;2.22.2&lt;/jersey.version&gt;  </div><div class=\"line\">    &lt;/properties&gt;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">  &lt;dependencies&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;  </div><div class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;  </div><div class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;  </div><div class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;  </div><div class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;  </div><div class=\"line\">    &lt;version&gt;2.9.0&lt;/version&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- Jersey依赖 --&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;spring3.version&#125;&lt;/version&gt;  </div><div class=\"line\">            &lt;scope&gt;compile&lt;/scope&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-spring3&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-media-json-jackson&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- 加入mysql驱动依赖包 --&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;5.1.27&lt;/version&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;!-- 引入mybatis --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.1&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;3.2.8&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- 引入数据源 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;druid&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.0.1&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.4&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- 加入fastjson依赖包 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.37&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;3.7.6&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;cglib&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;cglib&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.2.2&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;commons-io&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.4&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-bean-validation&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.22.2&lt;/version&gt;  </div><div class=\"line\">            &lt;exclusions&gt;  </div><div class=\"line\">                &lt;exclusion&gt;  </div><div class=\"line\">                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;  </div><div class=\"line\">                    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;/exclusion&gt;  </div><div class=\"line\">            &lt;/exclusions&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.0&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">          </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.5&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- E起充解码包 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.extracme.evready&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;decode&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.6&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.extracme&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;evreadyHelp&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- disconf注解插件 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.baidu.disconf&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;disconf-client&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.6.36&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;4.5.2&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  &lt;/dependencies&gt;  </div><div class=\"line\">   </div><div class=\"line\">  &lt;build&gt;  </div><div class=\"line\">    &lt;finalName&gt;jersey&lt;/finalName&gt;  </div><div class=\"line\">        &lt;plugins&gt;  </div><div class=\"line\">            &lt;plugin&gt;  </div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class=\"line\">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;version&gt;2.18.1&lt;/version&gt;  </div><div class=\"line\">                &lt;configuration&gt;  </div><div class=\"line\">                    &lt;skipTests&gt;true&lt;/skipTests&gt;  </div><div class=\"line\">                &lt;/configuration&gt;  </div><div class=\"line\">            &lt;/plugin&gt;  </div><div class=\"line\">            &lt;plugin&gt;  </div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;version&gt;2.3.2&lt;/version&gt;  </div><div class=\"line\">                &lt;configuration&gt;  </div><div class=\"line\">                    &lt;skipTests&gt;true&lt;/skipTests&gt;  </div><div class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;  </div><div class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;  </div><div class=\"line\">                &lt;/configuration&gt;  </div><div class=\"line\">            &lt;/plugin&gt;  </div><div class=\"line\">        &lt;/plugins&gt;  </div><div class=\"line\">  &lt;/build&gt;  </div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>以上就是项目所依赖的jar包，其中有一些是项目需要的可以忽略，重点是Jersey和spring以及mybatis的依赖，上面有相关的注释。</p>\n<h4 id=\"3、web-xml\"><a href=\"#3、web-xml\" class=\"headerlink\" title=\"3、web.xml\"></a>3、web.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;web-app&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;listener&gt;  </div><div class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </div><div class=\"line\">    &lt;/listener&gt;  </div><div class=\"line\">    &lt;listener&gt;  </div><div class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;  </div><div class=\"line\">    &lt;/listener&gt;  </div><div class=\"line\">    &lt;context-param&gt;  </div><div class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\">        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;  </div><div class=\"line\">    &lt;/context-param&gt;  </div><div class=\"line\">    &lt;servlet&gt;  </div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;  </div><div class=\"line\">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;  </div><div class=\"line\">        &lt;init-param&gt;  </div><div class=\"line\">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;  </div><div class=\"line\">            &lt;param-value&gt;com.zy.StartApplication&lt;/param-value&gt;  </div><div class=\"line\">              </div><div class=\"line\">        &lt;/init-param&gt;  </div><div class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">    &lt;/servlet&gt;  </div><div class=\"line\">    &lt;servlet-mapping&gt;  </div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;  </div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </div><div class=\"line\">    &lt;/servlet-mapping&gt;  </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n<p>以上是web.xml的配置。<br>——listener定义了Spring框架中的Bean随着Web容器启动而被创建。<br>——context-param定义了Spring.xml的位置。<br>——servlet定义了org.glassfish.jersey.servlet.ServletContainer，相当于对客户端的请求（/*）进行了拦截，同时还有一个启动参数，它是Application类的实现，需要我们自己定义，利用它来注册资源，实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StartApplication extends ResourceConfig &#123;  </div><div class=\"line\">  </div><div class=\"line\">    /**  </div><div class=\"line\">     * Register JAX-RS application components.  </div><div class=\"line\">     */  </div><div class=\"line\">    public StartApplication() &#123;  </div><div class=\"line\">        //register(AuthRequestFilter.class);  </div><div class=\"line\">        packages(&quot;com.zy.resource&quot;);  </div><div class=\"line\">      </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、spring-mybatis-xml和mybatis-config-xml以及spring-xml\"><a href=\"#4、spring-mybatis-xml和mybatis-config-xml以及spring-xml\" class=\"headerlink\" title=\"4、spring-mybatis.xml和mybatis-config.xml以及spring.xml\"></a>4、spring-mybatis.xml和mybatis-config.xml以及spring.xml</h4><p>Spring-mybatis.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;  </div><div class=\"line\">    xmlns:c=&quot;http://www.springframework.org/schema/c&quot; xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;  </div><div class=\"line\">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </div><div class=\"line\">    xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:jee=&quot;http://www.springframework.org/schema/jee&quot;  </div><div class=\"line\">    xmlns:lang=&quot;http://www.springframework.org/schema/lang&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;  </div><div class=\"line\">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:task=&quot;http://www.springframework.org/schema/task&quot;  </div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;  </div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  </div><div class=\"line\">          </div><div class=\"line\">      </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &lt;!-- 配置测试环境数据源 --&gt;  </div><div class=\"line\">    &lt;bean name=&quot;test-dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;  </div><div class=\"line\">        init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jersey-test?useUnicode=true&amp;characterEncoding=UTF-8&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 初始化连接大小 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;0&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 连接池最大使用连接数量 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 连接池最小空闲 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;0&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 获取连接最大等待时间 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;25200000&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 打开removeAbandoned功能 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 1800秒，也就是30分钟 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 关闭abanded连接时输出错误日志 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 监控数据库 --&gt;  </div><div class=\"line\">        &lt;!-- &lt;property name=&quot;filters&quot; value=&quot;mergeStat&quot; /&gt; --&gt;  </div><div class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;stat&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">      </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &lt;!--根据dataSource和configLocation创建一个sqlSessionFactory --&gt;  </div><div class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;test-dataSource&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;  </div><div class=\"line\">        scope=&quot;prototype&quot;&gt;  </div><div class=\"line\">        &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">     &lt;!-- 配置事务管理器 --&gt;  </div><div class=\"line\">    &lt;bean name=&quot;transactionManager&quot;  </div><div class=\"line\">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;test-dataSource&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">  </div><div class=\"line\">    &lt;!-- 注解方式配置事物 --&gt;  </div><div class=\"line\">     &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;   </div><div class=\"line\">  </div><div class=\"line\">    &lt;bean id=&quot;sqlSessionCache&quot; class=&quot;com.zy.utils.SqlSessionCache&quot;  </div><div class=\"line\">        init-method=&quot;initMapper&quot;&gt;  </div><div class=\"line\">        &lt;!-- 扫描的映射mapper.xml的文件路径 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;packageSearchPath&quot; value=&quot;classpath*:com/zy/*/sql/*.xml&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.zy.*.mapper&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;bean id=&quot;framelnterceptor&quot; class=&quot;com.zy.utils.Framelnterceptor&quot; /&gt;   </div><div class=\"line\">    &lt;aop:aspectj-autoproxy/&gt;     </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>mybatis-config.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">&lt;!DOCTYPE configuration PUBLIC    </div><div class=\"line\">    &quot;-//mybatis.org//DTD Config 3.0//EN&quot;    </div><div class=\"line\">    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;    </div><div class=\"line\">&lt;configuration&gt;    </div><div class=\"line\">&lt;!--     &lt;properties resource=&quot;project.properties&quot; /&gt; --&gt;  </div><div class=\"line\">    &lt;settings&gt;    </div><div class=\"line\">        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot; /&gt;  </div><div class=\"line\">        &lt;!-- &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt; --&gt;  </div><div class=\"line\">        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot; /&gt;   </div><div class=\"line\">    &lt;/settings&gt;&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>Spring.xml的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">  </div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </div><div class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </div><div class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  </div><div class=\"line\">  http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class=\"line\">  http://www.springframework.org/schema/context  </div><div class=\"line\">  http://www.springframework.org/schema/context/spring-context.xsd&quot;  </div><div class=\"line\">        &gt;  </div><div class=\"line\">    &lt;!-- 自动扫描dao和service包(自动注入) --&gt;  </div><div class=\"line\">    &lt;context:component-scan base-package=&quot;com.zy.*&quot; /&gt;  </div><div class=\"line\">    &lt;import resource=&quot;classpath:spring-mybatis.xml&quot; /&gt;  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>注意：在spring-mybatis.xml配置文件的底部配置了一个拦截器——<br><code>&lt;bean id=&quot;framelnterceptor&quot; class=&quot;com.zy.utils.Framelnterceptor&quot; /&gt;</code>     ——作用是输出请求接口的信息和接口返回的信息，以及获取某些与Token相关的信息。</p>\n<h4 id=\"5、请求过程\"><a href=\"#5、请求过程\" class=\"headerlink\" title=\"5、请求过程\"></a>5、请求过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resources</div><div class=\"line\">package com.zy.resource;</div><div class=\"line\"></div><div class=\"line\">import javax.ws.rs.Consumes;</div><div class=\"line\">import javax.ws.rs.GET;</div><div class=\"line\">import javax.ws.rs.Path;</div><div class=\"line\">import javax.ws.rs.Produces;</div><div class=\"line\">import javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/helloworld&quot;)</div><div class=\"line\">public class RestHelloWorld &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t@GET</div><div class=\"line\">\t@Consumes(MediaType.APPLICATION_JSON)</div><div class=\"line\">\t@Produces(&quot;application/json;charset=UTF-8&quot;)</div><div class=\"line\">\tpublic String sayHelloWorld()&#123;</div><div class=\"line\">\t\treturn &quot;Hello ZY!!!大苏打&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>————这是一个简单的获取资源，使用GET方式获取，屏幕输出     Hello ZY!!!大苏打 。</p>\n<p>资源类是一个简单的 Java 对象 (POJO)，可以实现任何接口，简单、可重用性强。<br>资源类上的常用注解有：<br>@Path，标注资源类或者方法的相对路径<br>@GET，@PUT，@POST，@DELETE，标注方法是HTTP请求的类型。<br>@Produces，标注返回的MIME媒体类型<br>@Consumes，标注可接受请求的MIME媒体类型<br>@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam<br>分别标注方法的参数来自于HTTP请求的不同位置，例如<br>@PathParam来自于URL的路径，<br>@QueryParam来自于URL的查询参数，<br>@HeaderParam来自于HTTP请求的头信息，<br>@CookieParam来自于HTTP请求的Cookie。</p>\n<p>##<strong>总结：以上就是一个简单的Jersey框架搭建过程，其中涉及到的很多东西这里没有详细解释，日后深入理解再详谈。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Jersey\"><a href=\"#一、什么是Jersey\" class=\"headerlink\" title=\"一、什么是Jersey\"></a>一、什么是Jersey</h2><p>   Jersey 是一个Java规范（JAX-RS）下的基于Rest风格的Web Service开发框架。</p>\n<p>   说的直白一点，主要应用于移动项目，用来给移动终端和服务端传递数据。</p>\n<p>   Rest则是一种目前主流的软件架构风格，它可以通过一套统一的接口为 Web，iOS和Android提供服务。因为有些平台不需要显式的前端，只需要一套提供服务的接口，于是就有了Rest风格的软件架构。</p>\n<h2 id=\"二、Jersey-Spring-Mybatis搭建一个简单的Web-Service\"><a href=\"#二、Jersey-Spring-Mybatis搭建一个简单的Web-Service\" class=\"headerlink\" title=\"二、Jersey+Spring+Mybatis搭建一个简单的Web Service\"></a>二、Jersey+Spring+Mybatis搭建一个简单的Web Service</h2><h4 id=\"1、在Eclipse下创建一个Maven工程\"><a href=\"#1、在Eclipse下创建一个Maven工程\" class=\"headerlink\" title=\"1、在Eclipse下创建一个Maven工程\"></a>1、在Eclipse下创建一个Maven工程</h4><p>工程目录结构如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170710212939408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFieWxvdmVfQmFMZQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"目录\"><br>   上图中——com.zy包下存放业务代码<br>              ——resources文件夹下存放资源文件<br>              ——其它主要有Web.xml和Pom.xml文件</p>\n<h4 id=\"2、pom-xml\"><a href=\"#2、pom-xml\" class=\"headerlink\" title=\"2、pom.xml\"></a>2、pom.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </div><div class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;  </div><div class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  </div><div class=\"line\">  &lt;groupId&gt;com.zy&lt;/groupId&gt;  </div><div class=\"line\">  &lt;artifactId&gt;jersey&lt;/artifactId&gt;  </div><div class=\"line\">  &lt;packaging&gt;war&lt;/packaging&gt;  </div><div class=\"line\">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </div><div class=\"line\">  &lt;name&gt;jersey Maven Webapp&lt;/name&gt;  </div><div class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;  </div><div class=\"line\">    </div><div class=\"line\">  &lt;properties&gt;  </div><div class=\"line\">        &lt;!-- 指明使用JDK8 --&gt;  </div><div class=\"line\">        &lt;java-version&gt;1.8&lt;/java-version&gt;  </div><div class=\"line\">        &lt;!-- 指明使用utf-8编码 --&gt;  </div><div class=\"line\">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  </div><div class=\"line\">        &lt;spring3.version&gt;4.2.6.RELEASE&lt;/spring3.version&gt;  </div><div class=\"line\">        &lt;jersey.version&gt;2.22.2&lt;/jersey.version&gt;  </div><div class=\"line\">    &lt;/properties&gt;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">  &lt;dependencies&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;  </div><div class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;  </div><div class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;  </div><div class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;  </div><div class=\"line\">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;  </div><div class=\"line\">    &lt;version&gt;2.9.0&lt;/version&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- Jersey依赖 --&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;spring3.version&#125;&lt;/version&gt;  </div><div class=\"line\">            &lt;scope&gt;compile&lt;/scope&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-spring3&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-media-json-jackson&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;$&#123;jersey.version&#125;&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- 加入mysql驱动依赖包 --&gt;  </div><div class=\"line\">    &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;5.1.27&lt;/version&gt;  </div><div class=\"line\">    &lt;/dependency&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;!-- 引入mybatis --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.1&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;3.2.8&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">    &lt;!-- 引入数据源 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;druid&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.0.1&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.4&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- 加入fastjson依赖包 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.37&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;3.7.6&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;cglib&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;cglib&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.2.2&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;commons-io&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.4&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;jersey-bean-validation&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.22.2&lt;/version&gt;  </div><div class=\"line\">            &lt;exclusions&gt;  </div><div class=\"line\">                &lt;exclusion&gt;  </div><div class=\"line\">                    &lt;groupId&gt;org.hibernate&lt;/groupId&gt;  </div><div class=\"line\">                    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;/exclusion&gt;  </div><div class=\"line\">            &lt;/exclusions&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.0&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">          </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.7.5&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- E起充解码包 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.extracme.evready&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;decode&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;1.1.6&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.extracme&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;evreadyHelp&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;!-- disconf注解插件 --&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;com.baidu.disconf&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;disconf-client&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;2.6.36&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">        &lt;dependency&gt;  </div><div class=\"line\">            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;  </div><div class=\"line\">            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;  </div><div class=\"line\">            &lt;version&gt;4.5.2&lt;/version&gt;  </div><div class=\"line\">        &lt;/dependency&gt;  </div><div class=\"line\">  &lt;/dependencies&gt;  </div><div class=\"line\">   </div><div class=\"line\">  &lt;build&gt;  </div><div class=\"line\">    &lt;finalName&gt;jersey&lt;/finalName&gt;  </div><div class=\"line\">        &lt;plugins&gt;  </div><div class=\"line\">            &lt;plugin&gt;  </div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class=\"line\">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;version&gt;2.18.1&lt;/version&gt;  </div><div class=\"line\">                &lt;configuration&gt;  </div><div class=\"line\">                    &lt;skipTests&gt;true&lt;/skipTests&gt;  </div><div class=\"line\">                &lt;/configuration&gt;  </div><div class=\"line\">            &lt;/plugin&gt;  </div><div class=\"line\">            &lt;plugin&gt;  </div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;  </div><div class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;  </div><div class=\"line\">                &lt;version&gt;2.3.2&lt;/version&gt;  </div><div class=\"line\">                &lt;configuration&gt;  </div><div class=\"line\">                    &lt;skipTests&gt;true&lt;/skipTests&gt;  </div><div class=\"line\">                    &lt;source&gt;1.8&lt;/source&gt;  </div><div class=\"line\">                    &lt;target&gt;1.8&lt;/target&gt;  </div><div class=\"line\">                &lt;/configuration&gt;  </div><div class=\"line\">            &lt;/plugin&gt;  </div><div class=\"line\">        &lt;/plugins&gt;  </div><div class=\"line\">  &lt;/build&gt;  </div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<p>以上就是项目所依赖的jar包，其中有一些是项目需要的可以忽略，重点是Jersey和spring以及mybatis的依赖，上面有相关的注释。</p>\n<h4 id=\"3、web-xml\"><a href=\"#3、web-xml\" class=\"headerlink\" title=\"3、web.xml\"></a>3、web.xml</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;web-app&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;listener&gt;  </div><div class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;  </div><div class=\"line\">    &lt;/listener&gt;  </div><div class=\"line\">    &lt;listener&gt;  </div><div class=\"line\">        &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;  </div><div class=\"line\">    &lt;/listener&gt;  </div><div class=\"line\">    &lt;context-param&gt;  </div><div class=\"line\">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;  </div><div class=\"line\">        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;  </div><div class=\"line\">    &lt;/context-param&gt;  </div><div class=\"line\">    &lt;servlet&gt;  </div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;  </div><div class=\"line\">        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;  </div><div class=\"line\">        &lt;init-param&gt;  </div><div class=\"line\">            &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;  </div><div class=\"line\">            &lt;param-value&gt;com.zy.StartApplication&lt;/param-value&gt;  </div><div class=\"line\">              </div><div class=\"line\">        &lt;/init-param&gt;  </div><div class=\"line\">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  </div><div class=\"line\">    &lt;/servlet&gt;  </div><div class=\"line\">    &lt;servlet-mapping&gt;  </div><div class=\"line\">        &lt;servlet-name&gt;jersey&lt;/servlet-name&gt;  </div><div class=\"line\">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  </div><div class=\"line\">    &lt;/servlet-mapping&gt;  </div><div class=\"line\">&lt;/web-app&gt;</div></pre></td></tr></table></figure>\n<p>以上是web.xml的配置。<br>——listener定义了Spring框架中的Bean随着Web容器启动而被创建。<br>——context-param定义了Spring.xml的位置。<br>——servlet定义了org.glassfish.jersey.servlet.ServletContainer，相当于对客户端的请求（/*）进行了拦截，同时还有一个启动参数，它是Application类的实现，需要我们自己定义，利用它来注册资源，实现如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class StartApplication extends ResourceConfig &#123;  </div><div class=\"line\">  </div><div class=\"line\">    /**  </div><div class=\"line\">     * Register JAX-RS application components.  </div><div class=\"line\">     */  </div><div class=\"line\">    public StartApplication() &#123;  </div><div class=\"line\">        //register(AuthRequestFilter.class);  </div><div class=\"line\">        packages(&quot;com.zy.resource&quot;);  </div><div class=\"line\">      </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4、spring-mybatis-xml和mybatis-config-xml以及spring-xml\"><a href=\"#4、spring-mybatis-xml和mybatis-config-xml以及spring-xml\" class=\"headerlink\" title=\"4、spring-mybatis.xml和mybatis-config.xml以及spring.xml\"></a>4、spring-mybatis.xml和mybatis-config.xml以及spring.xml</h4><p>Spring-mybatis.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;  </div><div class=\"line\">    xmlns:c=&quot;http://www.springframework.org/schema/c&quot; xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;  </div><div class=\"line\">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </div><div class=\"line\">    xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:jee=&quot;http://www.springframework.org/schema/jee&quot;  </div><div class=\"line\">    xmlns:lang=&quot;http://www.springframework.org/schema/lang&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;  </div><div class=\"line\">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:task=&quot;http://www.springframework.org/schema/task&quot;  </div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;  </div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  </div><div class=\"line\">        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;  </div><div class=\"line\">          </div><div class=\"line\">      </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &lt;!-- 配置测试环境数据源 --&gt;  </div><div class=\"line\">    &lt;bean name=&quot;test-dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;  </div><div class=\"line\">        init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/jersey-test?useUnicode=true&amp;characterEncoding=UTF-8&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 初始化连接大小 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;initialSize&quot; value=&quot;0&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 连接池最大使用连接数量 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 连接池最小空闲 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;minIdle&quot; value=&quot;0&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 获取连接最大等待时间 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;25200000&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 打开removeAbandoned功能 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 1800秒，也就是30分钟 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1800&quot; /&gt;  </div><div class=\"line\">        &lt;!-- 关闭abanded连接时输出错误日志 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">  </div><div class=\"line\">        &lt;!-- 监控数据库 --&gt;  </div><div class=\"line\">        &lt;!-- &lt;property name=&quot;filters&quot; value=&quot;mergeStat&quot; /&gt; --&gt;  </div><div class=\"line\">        &lt;property name=&quot;filters&quot; value=&quot;stat&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">      </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &lt;!--根据dataSource和configLocation创建一个sqlSessionFactory --&gt;  </div><div class=\"line\">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;test-dataSource&quot; /&gt;  </div><div class=\"line\">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;  </div><div class=\"line\">        scope=&quot;prototype&quot;&gt;  </div><div class=\"line\">        &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">     &lt;!-- 配置事务管理器 --&gt;  </div><div class=\"line\">    &lt;bean name=&quot;transactionManager&quot;  </div><div class=\"line\">        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;dataSource&quot; ref=&quot;test-dataSource&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">  </div><div class=\"line\">    &lt;!-- 注解方式配置事物 --&gt;  </div><div class=\"line\">     &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;   </div><div class=\"line\">  </div><div class=\"line\">    &lt;bean id=&quot;sqlSessionCache&quot; class=&quot;com.zy.utils.SqlSessionCache&quot;  </div><div class=\"line\">        init-method=&quot;initMapper&quot;&gt;  </div><div class=\"line\">        &lt;!-- 扫描的映射mapper.xml的文件路径 --&gt;  </div><div class=\"line\">        &lt;property name=&quot;packageSearchPath&quot; value=&quot;classpath*:com/zy/*/sql/*.xml&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;  </div><div class=\"line\">        &lt;property name=&quot;basePackage&quot; value=&quot;com.zy.*.mapper&quot; /&gt;  </div><div class=\"line\">    &lt;/bean&gt;  </div><div class=\"line\">      </div><div class=\"line\">    &lt;bean id=&quot;framelnterceptor&quot; class=&quot;com.zy.utils.Framelnterceptor&quot; /&gt;   </div><div class=\"line\">    &lt;aop:aspectj-autoproxy/&gt;     </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>mybatis-config.xml如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">&lt;!DOCTYPE configuration PUBLIC    </div><div class=\"line\">    &quot;-//mybatis.org//DTD Config 3.0//EN&quot;    </div><div class=\"line\">    &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;    </div><div class=\"line\">&lt;configuration&gt;    </div><div class=\"line\">&lt;!--     &lt;properties resource=&quot;project.properties&quot; /&gt; --&gt;  </div><div class=\"line\">    &lt;settings&gt;    </div><div class=\"line\">        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot; /&gt;  </div><div class=\"line\">        &lt;!-- &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt; --&gt;  </div><div class=\"line\">        &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot; /&gt;  </div><div class=\"line\">        &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot; /&gt;   </div><div class=\"line\">    &lt;/settings&gt;&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>Spring.xml的配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class=\"line\">  </div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class=\"line\">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </div><div class=\"line\">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </div><div class=\"line\">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  </div><div class=\"line\">  http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class=\"line\">  http://www.springframework.org/schema/context  </div><div class=\"line\">  http://www.springframework.org/schema/context/spring-context.xsd&quot;  </div><div class=\"line\">        &gt;  </div><div class=\"line\">    &lt;!-- 自动扫描dao和service包(自动注入) --&gt;  </div><div class=\"line\">    &lt;context:component-scan base-package=&quot;com.zy.*&quot; /&gt;  </div><div class=\"line\">    &lt;import resource=&quot;classpath:spring-mybatis.xml&quot; /&gt;  </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure>\n<p>注意：在spring-mybatis.xml配置文件的底部配置了一个拦截器——<br><code>&lt;bean id=&quot;framelnterceptor&quot; class=&quot;com.zy.utils.Framelnterceptor&quot; /&gt;</code>     ——作用是输出请求接口的信息和接口返回的信息，以及获取某些与Token相关的信息。</p>\n<h4 id=\"5、请求过程\"><a href=\"#5、请求过程\" class=\"headerlink\" title=\"5、请求过程\"></a>5、请求过程</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resources</div><div class=\"line\">package com.zy.resource;</div><div class=\"line\"></div><div class=\"line\">import javax.ws.rs.Consumes;</div><div class=\"line\">import javax.ws.rs.GET;</div><div class=\"line\">import javax.ws.rs.Path;</div><div class=\"line\">import javax.ws.rs.Produces;</div><div class=\"line\">import javax.ws.rs.core.MediaType;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Path(&quot;/helloworld&quot;)</div><div class=\"line\">public class RestHelloWorld &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t@GET</div><div class=\"line\">\t@Consumes(MediaType.APPLICATION_JSON)</div><div class=\"line\">\t@Produces(&quot;application/json;charset=UTF-8&quot;)</div><div class=\"line\">\tpublic String sayHelloWorld()&#123;</div><div class=\"line\">\t\treturn &quot;Hello ZY!!!大苏打&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>————这是一个简单的获取资源，使用GET方式获取，屏幕输出     Hello ZY!!!大苏打 。</p>\n<p>资源类是一个简单的 Java 对象 (POJO)，可以实现任何接口，简单、可重用性强。<br>资源类上的常用注解有：<br>@Path，标注资源类或者方法的相对路径<br>@GET，@PUT，@POST，@DELETE，标注方法是HTTP请求的类型。<br>@Produces，标注返回的MIME媒体类型<br>@Consumes，标注可接受请求的MIME媒体类型<br>@PathParam，@QueryParam，@HeaderParam，@CookieParam，@MatrixParam，@FormParam<br>分别标注方法的参数来自于HTTP请求的不同位置，例如<br>@PathParam来自于URL的路径，<br>@QueryParam来自于URL的查询参数，<br>@HeaderParam来自于HTTP请求的头信息，<br>@CookieParam来自于HTTP请求的Cookie。</p>\n<p>##<strong>总结：以上就是一个简单的Jersey框架搭建过程，其中涉及到的很多东西这里没有详细解释，日后深入理解再详谈。</strong></p>\n"},{"title":"Thrift——入门Demo（Java）","date":"2017-07-18T09:07:07.000Z","_content":"# 概述\n\n\n----------\n\n\nThrift最初由Facebook研发，主要用于各个服务之间的RPC通信。\n\nThrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。\n那么它是如何实现使用不同的语言开发呢？\n答案：一种关联客户端和服务端的中间语言。\n\n这种语言就是IDL（Interface Description Language）。将这个IDL作为输入文件，编译器就可以生成代码（支持多种），即RPC客户端和服务器通信的无缝跨编程语言。\n\n# 安装\n\n\n----------\n\n\n下载官方链接：http://thrift.apache.org/download\n将下载好的thrift-0.10.0 .exe文件命名为thrift .exe，放在D盘下的一个Thtift文件夹中，\n为了更方便使用命令，将目录加入到系统Path路径下：\n\n![image](http://osuskkx7k.bkt.clouddn.com/path.png)\n\n在cmd中输入：thrift -version ，查看是否安装配置成功\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%89%88%E6%9C%AC1.png)\n\n出现版本号，安装成功。\n\n定义thrift——IDL文件\n---------------\n\n\n----------\n\n\nIDL文件有许多数据类型\n\n- 结构体类型： struct：定义公共的对象，类似于 C 语 言中的结构体定义，在 Java 中是一个 JavaBean\n- 容器类型：  \n&emsp;&emsp;&emsp;&emsp;&emsp; list：对应 Java 的 ArrayList  \n&emsp;&emsp;&emsp;&emsp;&emsp; set：对应 Java 的 HashSet  \n&emsp;&emsp;&emsp;&emsp;&emsp; map：对应 Java 的 HashMap\n- 异常类型： exception：对应 Java 的 Exception\n- 服务类型： service：对应服务的类  \n\n这里仅仅定义一个服务。  \nthrift定义服务相当于Java中创建Interface，创建的service通过代码生成命令生成客户端和服务端的框架代码。  \n定义形式如下（helloworld.thrift，注意后缀！）：\n\n```\nnamespace java com.test\n\nservice HelloWorldService{\n\n    string sayHello(1:string name)\n}\n```\n——namespace 相当于Java中的package。\n\n在 cmd中 输入命令：  thrift -gen java helloworld.thrift\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%91%BD%E4%BB%A41.PNG)\n\n可以看到生成了一个名为gen-java的文件夹，其中就是生成的代码，打开后可以看到层级目录下有：\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90.png)\n\n代码片段：\n```\n/**\n * Autogenerated by Thrift Compiler (0.10.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage com.test;\n\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.10.0)\", date = \"2017-07-18\")\npublic class HelloWorldService {\n\n  public interface Iface {\n\n    public java.lang.String sayHello(java.lang.String name) throws org.apache.thrift.TException;\n\n  }\n\n```\n\n# 创建项目\n----\n创建一个Maven工程，引入依赖，可在Maven依赖中看到引入的相关Jar包\n\n```\n<dependency>\n      <groupId>org.apache.thrift</groupId>\n      <artifactId>libthrift</artifactId>\n      <version>0.10.0</version>\n</dependency>\n```\n\n# 服务端实现与启动\n--------\n服务端相关操作的步骤如下：\n\n - 实现服务处理接口Impl\n - 创建TProcessor\n - 创建TServerTransport\n - 创建TProtocol\n - 创建TServer\n - 启动Server  \n\n<font size=\"4\">服务端实现</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.TException;\n\npublic class HelloWorldImpl implements HelloWorldService.Iface{\n\t\n\tpublic HelloWorldImpl(){\t\n\t}\n\t\n\tpublic String sayHello(String name) throws TException {\n\t\t\n\t\treturn \"Hi,\" +name + \" welcome !\";\n\t}\n\n}\n\n```\n<font size=\"4\">服务端启动</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.TProcessor;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.server.TServer;\nimport org.apache.thrift.server.TSimpleServer;\nimport org.apache.thrift.transport.TServerSocket;\n\npublic class HelloServer {\n\t\n\tpublic static final int SERVER_PORT = 8090;\n\t\n\tpublic void startServer(){\t\n\t\tSystem.out.println(\"Server is Runing......\");\n\t\t\n\t\tTProcessor tprocessor = new HelloWorldService.Processor(new HelloWorldImpl());\t\n\t\t//简单的单线程服务模型，一般用于测试\n\t\ttry {\n\t\t\tTServerSocket serverTransport = new TServerSocket(SERVER_PORT);\n\t\t\tTServer.Args tArgs = new TServer.Args(serverTransport);\n\t\t\ttArgs.processor(tprocessor);\n\t\t\ttArgs.protocolFactory(new TBinaryProtocol.Factory());\n\t\t\tTServer server = new TSimpleServer(tArgs);\n\t\t\tserver.serve();\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Server start error！\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tHelloServer server = new HelloServer();\n\t\tserver.startServer();\n\t}\n}\n```\n运行上面的启动类，控制台输出：Server is Runing......\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png)\n\n# 客户端启动\n\n\n----------\n\n\n<font size=\"4\">客户端步骤：</font>\n\n -  创建Transport\n - 创建TProtocol\n - 基于TTransport和TProtocol创建 Client\n - 调用Client的相应方法\n\n<font size=\"4\">客户端启动</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TSocket;\nimport org.apache.thrift.transport.TTransport;\n\npublic class HelloClient {\n\t\n\tpublic static final String SERVER_IP = \"localhost\";\n\tpublic static final int SERVER_PORT = 8090;\n\tpublic static final int TIMEOUT = 30000;\n\t\n\tpublic void startClient(String userName){\n\t\tTTransport transport = null;\n\t\ttry {\n\t\t\ttransport = new TSocket(SERVER_IP,SERVER_PORT,TIMEOUT);\n\t\t\t//协议要和服务端一致\n\t\t\tTProtocol protocol  = new TBinaryProtocol(transport);\n\t\t\t\n\t\t\tHelloWorldService.Client client = new HelloWorldService.Client(protocol);\n\t\t\ttransport.open();\n\t\t\t\n\t\t\tString result = client.sayHello(userName);\t\t\n\t\t\tSystem.out.println(\"Thrift client result is:\"+result);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"client is error!\");\n\t\t}finally{\n\t\t\tif(null != transport){\n\t\t\t\ttransport.close();\n\t\t\t}\n\t\t}\t\n\t}\n\tpublic static void main(String[] args) {\n\t\tHelloClient client = new HelloClient();\n\t\tclient.startClient(\"Z Yong\");\n\t}\t\n}\n```\n<font size=\"4\">控制台输出：  Thrift client result is:  Hi,Z Yong welcome !\n</font>\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E8%BE%93%E5%87%BA2.PNG)\n\n\n<font size=\"5\">**客户端成功收到了服务端返回的请求结果，通信完成**。</font>\n\n\n","source":"_posts/Thrift.md","raw":"---\ntitle: Thrift——入门Demo（Java）\ndate: 2017-07-18 17:07:07\ntags: [Thrift,RPC]\ncategories: 技术\n---\n# 概述\n\n\n----------\n\n\nThrift最初由Facebook研发，主要用于各个服务之间的RPC通信。\n\nThrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。\n那么它是如何实现使用不同的语言开发呢？\n答案：一种关联客户端和服务端的中间语言。\n\n这种语言就是IDL（Interface Description Language）。将这个IDL作为输入文件，编译器就可以生成代码（支持多种），即RPC客户端和服务器通信的无缝跨编程语言。\n\n# 安装\n\n\n----------\n\n\n下载官方链接：http://thrift.apache.org/download\n将下载好的thrift-0.10.0 .exe文件命名为thrift .exe，放在D盘下的一个Thtift文件夹中，\n为了更方便使用命令，将目录加入到系统Path路径下：\n\n![image](http://osuskkx7k.bkt.clouddn.com/path.png)\n\n在cmd中输入：thrift -version ，查看是否安装配置成功\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E7%89%88%E6%9C%AC1.png)\n\n出现版本号，安装成功。\n\n定义thrift——IDL文件\n---------------\n\n\n----------\n\n\nIDL文件有许多数据类型\n\n- 结构体类型： struct：定义公共的对象，类似于 C 语 言中的结构体定义，在 Java 中是一个 JavaBean\n- 容器类型：  \n&emsp;&emsp;&emsp;&emsp;&emsp; list：对应 Java 的 ArrayList  \n&emsp;&emsp;&emsp;&emsp;&emsp; set：对应 Java 的 HashSet  \n&emsp;&emsp;&emsp;&emsp;&emsp; map：对应 Java 的 HashMap\n- 异常类型： exception：对应 Java 的 Exception\n- 服务类型： service：对应服务的类  \n\n这里仅仅定义一个服务。  \nthrift定义服务相当于Java中创建Interface，创建的service通过代码生成命令生成客户端和服务端的框架代码。  \n定义形式如下（helloworld.thrift，注意后缀！）：\n\n```\nnamespace java com.test\n\nservice HelloWorldService{\n\n    string sayHello(1:string name)\n}\n```\n——namespace 相当于Java中的package。\n\n在 cmd中 输入命令：  thrift -gen java helloworld.thrift\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E5%91%BD%E4%BB%A41.PNG)\n\n可以看到生成了一个名为gen-java的文件夹，其中就是生成的代码，打开后可以看到层级目录下有：\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90.png)\n\n代码片段：\n```\n/**\n * Autogenerated by Thrift Compiler (0.10.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\npackage com.test;\n\n@SuppressWarnings({\"cast\", \"rawtypes\", \"serial\", \"unchecked\", \"unused\"})\n@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.10.0)\", date = \"2017-07-18\")\npublic class HelloWorldService {\n\n  public interface Iface {\n\n    public java.lang.String sayHello(java.lang.String name) throws org.apache.thrift.TException;\n\n  }\n\n```\n\n# 创建项目\n----\n创建一个Maven工程，引入依赖，可在Maven依赖中看到引入的相关Jar包\n\n```\n<dependency>\n      <groupId>org.apache.thrift</groupId>\n      <artifactId>libthrift</artifactId>\n      <version>0.10.0</version>\n</dependency>\n```\n\n# 服务端实现与启动\n--------\n服务端相关操作的步骤如下：\n\n - 实现服务处理接口Impl\n - 创建TProcessor\n - 创建TServerTransport\n - 创建TProtocol\n - 创建TServer\n - 启动Server  \n\n<font size=\"4\">服务端实现</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.TException;\n\npublic class HelloWorldImpl implements HelloWorldService.Iface{\n\t\n\tpublic HelloWorldImpl(){\t\n\t}\n\t\n\tpublic String sayHello(String name) throws TException {\n\t\t\n\t\treturn \"Hi,\" +name + \" welcome !\";\n\t}\n\n}\n\n```\n<font size=\"4\">服务端启动</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.TProcessor;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.server.TServer;\nimport org.apache.thrift.server.TSimpleServer;\nimport org.apache.thrift.transport.TServerSocket;\n\npublic class HelloServer {\n\t\n\tpublic static final int SERVER_PORT = 8090;\n\t\n\tpublic void startServer(){\t\n\t\tSystem.out.println(\"Server is Runing......\");\n\t\t\n\t\tTProcessor tprocessor = new HelloWorldService.Processor(new HelloWorldImpl());\t\n\t\t//简单的单线程服务模型，一般用于测试\n\t\ttry {\n\t\t\tTServerSocket serverTransport = new TServerSocket(SERVER_PORT);\n\t\t\tTServer.Args tArgs = new TServer.Args(serverTransport);\n\t\t\ttArgs.processor(tprocessor);\n\t\t\ttArgs.protocolFactory(new TBinaryProtocol.Factory());\n\t\t\tTServer server = new TSimpleServer(tArgs);\n\t\t\tserver.serve();\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Server start error！\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tHelloServer server = new HelloServer();\n\t\tserver.startServer();\n\t}\n}\n```\n运行上面的启动类，控制台输出：Server is Runing......\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png)\n\n# 客户端启动\n\n\n----------\n\n\n<font size=\"4\">客户端步骤：</font>\n\n -  创建Transport\n - 创建TProtocol\n - 基于TTransport和TProtocol创建 Client\n - 调用Client的相应方法\n\n<font size=\"4\">客户端启动</font>\n\n```\npackage com.test;\n\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TSocket;\nimport org.apache.thrift.transport.TTransport;\n\npublic class HelloClient {\n\t\n\tpublic static final String SERVER_IP = \"localhost\";\n\tpublic static final int SERVER_PORT = 8090;\n\tpublic static final int TIMEOUT = 30000;\n\t\n\tpublic void startClient(String userName){\n\t\tTTransport transport = null;\n\t\ttry {\n\t\t\ttransport = new TSocket(SERVER_IP,SERVER_PORT,TIMEOUT);\n\t\t\t//协议要和服务端一致\n\t\t\tTProtocol protocol  = new TBinaryProtocol(transport);\n\t\t\t\n\t\t\tHelloWorldService.Client client = new HelloWorldService.Client(protocol);\n\t\t\ttransport.open();\n\t\t\t\n\t\t\tString result = client.sayHello(userName);\t\t\n\t\t\tSystem.out.println(\"Thrift client result is:\"+result);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"client is error!\");\n\t\t}finally{\n\t\t\tif(null != transport){\n\t\t\t\ttransport.close();\n\t\t\t}\n\t\t}\t\n\t}\n\tpublic static void main(String[] args) {\n\t\tHelloClient client = new HelloClient();\n\t\tclient.startClient(\"Z Yong\");\n\t}\t\n}\n```\n<font size=\"4\">控制台输出：  Thrift client result is:  Hi,Z Yong welcome !\n</font>\n\n![image](http://osuskkx7k.bkt.clouddn.com/%E8%BE%93%E5%87%BA2.PNG)\n\n\n<font size=\"5\">**客户端成功收到了服务端返回的请求结果，通信完成**。</font>\n\n\n","slug":"Thrift","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt276004a50tctumt8zm6","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><hr>\n<p>Thrift最初由Facebook研发，主要用于各个服务之间的RPC通信。</p>\n<p>Thrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。<br>那么它是如何实现使用不同的语言开发呢？<br>答案：一种关联客户端和服务端的中间语言。</p>\n<p>这种语言就是IDL（Interface Description Language）。将这个IDL作为输入文件，编译器就可以生成代码（支持多种），即RPC客户端和服务器通信的无缝跨编程语言。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><hr>\n<p>下载官方链接：<a href=\"http://thrift.apache.org/download\" target=\"_blank\" rel=\"external\">http://thrift.apache.org/download</a><br>将下载好的thrift-0.10.0 .exe文件命名为thrift .exe，放在D盘下的一个Thtift文件夹中，<br>为了更方便使用命令，将目录加入到系统Path路径下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/path.png\" alt=\"image\"></p>\n<p>在cmd中输入：thrift -version ，查看是否安装配置成功</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%89%88%E6%9C%AC1.png\" alt=\"image\"></p>\n<p>出现版本号，安装成功。</p>\n<h2 id=\"定义thrift——IDL文件\"><a href=\"#定义thrift——IDL文件\" class=\"headerlink\" title=\"定义thrift——IDL文件\"></a>定义thrift——IDL文件</h2><hr>\n<p>IDL文件有许多数据类型</p>\n<ul>\n<li>结构体类型： struct：定义公共的对象，类似于 C 语 言中的结构体定义，在 Java 中是一个 JavaBean</li>\n<li>容器类型：<br>&emsp;&emsp;&emsp;&emsp;&emsp; list：对应 Java 的 ArrayList<br>&emsp;&emsp;&emsp;&emsp;&emsp; set：对应 Java 的 HashSet<br>&emsp;&emsp;&emsp;&emsp;&emsp; map：对应 Java 的 HashMap</li>\n<li>异常类型： exception：对应 Java 的 Exception</li>\n<li>服务类型： service：对应服务的类  </li>\n</ul>\n<p>这里仅仅定义一个服务。<br>thrift定义服务相当于Java中创建Interface，创建的service通过代码生成命令生成客户端和服务端的框架代码。<br>定义形式如下（helloworld.thrift，注意后缀！）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace java com.test</div><div class=\"line\"></div><div class=\"line\">service HelloWorldService&#123;</div><div class=\"line\"></div><div class=\"line\">    string sayHello(1:string name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>——namespace 相当于Java中的package。</p>\n<p>在 cmd中 输入命令：  thrift -gen java helloworld.thrift</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%91%BD%E4%BB%A41.PNG\" alt=\"image\"></p>\n<p>可以看到生成了一个名为gen-java的文件夹，其中就是生成的代码，打开后可以看到层级目录下有：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90.png\" alt=\"image\"></p>\n<p>代码片段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Autogenerated by Thrift Compiler (0.10.0)</div><div class=\"line\"> *</div><div class=\"line\"> * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING</div><div class=\"line\"> *  @generated</div><div class=\"line\"> */</div><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">@SuppressWarnings(&#123;&quot;cast&quot;, &quot;rawtypes&quot;, &quot;serial&quot;, &quot;unchecked&quot;, &quot;unused&quot;&#125;)</div><div class=\"line\">@javax.annotation.Generated(value = &quot;Autogenerated by Thrift Compiler (0.10.0)&quot;, date = &quot;2017-07-18&quot;)</div><div class=\"line\">public class HelloWorldService &#123;</div><div class=\"line\"></div><div class=\"line\">  public interface Iface &#123;</div><div class=\"line\"></div><div class=\"line\">    public java.lang.String sayHello(java.lang.String name) throws org.apache.thrift.TException;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><hr>\n<p>创建一个Maven工程，引入依赖，可在Maven依赖中看到引入的相关Jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">      &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt;</div><div class=\"line\">      &lt;artifactId&gt;libthrift&lt;/artifactId&gt;</div><div class=\"line\">      &lt;version&gt;0.10.0&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"服务端实现与启动\"><a href=\"#服务端实现与启动\" class=\"headerlink\" title=\"服务端实现与启动\"></a>服务端实现与启动</h1><hr>\n<p>服务端相关操作的步骤如下：</p>\n<ul>\n<li>实现服务处理接口Impl</li>\n<li>创建TProcessor</li>\n<li>创建TServerTransport</li>\n<li>创建TProtocol</li>\n<li>创建TServer</li>\n<li>启动Server  </li>\n</ul>\n<font size=\"4\">服务端实现</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.TException;</div><div class=\"line\"></div><div class=\"line\">public class HelloWorldImpl implements HelloWorldService.Iface&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic HelloWorldImpl()&#123;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic String sayHello(String name) throws TException &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn &quot;Hi,&quot; +name + &quot; welcome !&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<font size=\"4\">服务端启动</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.TProcessor;</div><div class=\"line\">import org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\">import org.apache.thrift.server.TServer;</div><div class=\"line\">import org.apache.thrift.server.TSimpleServer;</div><div class=\"line\">import org.apache.thrift.transport.TServerSocket;</div><div class=\"line\"></div><div class=\"line\">public class HelloServer &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static final int SERVER_PORT = 8090;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void startServer()&#123;\t</div><div class=\"line\">\t\tSystem.out.println(&quot;Server is Runing......&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTProcessor tprocessor = new HelloWorldService.Processor(new HelloWorldImpl());\t</div><div class=\"line\">\t\t//简单的单线程服务模型，一般用于测试</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tTServerSocket serverTransport = new TServerSocket(SERVER_PORT);</div><div class=\"line\">\t\t\tTServer.Args tArgs = new TServer.Args(serverTransport);</div><div class=\"line\">\t\t\ttArgs.processor(tprocessor);</div><div class=\"line\">\t\t\ttArgs.protocolFactory(new TBinaryProtocol.Factory());</div><div class=\"line\">\t\t\tTServer server = new TSimpleServer(tArgs);</div><div class=\"line\">\t\t\tserver.serve();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;Server start error！&quot;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tHelloServer server = new HelloServer();</div><div class=\"line\">\t\tserver.startServer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的启动类，控制台输出：Server is Runing……</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png\" alt=\"image\"></p>\n<h1 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h1><hr>\n<font size=\"4\">客户端步骤：</font>\n\n<ul>\n<li>创建Transport</li>\n<li>创建TProtocol</li>\n<li>基于TTransport和TProtocol创建 Client</li>\n<li>调用Client的相应方法</li>\n</ul>\n<font size=\"4\">客户端启动</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\">import org.apache.thrift.protocol.TProtocol;</div><div class=\"line\">import org.apache.thrift.transport.TSocket;</div><div class=\"line\">import org.apache.thrift.transport.TTransport;</div><div class=\"line\"></div><div class=\"line\">public class HelloClient &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static final String SERVER_IP = &quot;localhost&quot;;</div><div class=\"line\">\tpublic static final int SERVER_PORT = 8090;</div><div class=\"line\">\tpublic static final int TIMEOUT = 30000;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void startClient(String userName)&#123;</div><div class=\"line\">\t\tTTransport transport = null;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\ttransport = new TSocket(SERVER_IP,SERVER_PORT,TIMEOUT);</div><div class=\"line\">\t\t\t//协议要和服务端一致</div><div class=\"line\">\t\t\tTProtocol protocol  = new TBinaryProtocol(transport);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tHelloWorldService.Client client = new HelloWorldService.Client(protocol);</div><div class=\"line\">\t\t\ttransport.open();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tString result = client.sayHello(userName);\t\t</div><div class=\"line\">\t\t\tSystem.out.println(&quot;Thrift client result is:&quot;+result);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;client is error!&quot;);</div><div class=\"line\">\t\t&#125;finally&#123;</div><div class=\"line\">\t\t\tif(null != transport)&#123;</div><div class=\"line\">\t\t\t\ttransport.close();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tHelloClient client = new HelloClient();</div><div class=\"line\">\t\tclient.startClient(&quot;Z Yong&quot;);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<font size=\"4\">控制台输出：  Thrift client result is:  Hi,Z Yong welcome !<br></font>\n\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E8%BE%93%E5%87%BA2.PNG\" alt=\"image\"></p>\n<font size=\"5\"><strong>客户端成功收到了服务端返回的请求结果，通信完成</strong>。</font>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><hr>\n<p>Thrift最初由Facebook研发，主要用于各个服务之间的RPC通信。</p>\n<p>Thrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。<br>那么它是如何实现使用不同的语言开发呢？<br>答案：一种关联客户端和服务端的中间语言。</p>\n<p>这种语言就是IDL（Interface Description Language）。将这个IDL作为输入文件，编译器就可以生成代码（支持多种），即RPC客户端和服务器通信的无缝跨编程语言。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><hr>\n<p>下载官方链接：<a href=\"http://thrift.apache.org/download\" target=\"_blank\" rel=\"external\">http://thrift.apache.org/download</a><br>将下载好的thrift-0.10.0 .exe文件命名为thrift .exe，放在D盘下的一个Thtift文件夹中，<br>为了更方便使用命令，将目录加入到系统Path路径下：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/path.png\" alt=\"image\"></p>\n<p>在cmd中输入：thrift -version ，查看是否安装配置成功</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E7%89%88%E6%9C%AC1.png\" alt=\"image\"></p>\n<p>出现版本号，安装成功。</p>\n<h2 id=\"定义thrift——IDL文件\"><a href=\"#定义thrift——IDL文件\" class=\"headerlink\" title=\"定义thrift——IDL文件\"></a>定义thrift——IDL文件</h2><hr>\n<p>IDL文件有许多数据类型</p>\n<ul>\n<li>结构体类型： struct：定义公共的对象，类似于 C 语 言中的结构体定义，在 Java 中是一个 JavaBean</li>\n<li>容器类型：<br>&emsp;&emsp;&emsp;&emsp;&emsp; list：对应 Java 的 ArrayList<br>&emsp;&emsp;&emsp;&emsp;&emsp; set：对应 Java 的 HashSet<br>&emsp;&emsp;&emsp;&emsp;&emsp; map：对应 Java 的 HashMap</li>\n<li>异常类型： exception：对应 Java 的 Exception</li>\n<li>服务类型： service：对应服务的类  </li>\n</ul>\n<p>这里仅仅定义一个服务。<br>thrift定义服务相当于Java中创建Interface，创建的service通过代码生成命令生成客户端和服务端的框架代码。<br>定义形式如下（helloworld.thrift，注意后缀！）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace java com.test</div><div class=\"line\"></div><div class=\"line\">service HelloWorldService&#123;</div><div class=\"line\"></div><div class=\"line\">    string sayHello(1:string name)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>——namespace 相当于Java中的package。</p>\n<p>在 cmd中 输入命令：  thrift -gen java helloworld.thrift</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%91%BD%E4%BB%A41.PNG\" alt=\"image\"></p>\n<p>可以看到生成了一个名为gen-java的文件夹，其中就是生成的代码，打开后可以看到层级目录下有：</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90.png\" alt=\"image\"></p>\n<p>代码片段：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Autogenerated by Thrift Compiler (0.10.0)</div><div class=\"line\"> *</div><div class=\"line\"> * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING</div><div class=\"line\"> *  @generated</div><div class=\"line\"> */</div><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">@SuppressWarnings(&#123;&quot;cast&quot;, &quot;rawtypes&quot;, &quot;serial&quot;, &quot;unchecked&quot;, &quot;unused&quot;&#125;)</div><div class=\"line\">@javax.annotation.Generated(value = &quot;Autogenerated by Thrift Compiler (0.10.0)&quot;, date = &quot;2017-07-18&quot;)</div><div class=\"line\">public class HelloWorldService &#123;</div><div class=\"line\"></div><div class=\"line\">  public interface Iface &#123;</div><div class=\"line\"></div><div class=\"line\">    public java.lang.String sayHello(java.lang.String name) throws org.apache.thrift.TException;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h1><hr>\n<p>创建一个Maven工程，引入依赖，可在Maven依赖中看到引入的相关Jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">      &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt;</div><div class=\"line\">      &lt;artifactId&gt;libthrift&lt;/artifactId&gt;</div><div class=\"line\">      &lt;version&gt;0.10.0&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"服务端实现与启动\"><a href=\"#服务端实现与启动\" class=\"headerlink\" title=\"服务端实现与启动\"></a>服务端实现与启动</h1><hr>\n<p>服务端相关操作的步骤如下：</p>\n<ul>\n<li>实现服务处理接口Impl</li>\n<li>创建TProcessor</li>\n<li>创建TServerTransport</li>\n<li>创建TProtocol</li>\n<li>创建TServer</li>\n<li>启动Server  </li>\n</ul>\n<font size=\"4\">服务端实现</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.TException;</div><div class=\"line\"></div><div class=\"line\">public class HelloWorldImpl implements HelloWorldService.Iface&#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic HelloWorldImpl()&#123;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic String sayHello(String name) throws TException &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\treturn &quot;Hi,&quot; +name + &quot; welcome !&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<font size=\"4\">服务端启动</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.TProcessor;</div><div class=\"line\">import org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\">import org.apache.thrift.server.TServer;</div><div class=\"line\">import org.apache.thrift.server.TSimpleServer;</div><div class=\"line\">import org.apache.thrift.transport.TServerSocket;</div><div class=\"line\"></div><div class=\"line\">public class HelloServer &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static final int SERVER_PORT = 8090;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void startServer()&#123;\t</div><div class=\"line\">\t\tSystem.out.println(&quot;Server is Runing......&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tTProcessor tprocessor = new HelloWorldService.Processor(new HelloWorldImpl());\t</div><div class=\"line\">\t\t//简单的单线程服务模型，一般用于测试</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tTServerSocket serverTransport = new TServerSocket(SERVER_PORT);</div><div class=\"line\">\t\t\tTServer.Args tArgs = new TServer.Args(serverTransport);</div><div class=\"line\">\t\t\ttArgs.processor(tprocessor);</div><div class=\"line\">\t\t\ttArgs.protocolFactory(new TBinaryProtocol.Factory());</div><div class=\"line\">\t\t\tTServer server = new TSimpleServer(tArgs);</div><div class=\"line\">\t\t\tserver.serve();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;Server start error！&quot;);</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tHelloServer server = new HelloServer();</div><div class=\"line\">\t\tserver.startServer();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行上面的启动类，控制台输出：Server is Runing……</p>\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png\" alt=\"image\"></p>\n<h1 id=\"客户端启动\"><a href=\"#客户端启动\" class=\"headerlink\" title=\"客户端启动\"></a>客户端启动</h1><hr>\n<font size=\"4\">客户端步骤：</font>\n\n<ul>\n<li>创建Transport</li>\n<li>创建TProtocol</li>\n<li>基于TTransport和TProtocol创建 Client</li>\n<li>调用Client的相应方法</li>\n</ul>\n<font size=\"4\">客户端启动</font>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.test;</div><div class=\"line\"></div><div class=\"line\">import org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\">import org.apache.thrift.protocol.TProtocol;</div><div class=\"line\">import org.apache.thrift.transport.TSocket;</div><div class=\"line\">import org.apache.thrift.transport.TTransport;</div><div class=\"line\"></div><div class=\"line\">public class HelloClient &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static final String SERVER_IP = &quot;localhost&quot;;</div><div class=\"line\">\tpublic static final int SERVER_PORT = 8090;</div><div class=\"line\">\tpublic static final int TIMEOUT = 30000;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void startClient(String userName)&#123;</div><div class=\"line\">\t\tTTransport transport = null;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\ttransport = new TSocket(SERVER_IP,SERVER_PORT,TIMEOUT);</div><div class=\"line\">\t\t\t//协议要和服务端一致</div><div class=\"line\">\t\t\tTProtocol protocol  = new TBinaryProtocol(transport);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tHelloWorldService.Client client = new HelloWorldService.Client(protocol);</div><div class=\"line\">\t\t\ttransport.open();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tString result = client.sayHello(userName);\t\t</div><div class=\"line\">\t\t\tSystem.out.println(&quot;Thrift client result is:&quot;+result);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;client is error!&quot;);</div><div class=\"line\">\t\t&#125;finally&#123;</div><div class=\"line\">\t\t\tif(null != transport)&#123;</div><div class=\"line\">\t\t\t\ttransport.close();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tHelloClient client = new HelloClient();</div><div class=\"line\">\t\tclient.startClient(&quot;Z Yong&quot;);</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<font size=\"4\">控制台输出：  Thrift client result is:  Hi,Z Yong welcome !<br></font>\n\n<p><img src=\"http://osuskkx7k.bkt.clouddn.com/%E8%BE%93%E5%87%BA2.PNG\" alt=\"image\"></p>\n<font size=\"5\"><strong>客户端成功收到了服务端返回的请求结果，通信完成</strong>。</font>\n\n\n"},{"title":"Mysql批量操作之更新及插入","date":"2017-07-12T07:12:12.000Z","_content":"## 前言\n   这个问题困扰了整整一天。\n   当遇到多条记录需要插入或者更新的时候，往往会使用批量操作来提高效率，提高性能。然而在使用过程中确是出现了各种问题，真的是有些坑只有趟过才知道！！\n   好了，话不多说，进入正题。\n   注：数据库Mysql     持久层框架 Mybatis\n\n## 批量更新\n需求如下代码：\t\t\n```\nMap<String,Object> ucmap = new HashMap<String, Object>();\n\t\tucmap.put(\"updateUser\",\"zyong\");\n\t\tucmap.put(\"updateTime\", time);\n\t\tucmap.put(\"list\", updateClist);\n\t\tconnectorInfoMapper.updateBatch(ucmap);\n```\n这里的需求是对设备的信息进行批量更新，利用Map来传参，Map中包含了一个List，这个List包含了需要更新的对象集合，也就是多条记录。\nsql片段如下：\n```\n<update id=\"updateBatch\" parameterType=\"java.util.Map\">\n      <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\";\">\n update connector_info\n    set  \n      Connector_Type = #{item.connectorType,jdbcType=INTEGER},\n      Voltage_Upper_Limits = #{item.voltageUpperLimits,jdbcType=INTEGER},\n      Voltage_Lower_Limits = #{item.voltageLowerLimits,jdbcType=INTEGER},\n      Current = #{item.current,jdbcType=INTEGER},\n      Power = #{item.power,jdbcType=DOUBLE},\n      National_Standard = #{item.nationalStandard,jdbcType=INTEGER},\n      Update_User = #{updateUser,jdbcType=VARCHAR},\n\t  Update_Time = FROM_UNIXTIME(#{updateTime,jdbcType=TIMESTAMP})   \n    where Connector_ID = #{item.connectorId,jdbcType=VARCHAR}\n    </foreach>\n </update>\n```\n   可以看到，这里使用了foreach标签进行迭代，item代表着每一个元素，item.power等代表的就是每个元素的属性，而没有加上item的参数如updateUser、updateTime等则是存放在Map中的参数，从需求代码中能看得更加明显。\n\n当我检查了多遍后，感觉没问题之后，运行。\n控制台的错误让我明白还是太年轻——报错了！！！仔细一看，是Sql语法错误，What？我把sql放入Navicat中美化，又检查了好几遍，这明明没有错啊！\n\n于是开启了百度，各种查：\n - 有的说把separator=\";\"中的分号换成——separator=\"UNION ALL\"，测试，还是报同样的错误。\n - 将几个属于Map的字段删除再测试，依然报错  \n\n查了很多并没有什么实质性的进展，将多条数据改成一条数据进行更新，测试，竟然通过了！——原因很明显：批量操作的原因导致。\n再百度，终于找到了答案：\n并不是Sql的原因，而是数据库设置的原因————Mysql需要打开批量更新的设置。\n<font size=5>在数据库JDBC链接中加入： **&allowMultiQueries=true**</font>\n如下： \njdbc.url=jdbc:mysql://139.224.35.81:3306/evshare?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true\n\n<font size=5>在添加了这个“开关”之后，成功批量更新多条数据。</font>\n\n## 批量插入\n\n相比于批量更新，批量插入则没有类似的设置。\n一个简单的示例Sql：\n```\n<insert id=\"insertBatch\" parameterType=\"java.util.Map\">\n  insert into connector_info (Equipment_Seq, Connector_ID, \n      Connector_Type, Voltage_Upper_Limits, \n      Voltage_Lower_Limits, Current, Power, \n      National_Standard,Create_User,Create_Time,Update_Time)\n      values\n      <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\",\">\n     (#{item.equipmentSeq,jdbcType=BIGINT}, #{item.connectorId,jdbcType=VARCHAR}, \n      #{item.connectorType,jdbcType=INTEGER}, #{item.voltageUpperLimits,jdbcType=INTEGER}, \n      #{item.voltageLowerLimits,jdbcType=INTEGER}, #{item.current,jdbcType=INTEGER}, #{item.power,jdbcType=DOUBLE}, \n      #{item.nationalStandard,jdbcType=INTEGER},\n      #{createUser,jdbcType=VARCHAR},\n      FROM_UNIXTIME(#{createTime,jdbcType=TIMESTAMP}),\n      FROM_UNIXTIME(#{updateTime,jdbcType=TIMESTAMP}))\n      </foreach>\n  </insert>\n```\n## 总结： \n 1. 有时候问题并不是出现在代码上，可以往系统环境和配置方面考虑。  \n 2. 对于批量更新Mysql需要设置，而Oracle则不需要设置，但sql可能要变化\n","source":"_posts/mysql批量更新.md","raw":"---\ntitle: Mysql批量操作之更新及插入\ndate: 2017-07-12 15:12:12\ntags: [Mysql,Mybatis]\ncategories: 技术\n---\n## 前言\n   这个问题困扰了整整一天。\n   当遇到多条记录需要插入或者更新的时候，往往会使用批量操作来提高效率，提高性能。然而在使用过程中确是出现了各种问题，真的是有些坑只有趟过才知道！！\n   好了，话不多说，进入正题。\n   注：数据库Mysql     持久层框架 Mybatis\n\n## 批量更新\n需求如下代码：\t\t\n```\nMap<String,Object> ucmap = new HashMap<String, Object>();\n\t\tucmap.put(\"updateUser\",\"zyong\");\n\t\tucmap.put(\"updateTime\", time);\n\t\tucmap.put(\"list\", updateClist);\n\t\tconnectorInfoMapper.updateBatch(ucmap);\n```\n这里的需求是对设备的信息进行批量更新，利用Map来传参，Map中包含了一个List，这个List包含了需要更新的对象集合，也就是多条记录。\nsql片段如下：\n```\n<update id=\"updateBatch\" parameterType=\"java.util.Map\">\n      <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\";\">\n update connector_info\n    set  \n      Connector_Type = #{item.connectorType,jdbcType=INTEGER},\n      Voltage_Upper_Limits = #{item.voltageUpperLimits,jdbcType=INTEGER},\n      Voltage_Lower_Limits = #{item.voltageLowerLimits,jdbcType=INTEGER},\n      Current = #{item.current,jdbcType=INTEGER},\n      Power = #{item.power,jdbcType=DOUBLE},\n      National_Standard = #{item.nationalStandard,jdbcType=INTEGER},\n      Update_User = #{updateUser,jdbcType=VARCHAR},\n\t  Update_Time = FROM_UNIXTIME(#{updateTime,jdbcType=TIMESTAMP})   \n    where Connector_ID = #{item.connectorId,jdbcType=VARCHAR}\n    </foreach>\n </update>\n```\n   可以看到，这里使用了foreach标签进行迭代，item代表着每一个元素，item.power等代表的就是每个元素的属性，而没有加上item的参数如updateUser、updateTime等则是存放在Map中的参数，从需求代码中能看得更加明显。\n\n当我检查了多遍后，感觉没问题之后，运行。\n控制台的错误让我明白还是太年轻——报错了！！！仔细一看，是Sql语法错误，What？我把sql放入Navicat中美化，又检查了好几遍，这明明没有错啊！\n\n于是开启了百度，各种查：\n - 有的说把separator=\";\"中的分号换成——separator=\"UNION ALL\"，测试，还是报同样的错误。\n - 将几个属于Map的字段删除再测试，依然报错  \n\n查了很多并没有什么实质性的进展，将多条数据改成一条数据进行更新，测试，竟然通过了！——原因很明显：批量操作的原因导致。\n再百度，终于找到了答案：\n并不是Sql的原因，而是数据库设置的原因————Mysql需要打开批量更新的设置。\n<font size=5>在数据库JDBC链接中加入： **&allowMultiQueries=true**</font>\n如下： \njdbc.url=jdbc:mysql://139.224.35.81:3306/evshare?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true\n\n<font size=5>在添加了这个“开关”之后，成功批量更新多条数据。</font>\n\n## 批量插入\n\n相比于批量更新，批量插入则没有类似的设置。\n一个简单的示例Sql：\n```\n<insert id=\"insertBatch\" parameterType=\"java.util.Map\">\n  insert into connector_info (Equipment_Seq, Connector_ID, \n      Connector_Type, Voltage_Upper_Limits, \n      Voltage_Lower_Limits, Current, Power, \n      National_Standard,Create_User,Create_Time,Update_Time)\n      values\n      <foreach collection=\"list\" item=\"item\" index=\"index\" separator=\",\">\n     (#{item.equipmentSeq,jdbcType=BIGINT}, #{item.connectorId,jdbcType=VARCHAR}, \n      #{item.connectorType,jdbcType=INTEGER}, #{item.voltageUpperLimits,jdbcType=INTEGER}, \n      #{item.voltageLowerLimits,jdbcType=INTEGER}, #{item.current,jdbcType=INTEGER}, #{item.power,jdbcType=DOUBLE}, \n      #{item.nationalStandard,jdbcType=INTEGER},\n      #{createUser,jdbcType=VARCHAR},\n      FROM_UNIXTIME(#{createTime,jdbcType=TIMESTAMP}),\n      FROM_UNIXTIME(#{updateTime,jdbcType=TIMESTAMP}))\n      </foreach>\n  </insert>\n```\n## 总结： \n 1. 有时候问题并不是出现在代码上，可以往系统环境和配置方面考虑。  \n 2. 对于批量更新Mysql需要设置，而Oracle则不需要设置，但sql可能要变化\n","slug":"mysql批量更新","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt279004c50tcgehz2tp0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   这个问题困扰了整整一天。<br>   当遇到多条记录需要插入或者更新的时候，往往会使用批量操作来提高效率，提高性能。然而在使用过程中确是出现了各种问题，真的是有些坑只有趟过才知道！！<br>   好了，话不多说，进入正题。<br>   注：数据库Mysql     持久层框架 Mybatis</p>\n<h2 id=\"批量更新\"><a href=\"#批量更新\" class=\"headerlink\" title=\"批量更新\"></a>批量更新</h2><p>需求如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map&lt;String,Object&gt; ucmap = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tucmap.put(&quot;updateUser&quot;,&quot;zyong&quot;);</div><div class=\"line\">\t\tucmap.put(&quot;updateTime&quot;, time);</div><div class=\"line\">\t\tucmap.put(&quot;list&quot;, updateClist);</div><div class=\"line\">\t\tconnectorInfoMapper.updateBatch(ucmap);</div></pre></td></tr></table></figure></p>\n<p>这里的需求是对设备的信息进行批量更新，利用Map来传参，Map中包含了一个List，这个List包含了需要更新的对象集合，也就是多条记录。<br>sql片段如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=&quot;updateBatch&quot; parameterType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\">      &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;;&quot;&gt;</div><div class=\"line\"> update connector_info</div><div class=\"line\">    set  </div><div class=\"line\">      Connector_Type = #&#123;item.connectorType,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Voltage_Upper_Limits = #&#123;item.voltageUpperLimits,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Voltage_Lower_Limits = #&#123;item.voltageLowerLimits,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Current = #&#123;item.current,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Power = #&#123;item.power,jdbcType=DOUBLE&#125;,</div><div class=\"line\">      National_Standard = #&#123;item.nationalStandard,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Update_User = #&#123;updateUser,jdbcType=VARCHAR&#125;,</div><div class=\"line\">\t  Update_Time = FROM_UNIXTIME(#&#123;updateTime,jdbcType=TIMESTAMP&#125;)   </div><div class=\"line\">    where Connector_ID = #&#123;item.connectorId,jdbcType=VARCHAR&#125;</div><div class=\"line\">    &lt;/foreach&gt;</div><div class=\"line\"> &lt;/update&gt;</div></pre></td></tr></table></figure></p>\n<p>   可以看到，这里使用了foreach标签进行迭代，item代表着每一个元素，item.power等代表的就是每个元素的属性，而没有加上item的参数如updateUser、updateTime等则是存放在Map中的参数，从需求代码中能看得更加明显。</p>\n<p>当我检查了多遍后，感觉没问题之后，运行。<br>控制台的错误让我明白还是太年轻——报错了！！！仔细一看，是Sql语法错误，What？我把sql放入Navicat中美化，又检查了好几遍，这明明没有错啊！</p>\n<p>于是开启了百度，各种查：</p>\n<ul>\n<li>有的说把separator=”;”中的分号换成——separator=”UNION ALL”，测试，还是报同样的错误。</li>\n<li>将几个属于Map的字段删除再测试，依然报错  </li>\n</ul>\n<p>查了很多并没有什么实质性的进展，将多条数据改成一条数据进行更新，测试，竟然通过了！——原因很明显：批量操作的原因导致。<br>再百度，终于找到了答案：<br>并不是Sql的原因，而是数据库设置的原因————Mysql需要打开批量更新的设置。</p>\n<font size=\"5\">在数据库JDBC链接中加入： <strong>&amp;allowMultiQueries=true</strong></font><br>如下：<br>jdbc.url=jdbc:mysql://139.224.35.81:3306/evshare?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true<br><br><font size=\"5\">在添加了这个“开关”之后，成功批量更新多条数据。</font>\n\n<h2 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h2><p>相比于批量更新，批量插入则没有类似的设置。<br>一个简单的示例Sql：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;insertBatch&quot; parameterType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\">  insert into connector_info (Equipment_Seq, Connector_ID, </div><div class=\"line\">      Connector_Type, Voltage_Upper_Limits, </div><div class=\"line\">      Voltage_Lower_Limits, Current, Power, </div><div class=\"line\">      National_Standard,Create_User,Create_Time,Update_Time)</div><div class=\"line\">      values</div><div class=\"line\">      &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;,&quot;&gt;</div><div class=\"line\">     (#&#123;item.equipmentSeq,jdbcType=BIGINT&#125;, #&#123;item.connectorId,jdbcType=VARCHAR&#125;, </div><div class=\"line\">      #&#123;item.connectorType,jdbcType=INTEGER&#125;, #&#123;item.voltageUpperLimits,jdbcType=INTEGER&#125;, </div><div class=\"line\">      #&#123;item.voltageLowerLimits,jdbcType=INTEGER&#125;, #&#123;item.current,jdbcType=INTEGER&#125;, #&#123;item.power,jdbcType=DOUBLE&#125;, </div><div class=\"line\">      #&#123;item.nationalStandard,jdbcType=INTEGER&#125;,</div><div class=\"line\">      #&#123;createUser,jdbcType=VARCHAR&#125;,</div><div class=\"line\">      FROM_UNIXTIME(#&#123;createTime,jdbcType=TIMESTAMP&#125;),</div><div class=\"line\">      FROM_UNIXTIME(#&#123;updateTime,jdbcType=TIMESTAMP&#125;))</div><div class=\"line\">      &lt;/foreach&gt;</div><div class=\"line\">  &lt;/insert&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li>有时候问题并不是出现在代码上，可以往系统环境和配置方面考虑。  </li>\n<li>对于批量更新Mysql需要设置，而Oracle则不需要设置，但sql可能要变化</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   这个问题困扰了整整一天。<br>   当遇到多条记录需要插入或者更新的时候，往往会使用批量操作来提高效率，提高性能。然而在使用过程中确是出现了各种问题，真的是有些坑只有趟过才知道！！<br>   好了，话不多说，进入正题。<br>   注：数据库Mysql     持久层框架 Mybatis</p>\n<h2 id=\"批量更新\"><a href=\"#批量更新\" class=\"headerlink\" title=\"批量更新\"></a>批量更新</h2><p>需求如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Map&lt;String,Object&gt; ucmap = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">\t\tucmap.put(&quot;updateUser&quot;,&quot;zyong&quot;);</div><div class=\"line\">\t\tucmap.put(&quot;updateTime&quot;, time);</div><div class=\"line\">\t\tucmap.put(&quot;list&quot;, updateClist);</div><div class=\"line\">\t\tconnectorInfoMapper.updateBatch(ucmap);</div></pre></td></tr></table></figure></p>\n<p>这里的需求是对设备的信息进行批量更新，利用Map来传参，Map中包含了一个List，这个List包含了需要更新的对象集合，也就是多条记录。<br>sql片段如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;update id=&quot;updateBatch&quot; parameterType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\">      &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;;&quot;&gt;</div><div class=\"line\"> update connector_info</div><div class=\"line\">    set  </div><div class=\"line\">      Connector_Type = #&#123;item.connectorType,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Voltage_Upper_Limits = #&#123;item.voltageUpperLimits,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Voltage_Lower_Limits = #&#123;item.voltageLowerLimits,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Current = #&#123;item.current,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Power = #&#123;item.power,jdbcType=DOUBLE&#125;,</div><div class=\"line\">      National_Standard = #&#123;item.nationalStandard,jdbcType=INTEGER&#125;,</div><div class=\"line\">      Update_User = #&#123;updateUser,jdbcType=VARCHAR&#125;,</div><div class=\"line\">\t  Update_Time = FROM_UNIXTIME(#&#123;updateTime,jdbcType=TIMESTAMP&#125;)   </div><div class=\"line\">    where Connector_ID = #&#123;item.connectorId,jdbcType=VARCHAR&#125;</div><div class=\"line\">    &lt;/foreach&gt;</div><div class=\"line\"> &lt;/update&gt;</div></pre></td></tr></table></figure></p>\n<p>   可以看到，这里使用了foreach标签进行迭代，item代表着每一个元素，item.power等代表的就是每个元素的属性，而没有加上item的参数如updateUser、updateTime等则是存放在Map中的参数，从需求代码中能看得更加明显。</p>\n<p>当我检查了多遍后，感觉没问题之后，运行。<br>控制台的错误让我明白还是太年轻——报错了！！！仔细一看，是Sql语法错误，What？我把sql放入Navicat中美化，又检查了好几遍，这明明没有错啊！</p>\n<p>于是开启了百度，各种查：</p>\n<ul>\n<li>有的说把separator=”;”中的分号换成——separator=”UNION ALL”，测试，还是报同样的错误。</li>\n<li>将几个属于Map的字段删除再测试，依然报错  </li>\n</ul>\n<p>查了很多并没有什么实质性的进展，将多条数据改成一条数据进行更新，测试，竟然通过了！——原因很明显：批量操作的原因导致。<br>再百度，终于找到了答案：<br>并不是Sql的原因，而是数据库设置的原因————Mysql需要打开批量更新的设置。</p>\n<font size=\"5\">在数据库JDBC链接中加入： <strong>&amp;allowMultiQueries=true</strong></font><br>如下：<br>jdbc.url=jdbc:mysql://139.224.35.81:3306/evshare?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true<br><br><font size=\"5\">在添加了这个“开关”之后，成功批量更新多条数据。</font>\n\n<h2 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h2><p>相比于批量更新，批量插入则没有类似的设置。<br>一个简单的示例Sql：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;insertBatch&quot; parameterType=&quot;java.util.Map&quot;&gt;</div><div class=\"line\">  insert into connector_info (Equipment_Seq, Connector_ID, </div><div class=\"line\">      Connector_Type, Voltage_Upper_Limits, </div><div class=\"line\">      Voltage_Lower_Limits, Current, Power, </div><div class=\"line\">      National_Standard,Create_User,Create_Time,Update_Time)</div><div class=\"line\">      values</div><div class=\"line\">      &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; separator=&quot;,&quot;&gt;</div><div class=\"line\">     (#&#123;item.equipmentSeq,jdbcType=BIGINT&#125;, #&#123;item.connectorId,jdbcType=VARCHAR&#125;, </div><div class=\"line\">      #&#123;item.connectorType,jdbcType=INTEGER&#125;, #&#123;item.voltageUpperLimits,jdbcType=INTEGER&#125;, </div><div class=\"line\">      #&#123;item.voltageLowerLimits,jdbcType=INTEGER&#125;, #&#123;item.current,jdbcType=INTEGER&#125;, #&#123;item.power,jdbcType=DOUBLE&#125;, </div><div class=\"line\">      #&#123;item.nationalStandard,jdbcType=INTEGER&#125;,</div><div class=\"line\">      #&#123;createUser,jdbcType=VARCHAR&#125;,</div><div class=\"line\">      FROM_UNIXTIME(#&#123;createTime,jdbcType=TIMESTAMP&#125;),</div><div class=\"line\">      FROM_UNIXTIME(#&#123;updateTime,jdbcType=TIMESTAMP&#125;))</div><div class=\"line\">      &lt;/foreach&gt;</div><div class=\"line\">  &lt;/insert&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li>有时候问题并不是出现在代码上，可以往系统环境和配置方面考虑。  </li>\n<li>对于批量更新Mysql需要设置，而Oracle则不需要设置，但sql可能要变化</li>\n</ol>\n"},{"title":"中缀表达式转后缀表达式（逆波兰）","date":"2017-12-18T11:23:12.000Z","_content":"### 一、中缀表达式转后缀表达式\n\n中缀表达式就是普通的表达式。如：9+（3-1）*3+10/2  \n后缀表达式是一种不需要括号的表示法，又叫逆波兰表达式。\n\n上面的式子用后缀法表示：9 3 1 - 3 * + 10 2 / +\n\n那么如何转化成后缀表达式？\n\n#### 思路：  \n从左往右遍历：  \n**1. 如果是数字则直接输出**  \n**2. 如果是符号则入栈，但要通过以下判断**\n- **若该符号c是右括号或者c的优先级≤栈顶符号，则栈中元素依次出栈输出，c入栈**\n\n代码实现：\n```\n//中缀转后缀表达式（逆波兰）------栈实现\npublic class NiPoLan2 {\n\n\tpublic static void main(String[] args) {\n\t\t//创建栈\n\t\tStack<String> s = new Stack<String>();\n\t\tString s1 = \"9+(3-1)*3+10/2\"; \t//例子  (1-2)*(4+5)   9+(3-1)*3+10/2\n\t\tchar[] o = s1.toCharArray();\n\t\tString r = \"\";\t//字符串r记录输出\n\t\t//遍历\n\t\tfor(int i=0;i<o.length;i++){\n\t\t//符号是数字\n\t\tif(Character.isDigit(o[i])){\n\t\t\t//判断两位整数，如10\n\t\t\tif(i<o.length-1&&Character.isDigit(o[i+1])){\n\t\t\t\tr = r+o[i]+o[i+1]+\" \";\n\t\t\t\ti++; //减少一次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tr = r+o[i]+\" \";\n\t\t}\n\t\t//符号是 (\n\t\tif(o[i]=='('){\n\t\t\ts.push(o[i]+\"\");\n\t\t}\n\t\t//符号是+ or -\n\t\tif(o[i]=='+'|o[i]=='-'){\n\t\t\t//栈不为空，且有乘除符号，则弹出\n\t\t\tif(!s.isEmpty()&&(s.peek().equals(\"*\")|s.peek().equals(\"/\"))){\n\t\t\t\t//全部出栈\n\t\t\t\twhile(!s.isEmpty()){\n\t\t\t\t\tr = r + s.pop()+\" \";\n\t\t\t\t}\n\t\t\t\t//出栈后，再将+-入栈\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t\t//栈为空\n\t\t\t}else{\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t\tSystem.out.println(o[i]+\"\");\n\t\t\t}\n\t\t}\n\t\t//符号是右括号则配对\n\t\tif(o[i]==')'){\n\t\t\tString a = s.pop();\n\t\t\tSystem.out.println(a);\n\t\t\tr = r + a+\" \";\n\t\t\ts.pop();\n\t\t}\n\t\t//符号是乘除\n\t\tif(o[i]=='*'|o[i]=='/'){\n\t\t\tSystem.out.println(s.peek());\n\t\t\t//栈顶是加减、括号\n\t\t\tif(s.isEmpty()){\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}else if(s.peek().equals(\"+\")|s.peek().equals(\"-\")|s.peek().equals(\"(\")){\t//s.peek()==\"-\"|s.peek()==\"+\"|s.peek()==\"(\"\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}\n\t\t    //栈顶是乘除，则出栈\n\t\t\telse if(s.peek()==\"*\"|s.peek()==\"/\"){\n\t\t\t\t//全部出栈\n\t\t\t\twhile(!s.isEmpty()){\n\t\t\t\t\tr = r + s.pop();\n\t\t\t\t}\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}\n\t\t}\n\t\t}\n\t\t//最后栈中不为空，全部出栈\n\t\twhile(!s.isEmpty()){\n\t\t\tr = r + s.pop()+\" \"; \n\t\t}\n\t\tSystem.out.println(r);\n}\n}\t\n```\n输出结果：\n```\n9 3 1 - 3 * + 10 2 / + \n```\n\n### 二、计算后缀表达式\n中缀表达式容易计算：9+（3-1）*3+10/2=20  \n那么后缀表达式如何计算呢？\n\n还是上面的例子： 9 3 1 - 3 * + 10 2 / + \n#### 思路：\n**从左往右遍历：**   \n\n1. **遇到数字就入栈**  \n2. **遇到符号就将栈顶的两个元素取出计算，将结果入栈；最后栈中的数就是最终结果**\n\n代码实现：\n\n```\npublic class NiPoLan {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tStack<Integer> s = new Stack<Integer>();\n\t\tString s1 = \"9 3 1 - 3 * + 10 2 / +\";\n\t\tString[] r = s1.split(\" \");\t\t\t\t//转为字符串数组\n\t\tSystem.out.println(s1);\n\t\tfor(int i=0;i<r.length;i++){\n\t\t\t//判断字符串r[i]是数字还是符号\n\t\t\t//r[i]是数字，入栈\n\t\t\tif(Character.isDigit(r[i].charAt(0))){\n\t\t\t\tint c = Integer.valueOf(r[i]);\n\t\t\t\ts.push(c);\n\t\t\t}else{\n\t\t\t\t//r[i]是符号，则运算\n\t\t\t\tswitch (r[i]) {\n\t\t\t\tcase \"-\":\n\t\t\t\t\tint a = s.pop();  \n\t\t\t\t\tint b = s.pop();  \n\t\t\t\t\ts.push(b-a);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b+a); \n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b/a);\n\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b*a);\n\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\t//输出结果\n\t\tSystem.out.println(s.pop());\n\t}\n\t}\n```\n输出结果：\n```\n9 3 1 - 3 * + 10 2 / +\n20\n```\n结果为 20。","source":"_posts/中缀表达式转后缀表达式（逆波兰）.md","raw":"---\ntitle: 中缀表达式转后缀表达式（逆波兰）\ndate: 2017-12-18 19:23:12\ntags: [算法,逆波兰表达式]\ncategories: 技术\n---\n### 一、中缀表达式转后缀表达式\n\n中缀表达式就是普通的表达式。如：9+（3-1）*3+10/2  \n后缀表达式是一种不需要括号的表示法，又叫逆波兰表达式。\n\n上面的式子用后缀法表示：9 3 1 - 3 * + 10 2 / +\n\n那么如何转化成后缀表达式？\n\n#### 思路：  \n从左往右遍历：  \n**1. 如果是数字则直接输出**  \n**2. 如果是符号则入栈，但要通过以下判断**\n- **若该符号c是右括号或者c的优先级≤栈顶符号，则栈中元素依次出栈输出，c入栈**\n\n代码实现：\n```\n//中缀转后缀表达式（逆波兰）------栈实现\npublic class NiPoLan2 {\n\n\tpublic static void main(String[] args) {\n\t\t//创建栈\n\t\tStack<String> s = new Stack<String>();\n\t\tString s1 = \"9+(3-1)*3+10/2\"; \t//例子  (1-2)*(4+5)   9+(3-1)*3+10/2\n\t\tchar[] o = s1.toCharArray();\n\t\tString r = \"\";\t//字符串r记录输出\n\t\t//遍历\n\t\tfor(int i=0;i<o.length;i++){\n\t\t//符号是数字\n\t\tif(Character.isDigit(o[i])){\n\t\t\t//判断两位整数，如10\n\t\t\tif(i<o.length-1&&Character.isDigit(o[i+1])){\n\t\t\t\tr = r+o[i]+o[i+1]+\" \";\n\t\t\t\ti++; //减少一次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tr = r+o[i]+\" \";\n\t\t}\n\t\t//符号是 (\n\t\tif(o[i]=='('){\n\t\t\ts.push(o[i]+\"\");\n\t\t}\n\t\t//符号是+ or -\n\t\tif(o[i]=='+'|o[i]=='-'){\n\t\t\t//栈不为空，且有乘除符号，则弹出\n\t\t\tif(!s.isEmpty()&&(s.peek().equals(\"*\")|s.peek().equals(\"/\"))){\n\t\t\t\t//全部出栈\n\t\t\t\twhile(!s.isEmpty()){\n\t\t\t\t\tr = r + s.pop()+\" \";\n\t\t\t\t}\n\t\t\t\t//出栈后，再将+-入栈\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t\t//栈为空\n\t\t\t}else{\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t\tSystem.out.println(o[i]+\"\");\n\t\t\t}\n\t\t}\n\t\t//符号是右括号则配对\n\t\tif(o[i]==')'){\n\t\t\tString a = s.pop();\n\t\t\tSystem.out.println(a);\n\t\t\tr = r + a+\" \";\n\t\t\ts.pop();\n\t\t}\n\t\t//符号是乘除\n\t\tif(o[i]=='*'|o[i]=='/'){\n\t\t\tSystem.out.println(s.peek());\n\t\t\t//栈顶是加减、括号\n\t\t\tif(s.isEmpty()){\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}else if(s.peek().equals(\"+\")|s.peek().equals(\"-\")|s.peek().equals(\"(\")){\t//s.peek()==\"-\"|s.peek()==\"+\"|s.peek()==\"(\"\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}\n\t\t    //栈顶是乘除，则出栈\n\t\t\telse if(s.peek()==\"*\"|s.peek()==\"/\"){\n\t\t\t\t//全部出栈\n\t\t\t\twhile(!s.isEmpty()){\n\t\t\t\t\tr = r + s.pop();\n\t\t\t\t}\n\t\t\t\ts.push(o[i]+\"\");\n\t\t\t}\n\t\t}\n\t\t}\n\t\t//最后栈中不为空，全部出栈\n\t\twhile(!s.isEmpty()){\n\t\t\tr = r + s.pop()+\" \"; \n\t\t}\n\t\tSystem.out.println(r);\n}\n}\t\n```\n输出结果：\n```\n9 3 1 - 3 * + 10 2 / + \n```\n\n### 二、计算后缀表达式\n中缀表达式容易计算：9+（3-1）*3+10/2=20  \n那么后缀表达式如何计算呢？\n\n还是上面的例子： 9 3 1 - 3 * + 10 2 / + \n#### 思路：\n**从左往右遍历：**   \n\n1. **遇到数字就入栈**  \n2. **遇到符号就将栈顶的两个元素取出计算，将结果入栈；最后栈中的数就是最终结果**\n\n代码实现：\n\n```\npublic class NiPoLan {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tStack<Integer> s = new Stack<Integer>();\n\t\tString s1 = \"9 3 1 - 3 * + 10 2 / +\";\n\t\tString[] r = s1.split(\" \");\t\t\t\t//转为字符串数组\n\t\tSystem.out.println(s1);\n\t\tfor(int i=0;i<r.length;i++){\n\t\t\t//判断字符串r[i]是数字还是符号\n\t\t\t//r[i]是数字，入栈\n\t\t\tif(Character.isDigit(r[i].charAt(0))){\n\t\t\t\tint c = Integer.valueOf(r[i]);\n\t\t\t\ts.push(c);\n\t\t\t}else{\n\t\t\t\t//r[i]是符号，则运算\n\t\t\t\tswitch (r[i]) {\n\t\t\t\tcase \"-\":\n\t\t\t\t\tint a = s.pop();  \n\t\t\t\t\tint b = s.pop();  \n\t\t\t\t\ts.push(b-a);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b+a); \n\t\t\t\t\tbreak;\n\t\t\t\tcase \"/\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b/a);\n\t\t\tbreak;\n\t\t\t\tcase \"*\":\n\t\t\t\t\t a = s.pop();  \n\t\t\t\t\t b = s.pop();  \n\t\t\t\t\ts.push(b*a);\n\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\t//输出结果\n\t\tSystem.out.println(s.pop());\n\t}\n\t}\n```\n输出结果：\n```\n9 3 1 - 3 * + 10 2 / +\n20\n```\n结果为 20。","slug":"中缀表达式转后缀表达式（逆波兰）","published":1,"updated":"2018-04-11T10:02:31.870Z","_id":"cjfqzt27c004f50tcozgy1uun","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、中缀表达式转后缀表达式\"><a href=\"#一、中缀表达式转后缀表达式\" class=\"headerlink\" title=\"一、中缀表达式转后缀表达式\"></a>一、中缀表达式转后缀表达式</h3><p>中缀表达式就是普通的表达式。如：9+（3-1）*3+10/2<br>后缀表达式是一种不需要括号的表示法，又叫逆波兰表达式。</p>\n<p>上面的式子用后缀法表示：9 3 1 - 3 * + 10 2 / +</p>\n<p>那么如何转化成后缀表达式？</p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>从左往右遍历：<br><strong>1. 如果是数字则直接输出</strong><br><strong>2. 如果是符号则入栈，但要通过以下判断</strong></p>\n<ul>\n<li><strong>若该符号c是右括号或者c的优先级≤栈顶符号，则栈中元素依次出栈输出，c入栈</strong></li>\n</ul>\n<p>代码实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">//中缀转后缀表达式（逆波兰）------栈实现</div><div class=\"line\">public class NiPoLan2 &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t//创建栈</div><div class=\"line\">\t\tStack&lt;String&gt; s = new Stack&lt;String&gt;();</div><div class=\"line\">\t\tString s1 = &quot;9+(3-1)*3+10/2&quot;; \t//例子  (1-2)*(4+5)   9+(3-1)*3+10/2</div><div class=\"line\">\t\tchar[] o = s1.toCharArray();</div><div class=\"line\">\t\tString r = &quot;&quot;;\t//字符串r记录输出</div><div class=\"line\">\t\t//遍历</div><div class=\"line\">\t\tfor(int i=0;i&lt;o.length;i++)&#123;</div><div class=\"line\">\t\t//符号是数字</div><div class=\"line\">\t\tif(Character.isDigit(o[i]))&#123;</div><div class=\"line\">\t\t\t//判断两位整数，如10</div><div class=\"line\">\t\t\tif(i&lt;o.length-1&amp;&amp;Character.isDigit(o[i+1]))&#123;</div><div class=\"line\">\t\t\t\tr = r+o[i]+o[i+1]+&quot; &quot;;</div><div class=\"line\">\t\t\t\ti++; //减少一次循环</div><div class=\"line\">\t\t\t\tcontinue;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tr = r+o[i]+&quot; &quot;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是 (</div><div class=\"line\">\t\tif(o[i]==&apos;(&apos;)&#123;</div><div class=\"line\">\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是+ or -</div><div class=\"line\">\t\tif(o[i]==&apos;+&apos;|o[i]==&apos;-&apos;)&#123;</div><div class=\"line\">\t\t\t//栈不为空，且有乘除符号，则弹出</div><div class=\"line\">\t\t\tif(!s.isEmpty()&amp;&amp;(s.peek().equals(&quot;*&quot;)|s.peek().equals(&quot;/&quot;)))&#123;</div><div class=\"line\">\t\t\t\t//全部出栈</div><div class=\"line\">\t\t\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\t\tr = r + s.pop()+&quot; &quot;;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t//出栈后，再将+-入栈</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t\t//栈为空</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t\tSystem.out.println(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是右括号则配对</div><div class=\"line\">\t\tif(o[i]==&apos;)&apos;)&#123;</div><div class=\"line\">\t\t\tString a = s.pop();</div><div class=\"line\">\t\t\tSystem.out.println(a);</div><div class=\"line\">\t\t\tr = r + a+&quot; &quot;;</div><div class=\"line\">\t\t\ts.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是乘除</div><div class=\"line\">\t\tif(o[i]==&apos;*&apos;|o[i]==&apos;/&apos;)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(s.peek());</div><div class=\"line\">\t\t\t//栈顶是加减、括号</div><div class=\"line\">\t\t\tif(s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;else if(s.peek().equals(&quot;+&quot;)|s.peek().equals(&quot;-&quot;)|s.peek().equals(&quot;(&quot;))&#123;\t//s.peek()==&quot;-&quot;|s.peek()==&quot;+&quot;|s.peek()==&quot;(&quot;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t    //栈顶是乘除，则出栈</div><div class=\"line\">\t\t\telse if(s.peek()==&quot;*&quot;|s.peek()==&quot;/&quot;)&#123;</div><div class=\"line\">\t\t\t\t//全部出栈</div><div class=\"line\">\t\t\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\t\tr = r + s.pop();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//最后栈中不为空，全部出栈</div><div class=\"line\">\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\tr = r + s.pop()+&quot; &quot;; </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(r);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">9 3 1 - 3 * + 10 2 / +</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、计算后缀表达式\"><a href=\"#二、计算后缀表达式\" class=\"headerlink\" title=\"二、计算后缀表达式\"></a>二、计算后缀表达式</h3><p>中缀表达式容易计算：9+（3-1）*3+10/2=20<br>那么后缀表达式如何计算呢？</p>\n<p>还是上面的例子： 9 3 1 - 3 * + 10 2 / + </p>\n<h4 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p><strong>从左往右遍历：</strong>   </p>\n<ol>\n<li><strong>遇到数字就入栈</strong>  </li>\n<li><strong>遇到符号就将栈顶的两个元素取出计算，将结果入栈；最后栈中的数就是最终结果</strong></li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class NiPoLan &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; s = new Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tString s1 = &quot;9 3 1 - 3 * + 10 2 / +&quot;;</div><div class=\"line\">\t\tString[] r = s1.split(&quot; &quot;);\t\t\t\t//转为字符串数组</div><div class=\"line\">\t\tSystem.out.println(s1);</div><div class=\"line\">\t\tfor(int i=0;i&lt;r.length;i++)&#123;</div><div class=\"line\">\t\t\t//判断字符串r[i]是数字还是符号</div><div class=\"line\">\t\t\t//r[i]是数字，入栈</div><div class=\"line\">\t\t\tif(Character.isDigit(r[i].charAt(0)))&#123;</div><div class=\"line\">\t\t\t\tint c = Integer.valueOf(r[i]);</div><div class=\"line\">\t\t\t\ts.push(c);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\t//r[i]是符号，则运算</div><div class=\"line\">\t\t\t\tswitch (r[i]) &#123;</div><div class=\"line\">\t\t\t\tcase &quot;-&quot;:</div><div class=\"line\">\t\t\t\t\tint a = s.pop();  </div><div class=\"line\">\t\t\t\t\tint b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b-a);</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;+&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b+a); </div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;/&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b/a);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;*&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b*a);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t\t\tdefault:</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t//输出结果</div><div class=\"line\">\t\tSystem.out.println(s.pop());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">9 3 1 - 3 * + 10 2 / +</div><div class=\"line\">20</div></pre></td></tr></table></figure></p>\n<p>结果为 20。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、中缀表达式转后缀表达式\"><a href=\"#一、中缀表达式转后缀表达式\" class=\"headerlink\" title=\"一、中缀表达式转后缀表达式\"></a>一、中缀表达式转后缀表达式</h3><p>中缀表达式就是普通的表达式。如：9+（3-1）*3+10/2<br>后缀表达式是一种不需要括号的表示法，又叫逆波兰表达式。</p>\n<p>上面的式子用后缀法表示：9 3 1 - 3 * + 10 2 / +</p>\n<p>那么如何转化成后缀表达式？</p>\n<h4 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p>从左往右遍历：<br><strong>1. 如果是数字则直接输出</strong><br><strong>2. 如果是符号则入栈，但要通过以下判断</strong></p>\n<ul>\n<li><strong>若该符号c是右括号或者c的优先级≤栈顶符号，则栈中元素依次出栈输出，c入栈</strong></li>\n</ul>\n<p>代码实现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\">//中缀转后缀表达式（逆波兰）------栈实现</div><div class=\"line\">public class NiPoLan2 &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t//创建栈</div><div class=\"line\">\t\tStack&lt;String&gt; s = new Stack&lt;String&gt;();</div><div class=\"line\">\t\tString s1 = &quot;9+(3-1)*3+10/2&quot;; \t//例子  (1-2)*(4+5)   9+(3-1)*3+10/2</div><div class=\"line\">\t\tchar[] o = s1.toCharArray();</div><div class=\"line\">\t\tString r = &quot;&quot;;\t//字符串r记录输出</div><div class=\"line\">\t\t//遍历</div><div class=\"line\">\t\tfor(int i=0;i&lt;o.length;i++)&#123;</div><div class=\"line\">\t\t//符号是数字</div><div class=\"line\">\t\tif(Character.isDigit(o[i]))&#123;</div><div class=\"line\">\t\t\t//判断两位整数，如10</div><div class=\"line\">\t\t\tif(i&lt;o.length-1&amp;&amp;Character.isDigit(o[i+1]))&#123;</div><div class=\"line\">\t\t\t\tr = r+o[i]+o[i+1]+&quot; &quot;;</div><div class=\"line\">\t\t\t\ti++; //减少一次循环</div><div class=\"line\">\t\t\t\tcontinue;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tr = r+o[i]+&quot; &quot;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是 (</div><div class=\"line\">\t\tif(o[i]==&apos;(&apos;)&#123;</div><div class=\"line\">\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是+ or -</div><div class=\"line\">\t\tif(o[i]==&apos;+&apos;|o[i]==&apos;-&apos;)&#123;</div><div class=\"line\">\t\t\t//栈不为空，且有乘除符号，则弹出</div><div class=\"line\">\t\t\tif(!s.isEmpty()&amp;&amp;(s.peek().equals(&quot;*&quot;)|s.peek().equals(&quot;/&quot;)))&#123;</div><div class=\"line\">\t\t\t\t//全部出栈</div><div class=\"line\">\t\t\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\t\tr = r + s.pop()+&quot; &quot;;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t//出栈后，再将+-入栈</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t\t//栈为空</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t\tSystem.out.println(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是右括号则配对</div><div class=\"line\">\t\tif(o[i]==&apos;)&apos;)&#123;</div><div class=\"line\">\t\t\tString a = s.pop();</div><div class=\"line\">\t\t\tSystem.out.println(a);</div><div class=\"line\">\t\t\tr = r + a+&quot; &quot;;</div><div class=\"line\">\t\t\ts.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//符号是乘除</div><div class=\"line\">\t\tif(o[i]==&apos;*&apos;|o[i]==&apos;/&apos;)&#123;</div><div class=\"line\">\t\t\tSystem.out.println(s.peek());</div><div class=\"line\">\t\t\t//栈顶是加减、括号</div><div class=\"line\">\t\t\tif(s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;else if(s.peek().equals(&quot;+&quot;)|s.peek().equals(&quot;-&quot;)|s.peek().equals(&quot;(&quot;))&#123;\t//s.peek()==&quot;-&quot;|s.peek()==&quot;+&quot;|s.peek()==&quot;(&quot;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t    //栈顶是乘除，则出栈</div><div class=\"line\">\t\t\telse if(s.peek()==&quot;*&quot;|s.peek()==&quot;/&quot;)&#123;</div><div class=\"line\">\t\t\t\t//全部出栈</div><div class=\"line\">\t\t\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\t\t\tr = r + s.pop();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\ts.push(o[i]+&quot;&quot;);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//最后栈中不为空，全部出栈</div><div class=\"line\">\t\twhile(!s.isEmpty())&#123;</div><div class=\"line\">\t\t\tr = r + s.pop()+&quot; &quot;; </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(r);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">9 3 1 - 3 * + 10 2 / +</div></pre></td></tr></table></figure></p>\n<h3 id=\"二、计算后缀表达式\"><a href=\"#二、计算后缀表达式\" class=\"headerlink\" title=\"二、计算后缀表达式\"></a>二、计算后缀表达式</h3><p>中缀表达式容易计算：9+（3-1）*3+10/2=20<br>那么后缀表达式如何计算呢？</p>\n<p>还是上面的例子： 9 3 1 - 3 * + 10 2 / + </p>\n<h4 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h4><p><strong>从左往右遍历：</strong>   </p>\n<ol>\n<li><strong>遇到数字就入栈</strong>  </li>\n<li><strong>遇到符号就将栈顶的两个元素取出计算，将结果入栈；最后栈中的数就是最终结果</strong></li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class NiPoLan &#123;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tStack&lt;Integer&gt; s = new Stack&lt;Integer&gt;();</div><div class=\"line\">\t\tString s1 = &quot;9 3 1 - 3 * + 10 2 / +&quot;;</div><div class=\"line\">\t\tString[] r = s1.split(&quot; &quot;);\t\t\t\t//转为字符串数组</div><div class=\"line\">\t\tSystem.out.println(s1);</div><div class=\"line\">\t\tfor(int i=0;i&lt;r.length;i++)&#123;</div><div class=\"line\">\t\t\t//判断字符串r[i]是数字还是符号</div><div class=\"line\">\t\t\t//r[i]是数字，入栈</div><div class=\"line\">\t\t\tif(Character.isDigit(r[i].charAt(0)))&#123;</div><div class=\"line\">\t\t\t\tint c = Integer.valueOf(r[i]);</div><div class=\"line\">\t\t\t\ts.push(c);</div><div class=\"line\">\t\t\t&#125;else&#123;</div><div class=\"line\">\t\t\t\t//r[i]是符号，则运算</div><div class=\"line\">\t\t\t\tswitch (r[i]) &#123;</div><div class=\"line\">\t\t\t\tcase &quot;-&quot;:</div><div class=\"line\">\t\t\t\t\tint a = s.pop();  </div><div class=\"line\">\t\t\t\t\tint b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b-a);</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;+&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b+a); </div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;/&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b/a);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t\t\tcase &quot;*&quot;:</div><div class=\"line\">\t\t\t\t\t a = s.pop();  </div><div class=\"line\">\t\t\t\t\t b = s.pop();  </div><div class=\"line\">\t\t\t\t\ts.push(b*a);</div><div class=\"line\">\t\t\tbreak;</div><div class=\"line\">\t\t\t\tdefault:</div><div class=\"line\">\t\t\t\t\tbreak;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t//输出结果</div><div class=\"line\">\t\tSystem.out.println(s.pop());</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">9 3 1 - 3 * + 10 2 / +</div><div class=\"line\">20</div></pre></td></tr></table></figure></p>\n<p>结果为 20。</p>\n"},{"title":"You","date":"2017-07-19T16:00:00.000Z","password":951219,"_content":"# 概述","source":"_posts/our01.md","raw":"---\ntitle: You\ndate: 2017-07-20 \ntags: [Soul]\ncategories: 芭乐\npassword: 951219\n---\n# 概述","slug":"our01","published":1,"updated":"2017-10-09T16:08:31.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt27h004i50tcrvjnlqok","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1>"},{"title":"深入理解synchronized关键字","date":"2017-10-14T09:30:15.000Z","_content":"## 一、synchronized的基本介绍\n\n谈到synchronized关键字，想必大家都不陌生，对它的初次印象如果用两个字来概括，无非就是 **“同步”** 。小小的一个词，蕴含了大道理，那么就让我们来探索一下。  \n### 1.简介\n**synchronized实现同步的基础是：java中的任何一个对象都可以作为锁。**  \n\n它有三种用法：  \n\n **1. 修饰普通同步方法，锁是当前实例对象**  \n \n**2. 修饰静态同步方法，锁是当前类的class对象（唯一）**\n\n**3. 修饰同步代码块，锁是括号中的对象**  \n\n### 2.使用\n来看以下几段代码  \n（1）不使用synchronized\n```\npublic class SynTest {\n\t\n\tpublic void method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\t\n\tpublic void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n```\nmethod 1 start\nmethod 2 start\nmethod 2 execute\nmethod 1 execute\nmethod 2 end\nmethod 1 end\n```\n可以看出，在不加synchronized修饰时，两个线程同时执行，互不冲突，线程2比线程1执行的快，因此先执行完毕。  \n（2）synchronized修饰普通方法\n\n```\npublic class SynTest {\n\t\n\tpublic synchronized void  method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\tpublic synchronized void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n```\n可以看出，线程2在线程1执行完成后才开始执行，达到了同步的效果。**这是因为两个线程需要获取同一把锁（即test对象）**，线程1先拿到锁，线程2只能等待直到线程1释放锁，才能执行。  \n（3）synchronized修饰静态方法\n\n```\npublic class SynTest {\n\t\n\tpublic static synchronized void  method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\tpublic static synchronized void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\tSynTest test2 = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest2.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n\n```\n可以看出，两个线程同样获得了同步的效果。但是明明是两个不同的对象（test、test2）所调用的，这是为什么？  \n**在这里synchronized修饰的是静态方法，而静态方法本质上是类的方法，因此这里的同步本质上是对类（Class对象）的同步**，test、test2都是属于类的实例对象，所以也会同步执行，不能并发执行。  \n**注：每个类只有一个Class对象。**  \n（4）synchronized修饰同步块\n\n```\npublic class SynTest {\n\t\n\tpublic  void  method1(){\n\t\tsynchronized(this){\n\t\tSystem.out.println(\"method 1 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");}\n\t}\n\tpublic void method2(){\n\t\tsynchronized(this){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n\n```\n可以看到，两个线程获得了同步的效果。**两个线程的锁都是synchronized同步块括号中的this对象，即当前对象（test）**。\n\n## 二、synchronized的实现原理\n### 2.1 实现原理  \n**JVM基于进入和退出Monitor对象来实现方法同步和代码块同步。** 但两者的实现细节不一样。\n#### 1. 代码块同步  \n**代码块同步是使用monitorenter和monitorexit指令（字节码指令）来完成。**   \nmonitorenter指令是在编译后插入到同步代码块的开始位置，monitorexit指令插入到方法结束处和异常处，JVM保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； \n#### 2. 方法同步  \n**方法同步是根据方法上的ACC_SYNCHRONIZED标识符（不是字节码指令）来实现的。** 它没有通过指令monitorenter和monitorexit来完成（也可以通过它完成）。  \n反编译可以发现，相比普通方法，常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。\n\n**总结：** 二者其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码指令来完成。\n### 2.2 对象头\nsynchronized用的锁是存在java对象头里的。\n要了解对象头，先看看对象在内存中（**java堆**）的分布。分为三部分：对象头，实例数据，和对齐填充。（如下图）  \n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B421.PNG?imageView2/2/w/500/h/600)\n\n从图上可以看到，对象头由2个字存储（若是数组对象则为3个字，多一个存储数组长度）。  \n对象头主要包括以下两部分数据（还有一个Fields）：  \n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B422.PNG?imageView2/2/w/400/h/500)  \n**Mark Word（标记字段）：** 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。  \n**Klass Pointer（类型指针）：** 指向对象的类元数据，虚拟机通过这个指针来确定这个对象是哪个类的实例。  \n当对象头处于无锁状态时，它的Mark Word存储结构如下：\n\n锁状态| 25bit| 4bit| 1bit是否是偏向锁| 2bit锁标志位\n--------|-------|---|---|-------\n&#160;无锁状态|对象的hashCode|对象分代年龄|&#160;&#160;&#160;&#160;&#160;&#160;&#160;0|&#160;&#160;&#160;01\n\n**注：在运行期间，Mark Word里的存储数据会随着锁标志位的变化而变化。**\n\n\n## 三、锁的优化和对比\njdk1.6之后对synchronized的实现进行了优化，来减少锁操作的开销。  \n因此锁出现了以下四种状态 **：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。**  \n它们并不是一成不变的状态，而是会通过互相竞争而升级，但是为了提高获得锁和释放锁的效率，它们只能升级不能降级。  升级顺序如下：  \n无锁 --> 偏向锁 --> 轻量级 --> 重量级\n### 3.1 偏向锁\n背景：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让获取锁的代价降低而引入了偏向锁。**偏向锁主要为了解决在没有竞争情况下锁的性能问题。**\n#### 1. 偏向锁的加锁  \n主要步骤如下：  \n（1）检测对象头Mark Word中的状态是否为偏向锁状态：  \n若是偏向锁状态（偏向锁标志为1，锁标志位01）执行步骤（2）；  \n若是无锁状态（偏向锁标志关闭，锁标志位01），那么线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，并存储锁偏向的线程ID（当前线程）；  \n（2）是偏向锁状态，则测试线程ID是否为当前线程ID，如果是则执行步骤（5），否则执行步骤（3）；  \n（3）线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行步骤（4）；   \n（4）通过CAS操作竞争锁失败，证明当前存在多线程竞争的情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；  \n（5）执行同步代码块\n\n\n#### 2. 偏向锁的解锁  \n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点，此时没有正在执行的字节码。步骤如下：  \n（1）首先暂停持有偏向锁的线程，然后检查该线程是否活着：\n没有活着：将对象头设置成无锁状态；  \n（2）活着：要么重新偏向于其他线程；要么恢复到无锁或升级为轻量锁；  \n（3）最后唤醒暂停的线程\n\n#### 3. 偏向锁的关闭    \n偏向锁默认开启，JVM参数关闭延迟：-XX：BiasedLockingStartupDelay=0。  \n如果确定应用程序里所有的锁通常都处于竞争状态下，通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序会默认进入轻量级锁状态。\n\n\n### 3.2 轻量级锁\n背景：**“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”**，这是一个经验数据，也是轻量级锁能提升程序同步性能的依据。**轻量级锁所适应的场景是线程交替执行同步块的情况。**\n\n\n#### 1. 轻量级锁的加锁  \n当关闭偏向锁功能或偏向锁升级为轻量级锁时，会尝试去获取轻量级锁。主要步骤如下：  \n（1）检测对象头Mark Word中的状态是否为无锁状态：若是无锁状态（偏向锁标志关闭，锁标志位01）执行步骤（2）；否则步骤（4）  \n（2）若是无锁状态，将对象头中的Mark Word复制到锁记录中（在执行同步块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间）；  \n（3）通过CAS将Mark Word替换为指向锁记录的指针：如果成功表示竞争到锁，执行同步代码；如果失败执行步骤（4）；  \n（4）判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；\n\n#### 2. 轻量级锁的解锁  \n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下： \n\n（1）取出获取轻量级锁时保存在Displaced Mark Word中的数据；  \n（2）用CAS操作将取出的数据替换当前对象的Mark\nWord中，如果成功，则说明释放锁成功，否则执行（3）；  \n（3） 如果CAS操作替换失败，说明有其他线程尝试获取该锁，存在锁竞争，锁会膨胀成重量级锁。\n### 3.3 重量级锁\n**重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现**，由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价非常昂贵。\n\n\n### 3.4 锁的对比\n\n锁 | 优点 | 缺点 | 适用场景\n---|----|-|-\n偏向锁 | 加锁和解锁不需要额外的消耗,和执行非同步方法相比仅存在纳米级的差距|如果线程间存在锁竞争，有额外的锁撤销的消耗 | 适用于只有一个线程访问同步块的场景\n轻量级锁 |竞争的线程不会阻塞，提高了程序的响应速度|如果始终得不到锁竞争的线程，使用自旋会消耗CPU | 追求响应时间，同步块执行速度非常快\n重量级锁 | 线程竞争不使用自旋，不会消耗CPU|线程阻塞，响应时间缓慢 | 追求吞吐量，同步块执行速度较长\n\n\n","source":"_posts/深入理解synchronized.md","raw":"---\ntitle: 深入理解synchronized关键字\ndate: 2017-10-14 17:30:15\ntags: [并发,synchronized]\ncategories: 技术\n---\n## 一、synchronized的基本介绍\n\n谈到synchronized关键字，想必大家都不陌生，对它的初次印象如果用两个字来概括，无非就是 **“同步”** 。小小的一个词，蕴含了大道理，那么就让我们来探索一下。  \n### 1.简介\n**synchronized实现同步的基础是：java中的任何一个对象都可以作为锁。**  \n\n它有三种用法：  \n\n **1. 修饰普通同步方法，锁是当前实例对象**  \n \n**2. 修饰静态同步方法，锁是当前类的class对象（唯一）**\n\n**3. 修饰同步代码块，锁是括号中的对象**  \n\n### 2.使用\n来看以下几段代码  \n（1）不使用synchronized\n```\npublic class SynTest {\n\t\n\tpublic void method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\t\n\tpublic void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n```\nmethod 1 start\nmethod 2 start\nmethod 2 execute\nmethod 1 execute\nmethod 2 end\nmethod 1 end\n```\n可以看出，在不加synchronized修饰时，两个线程同时执行，互不冲突，线程2比线程1执行的快，因此先执行完毕。  \n（2）synchronized修饰普通方法\n\n```\npublic class SynTest {\n\t\n\tpublic synchronized void  method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\tpublic synchronized void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n```\n可以看出，线程2在线程1执行完成后才开始执行，达到了同步的效果。**这是因为两个线程需要获取同一把锁（即test对象）**，线程1先拿到锁，线程2只能等待直到线程1释放锁，才能执行。  \n（3）synchronized修饰静态方法\n\n```\npublic class SynTest {\n\t\n\tpublic static synchronized void  method1(){\n\t\tSystem.out.println(\"method 1 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");\n\t}\n\tpublic static synchronized void method2(){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\tSynTest test2 = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest2.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n\n```\n可以看出，两个线程同样获得了同步的效果。但是明明是两个不同的对象（test、test2）所调用的，这是为什么？  \n**在这里synchronized修饰的是静态方法，而静态方法本质上是类的方法，因此这里的同步本质上是对类（Class对象）的同步**，test、test2都是属于类的实例对象，所以也会同步执行，不能并发执行。  \n**注：每个类只有一个Class对象。**  \n（4）synchronized修饰同步块\n\n```\npublic class SynTest {\n\t\n\tpublic  void  method1(){\n\t\tsynchronized(this){\n\t\tSystem.out.println(\"method 1 start\");\n\t\ttry {\n\t\t\tSystem.out.println(\"method 1 execute\");\n\t\t\tThread.sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 1 end\");}\n\t}\n\tpublic void method2(){\n\t\tsynchronized(this){\n\t\tSystem.out.println(\"method 2 start\");\n\t\t\n\t\ttry {\n\t\t\tSystem.out.println(\"method 2 execute\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"method 2 end\");}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSynTest test = new SynTest();\n\t\t//线程1---method1\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method1();\n\t\t\t}\n\t\t}).start();\n\t\t//线程2---method2\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttest.method2();\n\t\t\t}\n\t\t}).start();\n\t}\n}\n```\n\n```\nmethod 1 start\nmethod 1 execute\nmethod 1 end\nmethod 2 start\nmethod 2 execute\nmethod 2 end\n\n```\n可以看到，两个线程获得了同步的效果。**两个线程的锁都是synchronized同步块括号中的this对象，即当前对象（test）**。\n\n## 二、synchronized的实现原理\n### 2.1 实现原理  \n**JVM基于进入和退出Monitor对象来实现方法同步和代码块同步。** 但两者的实现细节不一样。\n#### 1. 代码块同步  \n**代码块同步是使用monitorenter和monitorexit指令（字节码指令）来完成。**   \nmonitorenter指令是在编译后插入到同步代码块的开始位置，monitorexit指令插入到方法结束处和异常处，JVM保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； \n#### 2. 方法同步  \n**方法同步是根据方法上的ACC_SYNCHRONIZED标识符（不是字节码指令）来实现的。** 它没有通过指令monitorenter和monitorexit来完成（也可以通过它完成）。  \n反编译可以发现，相比普通方法，常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。\n\n**总结：** 二者其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码指令来完成。\n### 2.2 对象头\nsynchronized用的锁是存在java对象头里的。\n要了解对象头，先看看对象在内存中（**java堆**）的分布。分为三部分：对象头，实例数据，和对齐填充。（如下图）  \n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B421.PNG?imageView2/2/w/500/h/600)\n\n从图上可以看到，对象头由2个字存储（若是数组对象则为3个字，多一个存储数组长度）。  \n对象头主要包括以下两部分数据（还有一个Fields）：  \n![image](http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B422.PNG?imageView2/2/w/400/h/500)  \n**Mark Word（标记字段）：** 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。  \n**Klass Pointer（类型指针）：** 指向对象的类元数据，虚拟机通过这个指针来确定这个对象是哪个类的实例。  \n当对象头处于无锁状态时，它的Mark Word存储结构如下：\n\n锁状态| 25bit| 4bit| 1bit是否是偏向锁| 2bit锁标志位\n--------|-------|---|---|-------\n&#160;无锁状态|对象的hashCode|对象分代年龄|&#160;&#160;&#160;&#160;&#160;&#160;&#160;0|&#160;&#160;&#160;01\n\n**注：在运行期间，Mark Word里的存储数据会随着锁标志位的变化而变化。**\n\n\n## 三、锁的优化和对比\njdk1.6之后对synchronized的实现进行了优化，来减少锁操作的开销。  \n因此锁出现了以下四种状态 **：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。**  \n它们并不是一成不变的状态，而是会通过互相竞争而升级，但是为了提高获得锁和释放锁的效率，它们只能升级不能降级。  升级顺序如下：  \n无锁 --> 偏向锁 --> 轻量级 --> 重量级\n### 3.1 偏向锁\n背景：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让获取锁的代价降低而引入了偏向锁。**偏向锁主要为了解决在没有竞争情况下锁的性能问题。**\n#### 1. 偏向锁的加锁  \n主要步骤如下：  \n（1）检测对象头Mark Word中的状态是否为偏向锁状态：  \n若是偏向锁状态（偏向锁标志为1，锁标志位01）执行步骤（2）；  \n若是无锁状态（偏向锁标志关闭，锁标志位01），那么线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，并存储锁偏向的线程ID（当前线程）；  \n（2）是偏向锁状态，则测试线程ID是否为当前线程ID，如果是则执行步骤（5），否则执行步骤（3）；  \n（3）线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行步骤（4）；   \n（4）通过CAS操作竞争锁失败，证明当前存在多线程竞争的情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；  \n（5）执行同步代码块\n\n\n#### 2. 偏向锁的解锁  \n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点，此时没有正在执行的字节码。步骤如下：  \n（1）首先暂停持有偏向锁的线程，然后检查该线程是否活着：\n没有活着：将对象头设置成无锁状态；  \n（2）活着：要么重新偏向于其他线程；要么恢复到无锁或升级为轻量锁；  \n（3）最后唤醒暂停的线程\n\n#### 3. 偏向锁的关闭    \n偏向锁默认开启，JVM参数关闭延迟：-XX：BiasedLockingStartupDelay=0。  \n如果确定应用程序里所有的锁通常都处于竞争状态下，通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序会默认进入轻量级锁状态。\n\n\n### 3.2 轻量级锁\n背景：**“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”**，这是一个经验数据，也是轻量级锁能提升程序同步性能的依据。**轻量级锁所适应的场景是线程交替执行同步块的情况。**\n\n\n#### 1. 轻量级锁的加锁  \n当关闭偏向锁功能或偏向锁升级为轻量级锁时，会尝试去获取轻量级锁。主要步骤如下：  \n（1）检测对象头Mark Word中的状态是否为无锁状态：若是无锁状态（偏向锁标志关闭，锁标志位01）执行步骤（2）；否则步骤（4）  \n（2）若是无锁状态，将对象头中的Mark Word复制到锁记录中（在执行同步块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间）；  \n（3）通过CAS将Mark Word替换为指向锁记录的指针：如果成功表示竞争到锁，执行同步代码；如果失败执行步骤（4）；  \n（4）判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；\n\n#### 2. 轻量级锁的解锁  \n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下： \n\n（1）取出获取轻量级锁时保存在Displaced Mark Word中的数据；  \n（2）用CAS操作将取出的数据替换当前对象的Mark\nWord中，如果成功，则说明释放锁成功，否则执行（3）；  \n（3） 如果CAS操作替换失败，说明有其他线程尝试获取该锁，存在锁竞争，锁会膨胀成重量级锁。\n### 3.3 重量级锁\n**重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现**，由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价非常昂贵。\n\n\n### 3.4 锁的对比\n\n锁 | 优点 | 缺点 | 适用场景\n---|----|-|-\n偏向锁 | 加锁和解锁不需要额外的消耗,和执行非同步方法相比仅存在纳米级的差距|如果线程间存在锁竞争，有额外的锁撤销的消耗 | 适用于只有一个线程访问同步块的场景\n轻量级锁 |竞争的线程不会阻塞，提高了程序的响应速度|如果始终得不到锁竞争的线程，使用自旋会消耗CPU | 追求响应时间，同步块执行速度非常快\n重量级锁 | 线程竞争不使用自旋，不会消耗CPU|线程阻塞，响应时间缓慢 | 追求吞吐量，同步块执行速度较长\n\n\n","slug":"深入理解synchronized","published":1,"updated":"2017-10-14T09:54:51.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt27k004l50tc6vqsnhd5","content":"<h2 id=\"一、synchronized的基本介绍\"><a href=\"#一、synchronized的基本介绍\" class=\"headerlink\" title=\"一、synchronized的基本介绍\"></a>一、synchronized的基本介绍</h2><p>谈到synchronized关键字，想必大家都不陌生，对它的初次印象如果用两个字来概括，无非就是 <strong>“同步”</strong> 。小小的一个词，蕴含了大道理，那么就让我们来探索一下。  </p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p><strong>synchronized实现同步的基础是：java中的任何一个对象都可以作为锁。</strong>  </p>\n<p>它有三种用法：  </p>\n<p> <strong>1. 修饰普通同步方法，锁是当前实例对象</strong>  </p>\n<p><strong>2. 修饰静态同步方法，锁是当前类的class对象（唯一）</strong></p>\n<p><strong>3. 修饰同步代码块，锁是括号中的对象</strong>  </p>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h3><p>来看以下几段代码<br>（1）不使用synchronized<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 2 end</div><div class=\"line\">method 1 end</div></pre></td></tr></table></figure>\n<p>可以看出，在不加synchronized修饰时，两个线程同时执行，互不冲突，线程2比线程1执行的快，因此先执行完毕。<br>（2）synchronized修饰普通方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic synchronized void  method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic synchronized void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看出，线程2在线程1执行完成后才开始执行，达到了同步的效果。<strong>这是因为两个线程需要获取同一把锁（即test对象）</strong>，线程1先拿到锁，线程2只能等待直到线程1释放锁，才能执行。<br>（3）synchronized修饰静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static synchronized void  method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static synchronized void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\tSynTest test2 = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest2.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看出，两个线程同样获得了同步的效果。但是明明是两个不同的对象（test、test2）所调用的，这是为什么？<br><strong>在这里synchronized修饰的是静态方法，而静态方法本质上是类的方法，因此这里的同步本质上是对类（Class对象）的同步</strong>，test、test2都是属于类的实例对象，所以也会同步执行，不能并发执行。<br><strong>注：每个类只有一个Class对象。</strong><br>（4）synchronized修饰同步块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic  void  method1()&#123;</div><div class=\"line\">\t\tsynchronized(this)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void method2()&#123;</div><div class=\"line\">\t\tsynchronized(this)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看到，两个线程获得了同步的效果。<strong>两个线程的锁都是synchronized同步块括号中的this对象，即当前对象（test）</strong>。</p>\n<h2 id=\"二、synchronized的实现原理\"><a href=\"#二、synchronized的实现原理\" class=\"headerlink\" title=\"二、synchronized的实现原理\"></a>二、synchronized的实现原理</h2><h3 id=\"2-1-实现原理\"><a href=\"#2-1-实现原理\" class=\"headerlink\" title=\"2.1 实现原理\"></a>2.1 实现原理</h3><p><strong>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步。</strong> 但两者的实现细节不一样。</p>\n<h4 id=\"1-代码块同步\"><a href=\"#1-代码块同步\" class=\"headerlink\" title=\"1. 代码块同步\"></a>1. 代码块同步</h4><p><strong>代码块同步是使用monitorenter和monitorexit指令（字节码指令）来完成。</strong><br>monitorenter指令是在编译后插入到同步代码块的开始位置，monitorexit指令插入到方法结束处和异常处，JVM保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； </p>\n<h4 id=\"2-方法同步\"><a href=\"#2-方法同步\" class=\"headerlink\" title=\"2. 方法同步\"></a>2. 方法同步</h4><p><strong>方法同步是根据方法上的ACC_SYNCHRONIZED标识符（不是字节码指令）来实现的。</strong> 它没有通过指令monitorenter和monitorexit来完成（也可以通过它完成）。<br>反编译可以发现，相比普通方法，常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。</p>\n<p><strong>总结：</strong> 二者其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码指令来完成。</p>\n<h3 id=\"2-2-对象头\"><a href=\"#2-2-对象头\" class=\"headerlink\" title=\"2.2 对象头\"></a>2.2 对象头</h3><p>synchronized用的锁是存在java对象头里的。<br>要了解对象头，先看看对象在内存中（<strong>java堆</strong>）的分布。分为三部分：对象头，实例数据，和对齐填充。（如下图）<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B421.PNG?imageView2/2/w/500/h/600\" alt=\"image\"></p>\n<p>从图上可以看到，对象头由2个字存储（若是数组对象则为3个字，多一个存储数组长度）。<br>对象头主要包括以下两部分数据（还有一个Fields）：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B422.PNG?imageView2/2/w/400/h/500\" alt=\"image\"><br><strong>Mark Word（标记字段）：</strong> 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。<br><strong>Klass Pointer（类型指针）：</strong> 指向对象的类元数据，虚拟机通过这个指针来确定这个对象是哪个类的实例。<br>当对象头处于无锁状态时，它的Mark Word存储结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>锁状态</th>\n<th>25bit</th>\n<th>4bit</th>\n<th>1bit是否是偏向锁</th>\n<th>2bit锁标志位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#160;无锁状态</td>\n<td>对象的hashCode</td>\n<td>对象分代年龄</td>\n<td>&#160;&#160;&#160;&#160;&#160;&#160;&#160;0</td>\n<td>&#160;&#160;&#160;01</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：在运行期间，Mark Word里的存储数据会随着锁标志位的变化而变化。</strong></p>\n<h2 id=\"三、锁的优化和对比\"><a href=\"#三、锁的优化和对比\" class=\"headerlink\" title=\"三、锁的优化和对比\"></a>三、锁的优化和对比</h2><p>jdk1.6之后对synchronized的实现进行了优化，来减少锁操作的开销。<br>因此锁出现了以下四种状态 <strong>：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。</strong><br>它们并不是一成不变的状态，而是会通过互相竞争而升级，但是为了提高获得锁和释放锁的效率，它们只能升级不能降级。  升级顺序如下：<br>无锁 –&gt; 偏向锁 –&gt; 轻量级 –&gt; 重量级</p>\n<h3 id=\"3-1-偏向锁\"><a href=\"#3-1-偏向锁\" class=\"headerlink\" title=\"3.1 偏向锁\"></a>3.1 偏向锁</h3><p>背景：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让获取锁的代价降低而引入了偏向锁。<strong>偏向锁主要为了解决在没有竞争情况下锁的性能问题。</strong></p>\n<h4 id=\"1-偏向锁的加锁\"><a href=\"#1-偏向锁的加锁\" class=\"headerlink\" title=\"1. 偏向锁的加锁\"></a>1. 偏向锁的加锁</h4><p>主要步骤如下：<br>（1）检测对象头Mark Word中的状态是否为偏向锁状态：<br>若是偏向锁状态（偏向锁标志为1，锁标志位01）执行步骤（2）；<br>若是无锁状态（偏向锁标志关闭，锁标志位01），那么线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，并存储锁偏向的线程ID（当前线程）；<br>（2）是偏向锁状态，则测试线程ID是否为当前线程ID，如果是则执行步骤（5），否则执行步骤（3）；<br>（3）线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行步骤（4）；<br>（4）通过CAS操作竞争锁失败，证明当前存在多线程竞争的情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；<br>（5）执行同步代码块</p>\n<h4 id=\"2-偏向锁的解锁\"><a href=\"#2-偏向锁的解锁\" class=\"headerlink\" title=\"2. 偏向锁的解锁\"></a>2. 偏向锁的解锁</h4><p>偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点，此时没有正在执行的字节码。步骤如下：<br>（1）首先暂停持有偏向锁的线程，然后检查该线程是否活着：<br>没有活着：将对象头设置成无锁状态；<br>（2）活着：要么重新偏向于其他线程；要么恢复到无锁或升级为轻量锁；<br>（3）最后唤醒暂停的线程</p>\n<h4 id=\"3-偏向锁的关闭\"><a href=\"#3-偏向锁的关闭\" class=\"headerlink\" title=\"3. 偏向锁的关闭\"></a>3. 偏向锁的关闭</h4><p>偏向锁默认开启，JVM参数关闭延迟：-XX：BiasedLockingStartupDelay=0。<br>如果确定应用程序里所有的锁通常都处于竞争状态下，通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序会默认进入轻量级锁状态。</p>\n<h3 id=\"3-2-轻量级锁\"><a href=\"#3-2-轻量级锁\" class=\"headerlink\" title=\"3.2 轻量级锁\"></a>3.2 轻量级锁</h3><p>背景：<strong>“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”</strong>，这是一个经验数据，也是轻量级锁能提升程序同步性能的依据。<strong>轻量级锁所适应的场景是线程交替执行同步块的情况。</strong></p>\n<h4 id=\"1-轻量级锁的加锁\"><a href=\"#1-轻量级锁的加锁\" class=\"headerlink\" title=\"1. 轻量级锁的加锁\"></a>1. 轻量级锁的加锁</h4><p>当关闭偏向锁功能或偏向锁升级为轻量级锁时，会尝试去获取轻量级锁。主要步骤如下：<br>（1）检测对象头Mark Word中的状态是否为无锁状态：若是无锁状态（偏向锁标志关闭，锁标志位01）执行步骤（2）；否则步骤（4）<br>（2）若是无锁状态，将对象头中的Mark Word复制到锁记录中（在执行同步块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间）；<br>（3）通过CAS将Mark Word替换为指向锁记录的指针：如果成功表示竞争到锁，执行同步代码；如果失败执行步骤（4）；<br>（4）判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；</p>\n<h4 id=\"2-轻量级锁的解锁\"><a href=\"#2-轻量级锁的解锁\" class=\"headerlink\" title=\"2. 轻量级锁的解锁\"></a>2. 轻量级锁的解锁</h4><p>轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下： </p>\n<p>（1）取出获取轻量级锁时保存在Displaced Mark Word中的数据；<br>（2）用CAS操作将取出的数据替换当前对象的Mark<br>Word中，如果成功，则说明释放锁成功，否则执行（3）；<br>（3） 如果CAS操作替换失败，说明有其他线程尝试获取该锁，存在锁竞争，锁会膨胀成重量级锁。</p>\n<h3 id=\"3-3-重量级锁\"><a href=\"#3-3-重量级锁\" class=\"headerlink\" title=\"3.3 重量级锁\"></a>3.3 重量级锁</h3><p><strong>重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现</strong>，由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价非常昂贵。</p>\n<h3 id=\"3-4-锁的对比\"><a href=\"#3-4-锁的对比\" class=\"headerlink\" title=\"3.4 锁的对比\"></a>3.4 锁的对比</h3><table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁</td>\n<td>加锁和解锁不需要额外的消耗,和执行非同步方法相比仅存在纳米级的差距</td>\n<td>如果线程间存在锁竞争，有额外的锁撤销的消耗</td>\n<td>适用于只有一个线程访问同步块的场景</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>竞争的线程不会阻塞，提高了程序的响应速度</td>\n<td>如果始终得不到锁竞争的线程，使用自旋会消耗CPU</td>\n<td>追求响应时间，同步块执行速度非常快</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程竞争不使用自旋，不会消耗CPU</td>\n<td>线程阻塞，响应时间缓慢</td>\n<td>追求吞吐量，同步块执行速度较长</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、synchronized的基本介绍\"><a href=\"#一、synchronized的基本介绍\" class=\"headerlink\" title=\"一、synchronized的基本介绍\"></a>一、synchronized的基本介绍</h2><p>谈到synchronized关键字，想必大家都不陌生，对它的初次印象如果用两个字来概括，无非就是 <strong>“同步”</strong> 。小小的一个词，蕴含了大道理，那么就让我们来探索一下。  </p>\n<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p><strong>synchronized实现同步的基础是：java中的任何一个对象都可以作为锁。</strong>  </p>\n<p>它有三种用法：  </p>\n<p> <strong>1. 修饰普通同步方法，锁是当前实例对象</strong>  </p>\n<p><strong>2. 修饰静态同步方法，锁是当前类的class对象（唯一）</strong></p>\n<p><strong>3. 修饰同步代码块，锁是括号中的对象</strong>  </p>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h3><p>来看以下几段代码<br>（1）不使用synchronized<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 2 end</div><div class=\"line\">method 1 end</div></pre></td></tr></table></figure>\n<p>可以看出，在不加synchronized修饰时，两个线程同时执行，互不冲突，线程2比线程1执行的快，因此先执行完毕。<br>（2）synchronized修饰普通方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic synchronized void  method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic synchronized void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看出，线程2在线程1执行完成后才开始执行，达到了同步的效果。<strong>这是因为两个线程需要获取同一把锁（即test对象）</strong>，线程1先拿到锁，线程2只能等待直到线程1释放锁，才能执行。<br>（3）synchronized修饰静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static synchronized void  method1()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static synchronized void method2()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\tSynTest test2 = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest2.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看出，两个线程同样获得了同步的效果。但是明明是两个不同的对象（test、test2）所调用的，这是为什么？<br><strong>在这里synchronized修饰的是静态方法，而静态方法本质上是类的方法，因此这里的同步本质上是对类（Class对象）的同步</strong>，test、test2都是属于类的实例对象，所以也会同步执行，不能并发执行。<br><strong>注：每个类只有一个Class对象。</strong><br>（4）synchronized修饰同步块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SynTest &#123;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic  void  method1()&#123;</div><div class=\"line\">\t\tsynchronized(this)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 start&quot;);</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 1 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(2000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 1 end&quot;);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic void method2()&#123;</div><div class=\"line\">\t\tsynchronized(this)&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 start&quot;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tSystem.out.println(&quot;method 2 execute&quot;);</div><div class=\"line\">\t\t\tThread.sleep(1000);</div><div class=\"line\">\t\t&#125; catch (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(&quot;method 2 end&quot;);&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSynTest test = new SynTest();</div><div class=\"line\">\t\t//线程1---method1</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method1();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t\t//线程2---method2</div><div class=\"line\">\t\tnew Thread(new Runnable() &#123;</div><div class=\"line\">\t\t\t@Override</div><div class=\"line\">\t\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\t\ttest.method2();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;).start();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">method 1 start</div><div class=\"line\">method 1 execute</div><div class=\"line\">method 1 end</div><div class=\"line\">method 2 start</div><div class=\"line\">method 2 execute</div><div class=\"line\">method 2 end</div></pre></td></tr></table></figure>\n<p>可以看到，两个线程获得了同步的效果。<strong>两个线程的锁都是synchronized同步块括号中的this对象，即当前对象（test）</strong>。</p>\n<h2 id=\"二、synchronized的实现原理\"><a href=\"#二、synchronized的实现原理\" class=\"headerlink\" title=\"二、synchronized的实现原理\"></a>二、synchronized的实现原理</h2><h3 id=\"2-1-实现原理\"><a href=\"#2-1-实现原理\" class=\"headerlink\" title=\"2.1 实现原理\"></a>2.1 实现原理</h3><p><strong>JVM基于进入和退出Monitor对象来实现方法同步和代码块同步。</strong> 但两者的实现细节不一样。</p>\n<h4 id=\"1-代码块同步\"><a href=\"#1-代码块同步\" class=\"headerlink\" title=\"1. 代码块同步\"></a>1. 代码块同步</h4><p><strong>代码块同步是使用monitorenter和monitorexit指令（字节码指令）来完成。</strong><br>monitorenter指令是在编译后插入到同步代码块的开始位置，monitorexit指令插入到方法结束处和异常处，JVM保证每一个monitorenter都有一个monitorexit与之相对应。任何对象都有一个monitor与之相关联，当且一个monitor被持有之后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取对象的锁； </p>\n<h4 id=\"2-方法同步\"><a href=\"#2-方法同步\" class=\"headerlink\" title=\"2. 方法同步\"></a>2. 方法同步</h4><p><strong>方法同步是根据方法上的ACC_SYNCHRONIZED标识符（不是字节码指令）来实现的。</strong> 它没有通过指令monitorenter和monitorexit来完成（也可以通过它完成）。<br>反编译可以发现，相比普通方法，常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。</p>\n<p><strong>总结：</strong> 二者其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码指令来完成。</p>\n<h3 id=\"2-2-对象头\"><a href=\"#2-2-对象头\" class=\"headerlink\" title=\"2.2 对象头\"></a>2.2 对象头</h3><p>synchronized用的锁是存在java对象头里的。<br>要了解对象头，先看看对象在内存中（<strong>java堆</strong>）的分布。分为三部分：对象头，实例数据，和对齐填充。（如下图）<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B421.PNG?imageView2/2/w/500/h/600\" alt=\"image\"></p>\n<p>从图上可以看到，对象头由2个字存储（若是数组对象则为3个字，多一个存储数组长度）。<br>对象头主要包括以下两部分数据（还有一个Fields）：<br><img src=\"http://osuskkx7k.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%A4%B422.PNG?imageView2/2/w/400/h/500\" alt=\"image\"><br><strong>Mark Word（标记字段）：</strong> 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。<br><strong>Klass Pointer（类型指针）：</strong> 指向对象的类元数据，虚拟机通过这个指针来确定这个对象是哪个类的实例。<br>当对象头处于无锁状态时，它的Mark Word存储结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>锁状态</th>\n<th>25bit</th>\n<th>4bit</th>\n<th>1bit是否是偏向锁</th>\n<th>2bit锁标志位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#160;无锁状态</td>\n<td>对象的hashCode</td>\n<td>对象分代年龄</td>\n<td>&#160;&#160;&#160;&#160;&#160;&#160;&#160;0</td>\n<td>&#160;&#160;&#160;01</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注：在运行期间，Mark Word里的存储数据会随着锁标志位的变化而变化。</strong></p>\n<h2 id=\"三、锁的优化和对比\"><a href=\"#三、锁的优化和对比\" class=\"headerlink\" title=\"三、锁的优化和对比\"></a>三、锁的优化和对比</h2><p>jdk1.6之后对synchronized的实现进行了优化，来减少锁操作的开销。<br>因此锁出现了以下四种状态 <strong>：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。</strong><br>它们并不是一成不变的状态，而是会通过互相竞争而升级，但是为了提高获得锁和释放锁的效率，它们只能升级不能降级。  升级顺序如下：<br>无锁 –&gt; 偏向锁 –&gt; 轻量级 –&gt; 重量级</p>\n<h3 id=\"3-1-偏向锁\"><a href=\"#3-1-偏向锁\" class=\"headerlink\" title=\"3.1 偏向锁\"></a>3.1 偏向锁</h3><p>背景：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让获取锁的代价降低而引入了偏向锁。<strong>偏向锁主要为了解决在没有竞争情况下锁的性能问题。</strong></p>\n<h4 id=\"1-偏向锁的加锁\"><a href=\"#1-偏向锁的加锁\" class=\"headerlink\" title=\"1. 偏向锁的加锁\"></a>1. 偏向锁的加锁</h4><p>主要步骤如下：<br>（1）检测对象头Mark Word中的状态是否为偏向锁状态：<br>若是偏向锁状态（偏向锁标志为1，锁标志位01）执行步骤（2）；<br>若是无锁状态（偏向锁标志关闭，锁标志位01），那么线程在执行同步块之前，JVM会现在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，并存储锁偏向的线程ID（当前线程）；<br>（2）是偏向锁状态，则测试线程ID是否为当前线程ID，如果是则执行步骤（5），否则执行步骤（3）；<br>（3）线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行步骤（4）；<br>（4）通过CAS操作竞争锁失败，证明当前存在多线程竞争的情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；<br>（5）执行同步代码块</p>\n<h4 id=\"2-偏向锁的解锁\"><a href=\"#2-偏向锁的解锁\" class=\"headerlink\" title=\"2. 偏向锁的解锁\"></a>2. 偏向锁的解锁</h4><p>偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点，此时没有正在执行的字节码。步骤如下：<br>（1）首先暂停持有偏向锁的线程，然后检查该线程是否活着：<br>没有活着：将对象头设置成无锁状态；<br>（2）活着：要么重新偏向于其他线程；要么恢复到无锁或升级为轻量锁；<br>（3）最后唤醒暂停的线程</p>\n<h4 id=\"3-偏向锁的关闭\"><a href=\"#3-偏向锁的关闭\" class=\"headerlink\" title=\"3. 偏向锁的关闭\"></a>3. 偏向锁的关闭</h4><p>偏向锁默认开启，JVM参数关闭延迟：-XX：BiasedLockingStartupDelay=0。<br>如果确定应用程序里所有的锁通常都处于竞争状态下，通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序会默认进入轻量级锁状态。</p>\n<h3 id=\"3-2-轻量级锁\"><a href=\"#3-2-轻量级锁\" class=\"headerlink\" title=\"3.2 轻量级锁\"></a>3.2 轻量级锁</h3><p>背景：<strong>“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”</strong>，这是一个经验数据，也是轻量级锁能提升程序同步性能的依据。<strong>轻量级锁所适应的场景是线程交替执行同步块的情况。</strong></p>\n<h4 id=\"1-轻量级锁的加锁\"><a href=\"#1-轻量级锁的加锁\" class=\"headerlink\" title=\"1. 轻量级锁的加锁\"></a>1. 轻量级锁的加锁</h4><p>当关闭偏向锁功能或偏向锁升级为轻量级锁时，会尝试去获取轻量级锁。主要步骤如下：<br>（1）检测对象头Mark Word中的状态是否为无锁状态：若是无锁状态（偏向锁标志关闭，锁标志位01）执行步骤（2）；否则步骤（4）<br>（2）若是无锁状态，将对象头中的Mark Word复制到锁记录中（在执行同步块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的空间）；<br>（3）通过CAS将Mark Word替换为指向锁记录的指针：如果成功表示竞争到锁，执行同步代码；如果失败执行步骤（4）；<br>（4）判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；</p>\n<h4 id=\"2-轻量级锁的解锁\"><a href=\"#2-轻量级锁的解锁\" class=\"headerlink\" title=\"2. 轻量级锁的解锁\"></a>2. 轻量级锁的解锁</h4><p>轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下： </p>\n<p>（1）取出获取轻量级锁时保存在Displaced Mark Word中的数据；<br>（2）用CAS操作将取出的数据替换当前对象的Mark<br>Word中，如果成功，则说明释放锁成功，否则执行（3）；<br>（3） 如果CAS操作替换失败，说明有其他线程尝试获取该锁，存在锁竞争，锁会膨胀成重量级锁。</p>\n<h3 id=\"3-3-重量级锁\"><a href=\"#3-3-重量级锁\" class=\"headerlink\" title=\"3.3 重量级锁\"></a>3.3 重量级锁</h3><p><strong>重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现</strong>，由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价非常昂贵。</p>\n<h3 id=\"3-4-锁的对比\"><a href=\"#3-4-锁的对比\" class=\"headerlink\" title=\"3.4 锁的对比\"></a>3.4 锁的对比</h3><table>\n<thead>\n<tr>\n<th>锁</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁</td>\n<td>加锁和解锁不需要额外的消耗,和执行非同步方法相比仅存在纳米级的差距</td>\n<td>如果线程间存在锁竞争，有额外的锁撤销的消耗</td>\n<td>适用于只有一个线程访问同步块的场景</td>\n</tr>\n<tr>\n<td>轻量级锁</td>\n<td>竞争的线程不会阻塞，提高了程序的响应速度</td>\n<td>如果始终得不到锁竞争的线程，使用自旋会消耗CPU</td>\n<td>追求响应时间，同步块执行速度非常快</td>\n</tr>\n<tr>\n<td>重量级锁</td>\n<td>线程竞争不使用自旋，不会消耗CPU</td>\n<td>线程阻塞，响应时间缓慢</td>\n<td>追求吞吐量，同步块执行速度较长</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"深入理解volatile关键字","date":"2017-10-12T07:12:12.000Z","_content":"## 一、volatile的特性\n###   1. volatile的可见性\n 可见性的意思是：当一个线程修改一个共享变量时，另一个线程能读到这个修改的值。  \n volatile在多线程的开发中，保证了共享变量的可见性（立即）。\n```\n//全局变量\nboolean open=true;\n\n//线程A\nresource.close();\nopen = false;\n\n//线程B\nwhile(open) {\ndoSomething(resource);\n}\n```\nopen是一个全局变量，用来描述一个资源的打开关闭状态，当线程A把资源关闭后，open置为false，而这个改动对线程B**不是立即可见**的，因此线程B还会运行，从而造成错误。  \n当添加volatile关键字修饰之后，线程B就可以**立即**将改动后的open变量（主内存）同步到自己的工作内存中，从而正确的停止运行。\n\n\n###  2. volatile的有序性（禁止指令重排序）\n \n\n```\n//线程A\ncontext = loadContext();//初始化\ninit = true;\n//线程B\nwhile(!init){ //根据init变量决定是否使用context（为false时等待，为true时顺序执行）\n   sleep(100);\n}\ndoSomething(context);\n\n```\n以上程序运行没有问题，然而当线程A中发生了指令重排序：\n```\ninit = true;\ncontext = loadContext();\n```\n那么B就可能跳过等待，拿到一个正在初始化或初始化未完成的context对象，从而发生程序错误。  \n当init变量用volatile修饰后，就会阻止JVM对其相关代码进行指令重排，这样就能够按照既定的顺序执行。  \n 在双重判断类型的单例模式中正是应用了volatile关键字的这个特性，才不会导致单例模式失效。\n \n###  3. volatile不保证操作的原子性\n原子操作：不可中断的一个或一系列操作（多线程中借助于原子操作可以实现互斥锁）  \n原子性：一个操作或多个操作要么全部成功执行，要么就都失败。一个操作是原子操作，那么我们称它具有原子性。  \n先看示例代码\n```\npublic class TestAtomic {\n//计数器\nprivate static volatile int count=0;\n\t\n\tpublic void inc(){\n\t\tcount++;\n\t}\n\tprivate static class Countone implements  Runnable {\n\t\tpublic void run() {\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\t\n\t\tfor(int i=0;i<10;i++){\n\t\t\tnew Thread(new Countone()).start();\n\t\t}\n\t\t//保证10个线程都执行完毕\n\t\twhile(Thread.activeCount()>1)\n\t\t\tThread.yield();\n\t\t\n\t\tSystem.out.println(\"最终count的值为：\"+TestAtomic.count);\n\t}\n}\n```\n```\n输出结果：\n最终count的值为：863\n最终count的值为：1000\n最终count的值为：872\n最终count的值为：835\n```\n将count变量声明为volatile int类型，保证了所有线程对变量count的可见性，上述定义了10个线程，每个线程对count执行100次自增的操作，按照理想的结果，最后的结果应该为10*100=1000，然而多次运行可以看到，并不是每次的结果都是1000，难道volatile修饰的变量的可见性特征失效了？**并不是，而是volatile只能保证共享变量对所有线程的可见性，不能保证变量操作的原子性。** count++不是一个原子操作，因此volatile不能保证这个操作的原子性。\n\n**有以下三种方式可以保证对变量操作的原子性：**\n\n 1. 使用synchronized关键字\n 2. 使用Lock对象\n 3. 使用java.util.concurrent.atomic包下提供的原子操作类\n\n## 二、volatile的实现原理\n### 1.可见性\n它的实现原理与java内存模型（JMM）相关，每个线程都有自己的工作内存，并共享主内存的数据。下面是普通变量与volatile变量的异同：\n\n - 普通变量：读操作会优先读取工作内存的数据，如果工作内存中不存在，则从主内存中拷贝一份数据到工作内存中；写操作只会修改工作内存的副本数据。这种情况下，其它线程就无法读取变量的最新值。\n \n - volatile变量：读操作时会把工作内存中对应的值设为无效，要求线程从主内存中读取数据；写操作时会把工作内存中对应的数据刷新到主内存中。这种情况下，其它线程就可以读取变量的最新值。\n\n那么它是如何是实现的呢？这就涉及到了CPU指令。  \n如果对声明了volatile变量进行写操作，**JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。** 但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。\n### 2.禁止重排序\n在执行程序时为了提高性能，编译器和处理器通常会对指令做重排序： \n\n - 编译器重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序； \n - 处理器重排序。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序； \n指令重排序对单线程没有影响，但是会影响多线程的正确性，因此需要对禁止指令重排序。\n\n在上面提到过lock指令，**lock指令其实就相当于一个内存屏障。内存屏障是一组处理指令，用来实现对内存操作的顺序限制。** volatile的底层就是通过内存屏障来实现的。\n\n## 三、volatile与synchronized的比较\n\n 1. volatile本质是在告诉JVM当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞。 \n \n 2. volatile只能修饰变量，synchronized可以修饰变量、方法和类；  \n \n 3. volatile保证变量的修改可见性，synchronized则可以保证变量的修改可见性和原子性。  \n 4. volatile不会造成线程的阻塞，synchronized可能会造成线程的阻塞。  \n 5. volatile比synchronized的使用和执行成本更低，因为它不会引起上下文的切换和调度。\n\n## 四、volatile的扩展\n\n### 1.volatile的常用场景\n\n - 状态标记量（高并发的场景）\n\n - 双重判断的单例模式\n\n### 2.volatile修饰数组\n\n**问题：volatile能否保证数组中元素的可见性？** 如果用volatile修饰一个数组，那么当一个线程对数组中的元素进行设值时，对另一个线程是否**立即**可见？ \n\n**答案：** 不能立即可见。因为volatile修饰的数组只针对数组的引用具有volatile的语义，而不是它的元素。\n","source":"_posts/深入理解volatile关键字(1).md","raw":"---\ntitle: 深入理解volatile关键字\ndate: 2017-10-12 15:12:12\ntags: [并发,volatile]\ncategories: 技术\n---\n## 一、volatile的特性\n###   1. volatile的可见性\n 可见性的意思是：当一个线程修改一个共享变量时，另一个线程能读到这个修改的值。  \n volatile在多线程的开发中，保证了共享变量的可见性（立即）。\n```\n//全局变量\nboolean open=true;\n\n//线程A\nresource.close();\nopen = false;\n\n//线程B\nwhile(open) {\ndoSomething(resource);\n}\n```\nopen是一个全局变量，用来描述一个资源的打开关闭状态，当线程A把资源关闭后，open置为false，而这个改动对线程B**不是立即可见**的，因此线程B还会运行，从而造成错误。  \n当添加volatile关键字修饰之后，线程B就可以**立即**将改动后的open变量（主内存）同步到自己的工作内存中，从而正确的停止运行。\n\n\n###  2. volatile的有序性（禁止指令重排序）\n \n\n```\n//线程A\ncontext = loadContext();//初始化\ninit = true;\n//线程B\nwhile(!init){ //根据init变量决定是否使用context（为false时等待，为true时顺序执行）\n   sleep(100);\n}\ndoSomething(context);\n\n```\n以上程序运行没有问题，然而当线程A中发生了指令重排序：\n```\ninit = true;\ncontext = loadContext();\n```\n那么B就可能跳过等待，拿到一个正在初始化或初始化未完成的context对象，从而发生程序错误。  \n当init变量用volatile修饰后，就会阻止JVM对其相关代码进行指令重排，这样就能够按照既定的顺序执行。  \n 在双重判断类型的单例模式中正是应用了volatile关键字的这个特性，才不会导致单例模式失效。\n \n###  3. volatile不保证操作的原子性\n原子操作：不可中断的一个或一系列操作（多线程中借助于原子操作可以实现互斥锁）  \n原子性：一个操作或多个操作要么全部成功执行，要么就都失败。一个操作是原子操作，那么我们称它具有原子性。  \n先看示例代码\n```\npublic class TestAtomic {\n//计数器\nprivate static volatile int count=0;\n\t\n\tpublic void inc(){\n\t\tcount++;\n\t}\n\tprivate static class Countone implements  Runnable {\n\t\tpublic void run() {\n\t\t\tfor(int i=0;i<100;i++){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\t\n\t\tfor(int i=0;i<10;i++){\n\t\t\tnew Thread(new Countone()).start();\n\t\t}\n\t\t//保证10个线程都执行完毕\n\t\twhile(Thread.activeCount()>1)\n\t\t\tThread.yield();\n\t\t\n\t\tSystem.out.println(\"最终count的值为：\"+TestAtomic.count);\n\t}\n}\n```\n```\n输出结果：\n最终count的值为：863\n最终count的值为：1000\n最终count的值为：872\n最终count的值为：835\n```\n将count变量声明为volatile int类型，保证了所有线程对变量count的可见性，上述定义了10个线程，每个线程对count执行100次自增的操作，按照理想的结果，最后的结果应该为10*100=1000，然而多次运行可以看到，并不是每次的结果都是1000，难道volatile修饰的变量的可见性特征失效了？**并不是，而是volatile只能保证共享变量对所有线程的可见性，不能保证变量操作的原子性。** count++不是一个原子操作，因此volatile不能保证这个操作的原子性。\n\n**有以下三种方式可以保证对变量操作的原子性：**\n\n 1. 使用synchronized关键字\n 2. 使用Lock对象\n 3. 使用java.util.concurrent.atomic包下提供的原子操作类\n\n## 二、volatile的实现原理\n### 1.可见性\n它的实现原理与java内存模型（JMM）相关，每个线程都有自己的工作内存，并共享主内存的数据。下面是普通变量与volatile变量的异同：\n\n - 普通变量：读操作会优先读取工作内存的数据，如果工作内存中不存在，则从主内存中拷贝一份数据到工作内存中；写操作只会修改工作内存的副本数据。这种情况下，其它线程就无法读取变量的最新值。\n \n - volatile变量：读操作时会把工作内存中对应的值设为无效，要求线程从主内存中读取数据；写操作时会把工作内存中对应的数据刷新到主内存中。这种情况下，其它线程就可以读取变量的最新值。\n\n那么它是如何是实现的呢？这就涉及到了CPU指令。  \n如果对声明了volatile变量进行写操作，**JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。** 但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。\n### 2.禁止重排序\n在执行程序时为了提高性能，编译器和处理器通常会对指令做重排序： \n\n - 编译器重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序； \n - 处理器重排序。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序； \n指令重排序对单线程没有影响，但是会影响多线程的正确性，因此需要对禁止指令重排序。\n\n在上面提到过lock指令，**lock指令其实就相当于一个内存屏障。内存屏障是一组处理指令，用来实现对内存操作的顺序限制。** volatile的底层就是通过内存屏障来实现的。\n\n## 三、volatile与synchronized的比较\n\n 1. volatile本质是在告诉JVM当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞。 \n \n 2. volatile只能修饰变量，synchronized可以修饰变量、方法和类；  \n \n 3. volatile保证变量的修改可见性，synchronized则可以保证变量的修改可见性和原子性。  \n 4. volatile不会造成线程的阻塞，synchronized可能会造成线程的阻塞。  \n 5. volatile比synchronized的使用和执行成本更低，因为它不会引起上下文的切换和调度。\n\n## 四、volatile的扩展\n\n### 1.volatile的常用场景\n\n - 状态标记量（高并发的场景）\n\n - 双重判断的单例模式\n\n### 2.volatile修饰数组\n\n**问题：volatile能否保证数组中元素的可见性？** 如果用volatile修饰一个数组，那么当一个线程对数组中的元素进行设值时，对另一个线程是否**立即**可见？ \n\n**答案：** 不能立即可见。因为volatile修饰的数组只针对数组的引用具有volatile的语义，而不是它的元素。\n","slug":"深入理解volatile关键字(1)","published":1,"updated":"2017-10-12T07:40:18.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfqzt27l004p50tc2uyl21e8","content":"<h2 id=\"一、volatile的特性\"><a href=\"#一、volatile的特性\" class=\"headerlink\" title=\"一、volatile的特性\"></a>一、volatile的特性</h2><h3 id=\"1-volatile的可见性\"><a href=\"#1-volatile的可见性\" class=\"headerlink\" title=\"1. volatile的可见性\"></a>1. volatile的可见性</h3><p> 可见性的意思是：当一个线程修改一个共享变量时，另一个线程能读到这个修改的值。<br> volatile在多线程的开发中，保证了共享变量的可见性（立即）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//全局变量</div><div class=\"line\">boolean open=true;</div><div class=\"line\"></div><div class=\"line\">//线程A</div><div class=\"line\">resource.close();</div><div class=\"line\">open = false;</div><div class=\"line\"></div><div class=\"line\">//线程B</div><div class=\"line\">while(open) &#123;</div><div class=\"line\">doSomething(resource);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>open是一个全局变量，用来描述一个资源的打开关闭状态，当线程A把资源关闭后，open置为false，而这个改动对线程B<strong>不是立即可见</strong>的，因此线程B还会运行，从而造成错误。<br>当添加volatile关键字修饰之后，线程B就可以<strong>立即</strong>将改动后的open变量（主内存）同步到自己的工作内存中，从而正确的停止运行。</p>\n<h3 id=\"2-volatile的有序性（禁止指令重排序）\"><a href=\"#2-volatile的有序性（禁止指令重排序）\" class=\"headerlink\" title=\"2. volatile的有序性（禁止指令重排序）\"></a>2. volatile的有序性（禁止指令重排序）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//线程A</div><div class=\"line\">context = loadContext();//初始化</div><div class=\"line\">init = true;</div><div class=\"line\">//线程B</div><div class=\"line\">while(!init)&#123; //根据init变量决定是否使用context（为false时等待，为true时顺序执行）</div><div class=\"line\">   sleep(100);</div><div class=\"line\">&#125;</div><div class=\"line\">doSomething(context);</div></pre></td></tr></table></figure>\n<p>以上程序运行没有问题，然而当线程A中发生了指令重排序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">init = true;</div><div class=\"line\">context = loadContext();</div></pre></td></tr></table></figure></p>\n<p>那么B就可能跳过等待，拿到一个正在初始化或初始化未完成的context对象，从而发生程序错误。<br>当init变量用volatile修饰后，就会阻止JVM对其相关代码进行指令重排，这样就能够按照既定的顺序执行。<br> 在双重判断类型的单例模式中正是应用了volatile关键字的这个特性，才不会导致单例模式失效。</p>\n<h3 id=\"3-volatile不保证操作的原子性\"><a href=\"#3-volatile不保证操作的原子性\" class=\"headerlink\" title=\"3. volatile不保证操作的原子性\"></a>3. volatile不保证操作的原子性</h3><p>原子操作：不可中断的一个或一系列操作（多线程中借助于原子操作可以实现互斥锁）<br>原子性：一个操作或多个操作要么全部成功执行，要么就都失败。一个操作是原子操作，那么我们称它具有原子性。<br>先看示例代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TestAtomic &#123;</div><div class=\"line\">//计数器</div><div class=\"line\">private static volatile int count=0;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void inc()&#123;</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprivate static class Countone implements  Runnable &#123;</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\tfor(int i=0;i&lt;100;i++)&#123;</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfor(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">\t\t\tnew Thread(new Countone()).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//保证10个线程都执行完毕</div><div class=\"line\">\t\twhile(Thread.activeCount()&gt;1)</div><div class=\"line\">\t\t\tThread.yield();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot;最终count的值为：&quot;+TestAtomic.count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出结果：</div><div class=\"line\">最终count的值为：863</div><div class=\"line\">最终count的值为：1000</div><div class=\"line\">最终count的值为：872</div><div class=\"line\">最终count的值为：835</div></pre></td></tr></table></figure>\n<p>将count变量声明为volatile int类型，保证了所有线程对变量count的可见性，上述定义了10个线程，每个线程对count执行100次自增的操作，按照理想的结果，最后的结果应该为10<em>100=1000，然而多次运行可以看到，并不是每次的结果都是1000，难道volatile修饰的变量的可见性特征失效了？<em>*并不是，而是volatile只能保证共享变量对所有线程的可见性，不能保证变量操作的原子性。</em></em> count++不是一个原子操作，因此volatile不能保证这个操作的原子性。</p>\n<p><strong>有以下三种方式可以保证对变量操作的原子性：</strong></p>\n<ol>\n<li>使用synchronized关键字</li>\n<li>使用Lock对象</li>\n<li>使用java.util.concurrent.atomic包下提供的原子操作类</li>\n</ol>\n<h2 id=\"二、volatile的实现原理\"><a href=\"#二、volatile的实现原理\" class=\"headerlink\" title=\"二、volatile的实现原理\"></a>二、volatile的实现原理</h2><h3 id=\"1-可见性\"><a href=\"#1-可见性\" class=\"headerlink\" title=\"1.可见性\"></a>1.可见性</h3><p>它的实现原理与java内存模型（JMM）相关，每个线程都有自己的工作内存，并共享主内存的数据。下面是普通变量与volatile变量的异同：</p>\n<ul>\n<li><p>普通变量：读操作会优先读取工作内存的数据，如果工作内存中不存在，则从主内存中拷贝一份数据到工作内存中；写操作只会修改工作内存的副本数据。这种情况下，其它线程就无法读取变量的最新值。</p>\n</li>\n<li><p>volatile变量：读操作时会把工作内存中对应的值设为无效，要求线程从主内存中读取数据；写操作时会把工作内存中对应的数据刷新到主内存中。这种情况下，其它线程就可以读取变量的最新值。</p>\n</li>\n</ul>\n<p>那么它是如何是实现的呢？这就涉及到了CPU指令。<br>如果对声明了volatile变量进行写操作，<strong>JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</strong> 但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p>\n<h3 id=\"2-禁止重排序\"><a href=\"#2-禁止重排序\" class=\"headerlink\" title=\"2.禁止重排序\"></a>2.禁止重排序</h3><p>在执行程序时为了提高性能，编译器和处理器通常会对指令做重排序： </p>\n<ul>\n<li>编译器重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序； </li>\n<li>处理器重排序。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序；<br>指令重排序对单线程没有影响，但是会影响多线程的正确性，因此需要对禁止指令重排序。</li>\n</ul>\n<p>在上面提到过lock指令，<strong>lock指令其实就相当于一个内存屏障。内存屏障是一组处理指令，用来实现对内存操作的顺序限制。</strong> volatile的底层就是通过内存屏障来实现的。</p>\n<h2 id=\"三、volatile与synchronized的比较\"><a href=\"#三、volatile与synchronized的比较\" class=\"headerlink\" title=\"三、volatile与synchronized的比较\"></a>三、volatile与synchronized的比较</h2><ol>\n<li><p>volatile本质是在告诉JVM当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞。 </p>\n</li>\n<li><p>volatile只能修饰变量，synchronized可以修饰变量、方法和类；  </p>\n</li>\n<li><p>volatile保证变量的修改可见性，synchronized则可以保证变量的修改可见性和原子性。  </p>\n</li>\n<li>volatile不会造成线程的阻塞，synchronized可能会造成线程的阻塞。  </li>\n<li>volatile比synchronized的使用和执行成本更低，因为它不会引起上下文的切换和调度。</li>\n</ol>\n<h2 id=\"四、volatile的扩展\"><a href=\"#四、volatile的扩展\" class=\"headerlink\" title=\"四、volatile的扩展\"></a>四、volatile的扩展</h2><h3 id=\"1-volatile的常用场景\"><a href=\"#1-volatile的常用场景\" class=\"headerlink\" title=\"1.volatile的常用场景\"></a>1.volatile的常用场景</h3><ul>\n<li><p>状态标记量（高并发的场景）</p>\n</li>\n<li><p>双重判断的单例模式</p>\n</li>\n</ul>\n<h3 id=\"2-volatile修饰数组\"><a href=\"#2-volatile修饰数组\" class=\"headerlink\" title=\"2.volatile修饰数组\"></a>2.volatile修饰数组</h3><p><strong>问题：volatile能否保证数组中元素的可见性？</strong> 如果用volatile修饰一个数组，那么当一个线程对数组中的元素进行设值时，对另一个线程是否<strong>立即</strong>可见？ </p>\n<p><strong>答案：</strong> 不能立即可见。因为volatile修饰的数组只针对数组的引用具有volatile的语义，而不是它的元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、volatile的特性\"><a href=\"#一、volatile的特性\" class=\"headerlink\" title=\"一、volatile的特性\"></a>一、volatile的特性</h2><h3 id=\"1-volatile的可见性\"><a href=\"#1-volatile的可见性\" class=\"headerlink\" title=\"1. volatile的可见性\"></a>1. volatile的可见性</h3><p> 可见性的意思是：当一个线程修改一个共享变量时，另一个线程能读到这个修改的值。<br> volatile在多线程的开发中，保证了共享变量的可见性（立即）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//全局变量</div><div class=\"line\">boolean open=true;</div><div class=\"line\"></div><div class=\"line\">//线程A</div><div class=\"line\">resource.close();</div><div class=\"line\">open = false;</div><div class=\"line\"></div><div class=\"line\">//线程B</div><div class=\"line\">while(open) &#123;</div><div class=\"line\">doSomething(resource);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>open是一个全局变量，用来描述一个资源的打开关闭状态，当线程A把资源关闭后，open置为false，而这个改动对线程B<strong>不是立即可见</strong>的，因此线程B还会运行，从而造成错误。<br>当添加volatile关键字修饰之后，线程B就可以<strong>立即</strong>将改动后的open变量（主内存）同步到自己的工作内存中，从而正确的停止运行。</p>\n<h3 id=\"2-volatile的有序性（禁止指令重排序）\"><a href=\"#2-volatile的有序性（禁止指令重排序）\" class=\"headerlink\" title=\"2. volatile的有序性（禁止指令重排序）\"></a>2. volatile的有序性（禁止指令重排序）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//线程A</div><div class=\"line\">context = loadContext();//初始化</div><div class=\"line\">init = true;</div><div class=\"line\">//线程B</div><div class=\"line\">while(!init)&#123; //根据init变量决定是否使用context（为false时等待，为true时顺序执行）</div><div class=\"line\">   sleep(100);</div><div class=\"line\">&#125;</div><div class=\"line\">doSomething(context);</div></pre></td></tr></table></figure>\n<p>以上程序运行没有问题，然而当线程A中发生了指令重排序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">init = true;</div><div class=\"line\">context = loadContext();</div></pre></td></tr></table></figure></p>\n<p>那么B就可能跳过等待，拿到一个正在初始化或初始化未完成的context对象，从而发生程序错误。<br>当init变量用volatile修饰后，就会阻止JVM对其相关代码进行指令重排，这样就能够按照既定的顺序执行。<br> 在双重判断类型的单例模式中正是应用了volatile关键字的这个特性，才不会导致单例模式失效。</p>\n<h3 id=\"3-volatile不保证操作的原子性\"><a href=\"#3-volatile不保证操作的原子性\" class=\"headerlink\" title=\"3. volatile不保证操作的原子性\"></a>3. volatile不保证操作的原子性</h3><p>原子操作：不可中断的一个或一系列操作（多线程中借助于原子操作可以实现互斥锁）<br>原子性：一个操作或多个操作要么全部成功执行，要么就都失败。一个操作是原子操作，那么我们称它具有原子性。<br>先看示例代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TestAtomic &#123;</div><div class=\"line\">//计数器</div><div class=\"line\">private static volatile int count=0;</div><div class=\"line\">\t</div><div class=\"line\">\tpublic void inc()&#123;</div><div class=\"line\">\t\tcount++;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprivate static class Countone implements  Runnable &#123;</div><div class=\"line\">\t\tpublic void run() &#123;</div><div class=\"line\">\t\t\tfor(int i=0;i&lt;100;i++)&#123;</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tfor(int i=0;i&lt;10;i++)&#123;</div><div class=\"line\">\t\t\tnew Thread(new Countone()).start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t//保证10个线程都执行完毕</div><div class=\"line\">\t\twhile(Thread.activeCount()&gt;1)</div><div class=\"line\">\t\t\tThread.yield();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(&quot;最终count的值为：&quot;+TestAtomic.count);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">输出结果：</div><div class=\"line\">最终count的值为：863</div><div class=\"line\">最终count的值为：1000</div><div class=\"line\">最终count的值为：872</div><div class=\"line\">最终count的值为：835</div></pre></td></tr></table></figure>\n<p>将count变量声明为volatile int类型，保证了所有线程对变量count的可见性，上述定义了10个线程，每个线程对count执行100次自增的操作，按照理想的结果，最后的结果应该为10<em>100=1000，然而多次运行可以看到，并不是每次的结果都是1000，难道volatile修饰的变量的可见性特征失效了？<em>*并不是，而是volatile只能保证共享变量对所有线程的可见性，不能保证变量操作的原子性。</em></em> count++不是一个原子操作，因此volatile不能保证这个操作的原子性。</p>\n<p><strong>有以下三种方式可以保证对变量操作的原子性：</strong></p>\n<ol>\n<li>使用synchronized关键字</li>\n<li>使用Lock对象</li>\n<li>使用java.util.concurrent.atomic包下提供的原子操作类</li>\n</ol>\n<h2 id=\"二、volatile的实现原理\"><a href=\"#二、volatile的实现原理\" class=\"headerlink\" title=\"二、volatile的实现原理\"></a>二、volatile的实现原理</h2><h3 id=\"1-可见性\"><a href=\"#1-可见性\" class=\"headerlink\" title=\"1.可见性\"></a>1.可见性</h3><p>它的实现原理与java内存模型（JMM）相关，每个线程都有自己的工作内存，并共享主内存的数据。下面是普通变量与volatile变量的异同：</p>\n<ul>\n<li><p>普通变量：读操作会优先读取工作内存的数据，如果工作内存中不存在，则从主内存中拷贝一份数据到工作内存中；写操作只会修改工作内存的副本数据。这种情况下，其它线程就无法读取变量的最新值。</p>\n</li>\n<li><p>volatile变量：读操作时会把工作内存中对应的值设为无效，要求线程从主内存中读取数据；写操作时会把工作内存中对应的数据刷新到主内存中。这种情况下，其它线程就可以读取变量的最新值。</p>\n</li>\n</ul>\n<p>那么它是如何是实现的呢？这就涉及到了CPU指令。<br>如果对声明了volatile变量进行写操作，<strong>JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</strong> 但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p>\n<h3 id=\"2-禁止重排序\"><a href=\"#2-禁止重排序\" class=\"headerlink\" title=\"2.禁止重排序\"></a>2.禁止重排序</h3><p>在执行程序时为了提高性能，编译器和处理器通常会对指令做重排序： </p>\n<ul>\n<li>编译器重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序； </li>\n<li>处理器重排序。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序；<br>指令重排序对单线程没有影响，但是会影响多线程的正确性，因此需要对禁止指令重排序。</li>\n</ul>\n<p>在上面提到过lock指令，<strong>lock指令其实就相当于一个内存屏障。内存屏障是一组处理指令，用来实现对内存操作的顺序限制。</strong> volatile的底层就是通过内存屏障来实现的。</p>\n<h2 id=\"三、volatile与synchronized的比较\"><a href=\"#三、volatile与synchronized的比较\" class=\"headerlink\" title=\"三、volatile与synchronized的比较\"></a>三、volatile与synchronized的比较</h2><ol>\n<li><p>volatile本质是在告诉JVM当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞。 </p>\n</li>\n<li><p>volatile只能修饰变量，synchronized可以修饰变量、方法和类；  </p>\n</li>\n<li><p>volatile保证变量的修改可见性，synchronized则可以保证变量的修改可见性和原子性。  </p>\n</li>\n<li>volatile不会造成线程的阻塞，synchronized可能会造成线程的阻塞。  </li>\n<li>volatile比synchronized的使用和执行成本更低，因为它不会引起上下文的切换和调度。</li>\n</ol>\n<h2 id=\"四、volatile的扩展\"><a href=\"#四、volatile的扩展\" class=\"headerlink\" title=\"四、volatile的扩展\"></a>四、volatile的扩展</h2><h3 id=\"1-volatile的常用场景\"><a href=\"#1-volatile的常用场景\" class=\"headerlink\" title=\"1.volatile的常用场景\"></a>1.volatile的常用场景</h3><ul>\n<li><p>状态标记量（高并发的场景）</p>\n</li>\n<li><p>双重判断的单例模式</p>\n</li>\n</ul>\n<h3 id=\"2-volatile修饰数组\"><a href=\"#2-volatile修饰数组\" class=\"headerlink\" title=\"2.volatile修饰数组\"></a>2.volatile修饰数组</h3><p><strong>问题：volatile能否保证数组中元素的可见性？</strong> 如果用volatile修饰一个数组，那么当一个线程对数组中的元素进行设值时，对另一个线程是否<strong>立即</strong>可见？ </p>\n<p><strong>答案：</strong> 不能立即可见。因为volatile修饰的数组只针对数组的引用具有volatile的语义，而不是它的元素。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfqzt23t000550tccnnpz72e","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt249000a50tc0hl9jo3e"},{"post_id":"cjfqzt23e000050tckw7s8lee","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt249000e50tckdaymud3"},{"post_id":"cjfqzt23t000650tc696zm3bp","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt249000h50tcl4c85lk3"},{"post_id":"cjfqzt249000950tc64nekcaa","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt24p000l50tcr1wxofrm"},{"post_id":"cjfqzt23e000150tc6mkn4l4b","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt24r000n50tc79q21liv"},{"post_id":"cjfqzt249000b50tcedac6agu","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt24u000p50tcbfcrd1mc"},{"post_id":"cjfqzt249000f50tcw06tofdd","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt24w000s50tc58udh0ek"},{"post_id":"cjfqzt23t000450tcxcz5gqvz","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt24z000u50tcrshmd91h"},{"post_id":"cjfqzt249000i50tcova5lry4","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt253000x50tcr2wxigby"},{"post_id":"cjfqzt24q000m50tc2i8bs967","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt257001050tck3zvctve"},{"post_id":"cjfqzt24s000o50tcfitfyxhe","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001450tc1ei1y5nt"},{"post_id":"cjfqzt24v000r50tcmoox52b7","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001750tchphiiv3l"},{"post_id":"cjfqzt24x000t50tckfdkhp0o","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001a50tcij72ukdq"},{"post_id":"cjfqzt24z000v50tc54rb46tg","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001d50tch3syriu2"},{"post_id":"cjfqzt254000z50tcsf091wph","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001h50tc6fbofquz"},{"post_id":"cjfqzt258001250tccf3ry3f9","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001k50tcvquqhlli"},{"post_id":"cjfqzt259001650tcqh9mqy3n","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt259001o50tcmvlxjgce"},{"post_id":"cjfqzt259001850tc6nqkmwqh","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt25p001q50tcv0lfqplt"},{"post_id":"cjfqzt259001b50tcv5zcdjfp","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt25p001t50tcch430f2n"},{"post_id":"cjfqzt259001e50tc53avv9wg","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt25p001w50tcy9zk2eny"},{"post_id":"cjfqzt259001i50tckm2msj88","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt25p002050tc5jk4ga6w"},{"post_id":"cjfqzt259001l50tc4m3oi9ob","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt264002250tcd9jedq9m"},{"post_id":"cjfqzt25p001p50tct7wdfn54","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt264002350tcfo8egrcl"},{"post_id":"cjfqzt25p001r50tcdjb1afhb","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt264002650tcsv1u4rds"},{"post_id":"cjfqzt25p001u50tce59uniua","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt264002850tc3r6nvbby"},{"post_id":"cjfqzt25p002150tcr0yuxhqs","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt264002a50tcduufnfqj"},{"post_id":"cjfqzt276004a50tctumt8zm6","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt27h004h50tc5j4ix06a"},{"post_id":"cjfqzt279004c50tcgehz2tp0","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt27j004k50tcvkymb7ya"},{"post_id":"cjfqzt27c004f50tcozgy1uun","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt27l004o50tc9h5w3vhe"},{"post_id":"cjfqzt27k004l50tc6vqsnhd5","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt27l004r50tcq0c2lwf1"},{"post_id":"cjfqzt27l004p50tc2uyl21e8","category_id":"cjfqzt23t000250tc9bw2ubnr","_id":"cjfqzt27l004t50tcw0tdh4gy"},{"post_id":"cjfqzt27h004i50tcrvjnlqok","category_id":"cjfqzt27l004n50tc1wsjzy3b","_id":"cjfqzt27l004w50tct308209g"}],"PostTag":[{"post_id":"cjfqzt23e000050tckw7s8lee","tag_id":"cjfqzt23t000350tc7fekwgsw","_id":"cjfqzt249000g50tco7b9t0c2"},{"post_id":"cjfqzt23e000050tckw7s8lee","tag_id":"cjfqzt23t000850tc8wr7st4a","_id":"cjfqzt249000j50tc13l11r4g"},{"post_id":"cjfqzt23e000150tc6mkn4l4b","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt254000y50tcmj4t0sp0"},{"post_id":"cjfqzt23e000150tc6mkn4l4b","tag_id":"cjfqzt24p000k50tc5z4tydrw","_id":"cjfqzt258001150tcbhmzvhno"},{"post_id":"cjfqzt23e000150tc6mkn4l4b","tag_id":"cjfqzt24u000q50tczm55ezye","_id":"cjfqzt259001550tc5qcxqat1"},{"post_id":"cjfqzt23t000450tcxcz5gqvz","tag_id":"cjfqzt250000w50tcvmvv6mnn","_id":"cjfqzt259001c50tcwqmegr3j"},{"post_id":"cjfqzt23t000450tcxcz5gqvz","tag_id":"cjfqzt23t000850tc8wr7st4a","_id":"cjfqzt259001f50tcufs23q2g"},{"post_id":"cjfqzt23t000550tccnnpz72e","tag_id":"cjfqzt23t000350tc7fekwgsw","_id":"cjfqzt259001j50tc4kpzn763"},{"post_id":"cjfqzt23t000550tccnnpz72e","tag_id":"cjfqzt259001950tcv90vpgth","_id":"cjfqzt259001m50tct45abt6r"},{"post_id":"cjfqzt23t000650tc696zm3bp","tag_id":"cjfqzt250000w50tcvmvv6mnn","_id":"cjfqzt25p001v50tcci9uz2wf"},{"post_id":"cjfqzt23t000650tc696zm3bp","tag_id":"cjfqzt259001950tcv90vpgth","_id":"cjfqzt25p001y50tctw12q2mz"},{"post_id":"cjfqzt249000950tc64nekcaa","tag_id":"cjfqzt250000w50tcvmvv6mnn","_id":"cjfqzt264002550tcgrtg1lb1"},{"post_id":"cjfqzt249000950tc64nekcaa","tag_id":"cjfqzt25p001z50tcwfrv5y0t","_id":"cjfqzt264002750tca6vnpybe"},{"post_id":"cjfqzt249000b50tcedac6agu","tag_id":"cjfqzt264002450tcq56kjsrr","_id":"cjfqzt264002c50tcmbim97al"},{"post_id":"cjfqzt249000b50tcedac6agu","tag_id":"cjfqzt264002950tcep1xahwe","_id":"cjfqzt264002d50tcionyg2br"},{"post_id":"cjfqzt249000f50tcw06tofdd","tag_id":"cjfqzt264002450tcq56kjsrr","_id":"cjfqzt264002g50tczvxn0zvt"},{"post_id":"cjfqzt249000f50tcw06tofdd","tag_id":"cjfqzt264002e50tc5rhglsix","_id":"cjfqzt264002h50tcu5zkk9rg"},{"post_id":"cjfqzt249000i50tcova5lry4","tag_id":"cjfqzt264002450tcq56kjsrr","_id":"cjfqzt264002k50tc80ozfgh6"},{"post_id":"cjfqzt249000i50tcova5lry4","tag_id":"cjfqzt264002i50tcteuibl6y","_id":"cjfqzt264002l50tcl6kjttf0"},{"post_id":"cjfqzt24q000m50tc2i8bs967","tag_id":"cjfqzt264002j50tcnd2leib9","_id":"cjfqzt264002o50tcmp59grzf"},{"post_id":"cjfqzt24q000m50tc2i8bs967","tag_id":"cjfqzt264002m50tc1zib1uof","_id":"cjfqzt264002p50tctjhpdaul"},{"post_id":"cjfqzt24v000r50tcmoox52b7","tag_id":"cjfqzt264002450tcq56kjsrr","_id":"cjfqzt264002s50tckz6fyunm"},{"post_id":"cjfqzt24v000r50tcmoox52b7","tag_id":"cjfqzt264002q50tcjekp7a6g","_id":"cjfqzt264002t50tca8iwabuj"},{"post_id":"cjfqzt24x000t50tckfdkhp0o","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt264002v50tchzfl4h7i"},{"post_id":"cjfqzt24x000t50tckfdkhp0o","tag_id":"cjfqzt264002r50tcdl5qiiz2","_id":"cjfqzt264002w50tclfuslk0y"},{"post_id":"cjfqzt24z000v50tc54rb46tg","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt264002y50tc1rd2uf51"},{"post_id":"cjfqzt24z000v50tc54rb46tg","tag_id":"cjfqzt264002u50tc5rv9q5ld","_id":"cjfqzt264002z50tcy6ej0ayo"},{"post_id":"cjfqzt254000z50tcsf091wph","tag_id":"cjfqzt264002x50tcw6t1qgv1","_id":"cjfqzt264003250tcl22n6ft6"},{"post_id":"cjfqzt254000z50tcsf091wph","tag_id":"cjfqzt264003050tcflwaz1b3","_id":"cjfqzt264003350tc24kmo3d6"},{"post_id":"cjfqzt258001250tccf3ry3f9","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003550tcupo3jeh3"},{"post_id":"cjfqzt258001250tccf3ry3f9","tag_id":"cjfqzt264003150tcou07z940","_id":"cjfqzt26k003650tc27nngwyx"},{"post_id":"cjfqzt259001650tcqh9mqy3n","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003850tcupshvd1e"},{"post_id":"cjfqzt259001650tcqh9mqy3n","tag_id":"cjfqzt264003450tczdcxv7bb","_id":"cjfqzt26k003950tciwa1jnr0"},{"post_id":"cjfqzt259001850tc6nqkmwqh","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003b50tc426nx0g9"},{"post_id":"cjfqzt259001850tc6nqkmwqh","tag_id":"cjfqzt26k003750tcjd3ubsfw","_id":"cjfqzt26k003c50tcj8aunysb"},{"post_id":"cjfqzt259001b50tcv5zcdjfp","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003e50tc7ns51wol"},{"post_id":"cjfqzt259001b50tcv5zcdjfp","tag_id":"cjfqzt26k003a50tczuoyz3qa","_id":"cjfqzt26k003f50tcey2ruuap"},{"post_id":"cjfqzt259001e50tc53avv9wg","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003h50tcpaiohygm"},{"post_id":"cjfqzt259001e50tc53avv9wg","tag_id":"cjfqzt26k003d50tcgy1dxpli","_id":"cjfqzt26k003i50tce1heps89"},{"post_id":"cjfqzt259001i50tckm2msj88","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003k50tc7fjy043z"},{"post_id":"cjfqzt259001i50tckm2msj88","tag_id":"cjfqzt24p000k50tc5z4tydrw","_id":"cjfqzt26k003l50tchlljpoje"},{"post_id":"cjfqzt259001i50tckm2msj88","tag_id":"cjfqzt26k003d50tcgy1dxpli","_id":"cjfqzt26k003n50tcszrfhfg2"},{"post_id":"cjfqzt259001l50tc4m3oi9ob","tag_id":"cjfqzt26k003j50tc3in0r2oy","_id":"cjfqzt26k003p50tc2a2k3oqn"},{"post_id":"cjfqzt259001l50tc4m3oi9ob","tag_id":"cjfqzt26k003m50tc05qj0ab3","_id":"cjfqzt26k003q50tcg9tkdded"},{"post_id":"cjfqzt25p001p50tct7wdfn54","tag_id":"cjfqzt26k003o50tcli0l1mo6","_id":"cjfqzt26k003u50tcqnjhf9qf"},{"post_id":"cjfqzt25p001p50tct7wdfn54","tag_id":"cjfqzt26k003r50tcajwairxv","_id":"cjfqzt26k003v50tc7rburxwq"},{"post_id":"cjfqzt25p001p50tct7wdfn54","tag_id":"cjfqzt26k003s50tcyl4ydo0v","_id":"cjfqzt26k003x50tc5dme3bch"},{"post_id":"cjfqzt25p001r50tcdjb1afhb","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k003z50tcpe0qmaqp"},{"post_id":"cjfqzt25p001r50tcdjb1afhb","tag_id":"cjfqzt26k003t50tcsozfdnp1","_id":"cjfqzt26k004050tcspcvewd4"},{"post_id":"cjfqzt25p001r50tcdjb1afhb","tag_id":"cjfqzt26k003w50tcfy8kilsr","_id":"cjfqzt26k004250tcii5e1esx"},{"post_id":"cjfqzt25p001u50tce59uniua","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt26k004450tc0p9jkyxu"},{"post_id":"cjfqzt25p001u50tce59uniua","tag_id":"cjfqzt26k003y50tcimfg7wvv","_id":"cjfqzt26k004550tcpx0ghbh0"},{"post_id":"cjfqzt25p001u50tce59uniua","tag_id":"cjfqzt26k004150tcgnnet7qb","_id":"cjfqzt26k004750tc5lgwy0b8"},{"post_id":"cjfqzt25p002150tcr0yuxhqs","tag_id":"cjfqzt26k004350tc3imy1smz","_id":"cjfqzt26k004850tcuqxflnh8"},{"post_id":"cjfqzt25p002150tcr0yuxhqs","tag_id":"cjfqzt26k004650tc1q961euu","_id":"cjfqzt26k004950tc7ayad05u"},{"post_id":"cjfqzt276004a50tctumt8zm6","tag_id":"cjfqzt27b004e50tc1l4zqqyi","_id":"cjfqzt27l004s50tcugcro4c1"},{"post_id":"cjfqzt276004a50tctumt8zm6","tag_id":"cjfqzt27l004m50tcccx159s7","_id":"cjfqzt27l004u50tc825d2yof"},{"post_id":"cjfqzt279004c50tcgehz2tp0","tag_id":"cjfqzt26k003j50tc3in0r2oy","_id":"cjfqzt27l004x50tcgnzdg3im"},{"post_id":"cjfqzt279004c50tcgehz2tp0","tag_id":"cjfqzt27l004q50tc0aulc17q","_id":"cjfqzt27l004y50tc1qbjgbr4"},{"post_id":"cjfqzt27c004f50tcozgy1uun","tag_id":"cjfqzt27l004v50tc6umsu2k7","_id":"cjfqzt27l005150tcysch5l4o"},{"post_id":"cjfqzt27c004f50tcozgy1uun","tag_id":"cjfqzt27l004z50tch2k930ub","_id":"cjfqzt27l005250tcedkgoqmp"},{"post_id":"cjfqzt27h004i50tcrvjnlqok","tag_id":"cjfqzt27l005050tclej2pj9j","_id":"cjfqzt27l005450tc36218r39"},{"post_id":"cjfqzt27k004l50tc6vqsnhd5","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt27l005650tcv5qbjkl4"},{"post_id":"cjfqzt27k004l50tc6vqsnhd5","tag_id":"cjfqzt27l005350tc8re8rsg7","_id":"cjfqzt27l005750tcz5cjesk7"},{"post_id":"cjfqzt27l004p50tc2uyl21e8","tag_id":"cjfqzt249000d50tcd4w7da8n","_id":"cjfqzt27l005850tcniax816a"},{"post_id":"cjfqzt27l004p50tc2uyl21e8","tag_id":"cjfqzt27l005550tcupl76v4n","_id":"cjfqzt27l005950tcoefljkr2"}],"Tag":[{"name":"ConcurrentHashMap","_id":"cjfqzt23t000350tc7fekwgsw"},{"name":"JDK1.7","_id":"cjfqzt23t000850tc8wr7st4a"},{"name":"并发","_id":"cjfqzt249000d50tcd4w7da8n"},{"name":"AQS","_id":"cjfqzt24p000k50tc5z4tydrw"},{"name":"共享锁","_id":"cjfqzt24u000q50tczm55ezye"},{"name":"HashMap","_id":"cjfqzt250000w50tcvmvv6mnn"},{"name":"JDK1.8","_id":"cjfqzt259001950tcv90vpgth"},{"name":"线程安全","_id":"cjfqzt25p001z50tcwfrv5y0t"},{"name":"JVM","_id":"cjfqzt264002450tcq56kjsrr"},{"name":"垃圾收集算法","_id":"cjfqzt264002950tcep1xahwe"},{"name":"垃圾收集器","_id":"cjfqzt264002e50tc5rhglsix"},{"name":"对象创建过程","_id":"cjfqzt264002i50tcteuibl6y"},{"name":"spring定时任务","_id":"cjfqzt264002j50tcnd2leib9"},{"name":"Mysql备份还原","_id":"cjfqzt264002m50tc1zib1uof"},{"name":"类加载机制","_id":"cjfqzt264002q50tcjekp7a6g"},{"name":"Condition","_id":"cjfqzt264002r50tcdl5qiiz2"},{"name":"Executor框架","_id":"cjfqzt264002u50tc5rv9q5ld"},{"name":"Hexo","_id":"cjfqzt264002x50tcw6t1qgv1"},{"name":"MarkDown","_id":"cjfqzt264003050tcflwaz1b3"},{"name":"CyclicBarrier","_id":"cjfqzt264003150tcou07z940"},{"name":"CountDownLatch","_id":"cjfqzt264003450tczdcxv7bb"},{"name":"Java线程池","_id":"cjfqzt26k003750tcjd3ubsfw"},{"name":"Semaphore","_id":"cjfqzt26k003a50tczuoyz3qa"},{"name":"Lock","_id":"cjfqzt26k003d50tcgy1dxpli"},{"name":"Mysql","_id":"cjfqzt26k003j50tc3in0r2oy"},{"name":"数据库","_id":"cjfqzt26k003m50tc05qj0ab3"},{"name":"Redis","_id":"cjfqzt26k003o50tcli0l1mo6"},{"name":"Pipeline","_id":"cjfqzt26k003r50tcajwairxv"},{"name":"批量，缓存","_id":"cjfqzt26k003s50tcyl4ydo0v"},{"name":"ReentrantReadWriteLock","_id":"cjfqzt26k003t50tcsozfdnp1"},{"name":"可重入读写锁","_id":"cjfqzt26k003w50tcfy8kilsr"},{"name":"ReentrantLock","_id":"cjfqzt26k003y50tcimfg7wvv"},{"name":"重入锁","_id":"cjfqzt26k004150tcgnnet7qb"},{"name":"Java","_id":"cjfqzt26k004350tc3imy1smz"},{"name":"Jersey","_id":"cjfqzt26k004650tc1q961euu"},{"name":"Thrift","_id":"cjfqzt27b004e50tc1l4zqqyi"},{"name":"RPC","_id":"cjfqzt27l004m50tcccx159s7"},{"name":"Mybatis","_id":"cjfqzt27l004q50tc0aulc17q"},{"name":"算法","_id":"cjfqzt27l004v50tc6umsu2k7"},{"name":"逆波兰表达式","_id":"cjfqzt27l004z50tch2k930ub"},{"name":"Soul","_id":"cjfqzt27l005050tclej2pj9j"},{"name":"synchronized","_id":"cjfqzt27l005350tc8re8rsg7"},{"name":"volatile","_id":"cjfqzt27l005550tcupl76v4n"}]}}